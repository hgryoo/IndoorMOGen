//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package org.w3.smil.v_2_0.language;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import org.w3.smil.v_2_0.FillDefaultType;
import org.w3.smil.v_2_0.FillTimingAttrsType;
import org.w3.smil.v_2_0.RestartDefaultType;
import org.w3.smil.v_2_0.RestartTimingType;
import org.w3.smil.v_2_0.SetPrototype;
import org.w3.smil.v_2_0.SyncBehaviorDefaultType;
import org.w3.smil.v_2_0.SyncBehaviorType;
import org.w3c.dom.Element;


/**
 * <p>Java class for setType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="setType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.w3.org/2001/SMIL20/}setPrototype"&gt;
 *       &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;any processContents='lax' namespace='##other'/&gt;
 *       &lt;/choice&gt;
 *       &lt;attGroup ref="{http://www.w3.org/2001/SMIL20/}skipContentAttrs"/&gt;
 *       &lt;attGroup ref="{http://www.w3.org/2001/SMIL20/Language}TimingAttrs"/&gt;
 *       &lt;attGroup ref="{http://www.w3.org/2001/SMIL20/Language}CoreAttrs"/&gt;
 *       &lt;attGroup ref="{http://www.w3.org/2001/SMIL20/}animTargetAttrs"/&gt;
 *       &lt;anyAttribute/&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "setType", propOrder = {
    "any"
})
public class SetType
    extends SetPrototype
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "skip-content")
    protected Boolean skipContent;
    @XmlAttribute(name = "syncBehaviorDefault")
    protected SyncBehaviorDefaultType syncBehaviorDefault;
    @XmlAttribute(name = "syncToleranceDefault")
    protected String syncToleranceDefault;
    @XmlAttribute(name = "min")
    protected String min;
    @XmlAttribute(name = "max")
    protected String max;
    @XmlAttribute(name = "dur")
    protected String dur;
    @XmlAttribute(name = "repeat")
    @XmlSchemaType(name = "nonNegativeInteger")
    protected BigInteger repeat;
    @XmlAttribute(name = "repeatDur")
    protected String repeatDur;
    @XmlAttribute(name = "repeatCount")
    protected BigDecimal repeatCount;
    @XmlAttribute(name = "begin")
    protected String begin;
    @XmlAttribute(name = "end")
    protected String end;
    @XmlAttribute(name = "restartDefault")
    protected RestartDefaultType restartDefault;
    @XmlAttribute(name = "syncBehavior")
    protected SyncBehaviorType syncBehavior;
    @XmlAttribute(name = "syncTolerance")
    protected String syncTolerance;
    @XmlAttribute(name = "fillDefault")
    protected FillDefaultType fillDefault;
    @XmlAttribute(name = "restart")
    protected RestartTimingType restart;
    @XmlAttribute(name = "fill")
    protected FillTimingAttrsType fill;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAttribute(name = "class")
    protected String clazz;
    @XmlAttribute(name = "lang", namespace = "http://www.w3.org/XML/1998/namespace")
    protected String lang;
    @XmlAttribute(name = "alt")
    protected String alt;
    @XmlAttribute(name = "longdesc")
    @XmlSchemaType(name = "anyURI")
    protected String longdesc;
    @XmlAttribute(name = "targetElement")
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object targetElement;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * {@link Element }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    public boolean isSetAny() {
        return ((this.any!= null)&&(!this.any.isEmpty()));
    }

    public void unsetAny() {
        this.any = null;
    }

    /**
     * Gets the value of the skipContent property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isSkipContent() {
        if (skipContent == null) {
            return true;
        } else {
            return skipContent;
        }
    }

    /**
     * Sets the value of the skipContent property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setSkipContent(boolean value) {
        this.skipContent = value;
    }

    public boolean isSetSkipContent() {
        return (this.skipContent!= null);
    }

    public void unsetSkipContent() {
        this.skipContent = null;
    }

    /**
     * Gets the value of the syncBehaviorDefault property.
     * 
     * @return
     *     possible object is
     *     {@link SyncBehaviorDefaultType }
     *     
     */
    public SyncBehaviorDefaultType getSyncBehaviorDefault() {
        if (syncBehaviorDefault == null) {
            return SyncBehaviorDefaultType.INHERIT;
        } else {
            return syncBehaviorDefault;
        }
    }

    /**
     * Sets the value of the syncBehaviorDefault property.
     * 
     * @param value
     *     allowed object is
     *     {@link SyncBehaviorDefaultType }
     *     
     */
    public void setSyncBehaviorDefault(SyncBehaviorDefaultType value) {
        this.syncBehaviorDefault = value;
    }

    public boolean isSetSyncBehaviorDefault() {
        return (this.syncBehaviorDefault!= null);
    }

    /**
     * Gets the value of the syncToleranceDefault property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSyncToleranceDefault() {
        if (syncToleranceDefault == null) {
            return "inherit";
        } else {
            return syncToleranceDefault;
        }
    }

    /**
     * Sets the value of the syncToleranceDefault property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSyncToleranceDefault(String value) {
        this.syncToleranceDefault = value;
    }

    public boolean isSetSyncToleranceDefault() {
        return (this.syncToleranceDefault!= null);
    }

    /**
     * Gets the value of the min property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMin() {
        return min;
    }

    /**
     * Sets the value of the min property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMin(String value) {
        this.min = value;
    }

    public boolean isSetMin() {
        return (this.min!= null);
    }

    /**
     * Gets the value of the max property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMax() {
        return max;
    }

    /**
     * Sets the value of the max property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMax(String value) {
        this.max = value;
    }

    public boolean isSetMax() {
        return (this.max!= null);
    }

    /**
     * Gets the value of the dur property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDur() {
        return dur;
    }

    /**
     * Sets the value of the dur property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDur(String value) {
        this.dur = value;
    }

    public boolean isSetDur() {
        return (this.dur!= null);
    }

    /**
     * Gets the value of the repeat property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getRepeat() {
        return repeat;
    }

    /**
     * Sets the value of the repeat property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setRepeat(BigInteger value) {
        this.repeat = value;
    }

    public boolean isSetRepeat() {
        return (this.repeat!= null);
    }

    /**
     * Gets the value of the repeatDur property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRepeatDur() {
        return repeatDur;
    }

    /**
     * Sets the value of the repeatDur property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRepeatDur(String value) {
        this.repeatDur = value;
    }

    public boolean isSetRepeatDur() {
        return (this.repeatDur!= null);
    }

    /**
     * Gets the value of the repeatCount property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getRepeatCount() {
        return repeatCount;
    }

    /**
     * Sets the value of the repeatCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setRepeatCount(BigDecimal value) {
        this.repeatCount = value;
    }

    public boolean isSetRepeatCount() {
        return (this.repeatCount!= null);
    }

    /**
     * Gets the value of the begin property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBegin() {
        return begin;
    }

    /**
     * Sets the value of the begin property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBegin(String value) {
        this.begin = value;
    }

    public boolean isSetBegin() {
        return (this.begin!= null);
    }

    /**
     * Gets the value of the end property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEnd() {
        return end;
    }

    /**
     * Sets the value of the end property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setEnd(String value) {
        this.end = value;
    }

    public boolean isSetEnd() {
        return (this.end!= null);
    }

    /**
     * Gets the value of the restartDefault property.
     * 
     * @return
     *     possible object is
     *     {@link RestartDefaultType }
     *     
     */
    public RestartDefaultType getRestartDefault() {
        if (restartDefault == null) {
            return RestartDefaultType.INHERIT;
        } else {
            return restartDefault;
        }
    }

    /**
     * Sets the value of the restartDefault property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestartDefaultType }
     *     
     */
    public void setRestartDefault(RestartDefaultType value) {
        this.restartDefault = value;
    }

    public boolean isSetRestartDefault() {
        return (this.restartDefault!= null);
    }

    /**
     * Gets the value of the syncBehavior property.
     * 
     * @return
     *     possible object is
     *     {@link SyncBehaviorType }
     *     
     */
    public SyncBehaviorType getSyncBehavior() {
        if (syncBehavior == null) {
            return SyncBehaviorType.DEFAULT;
        } else {
            return syncBehavior;
        }
    }

    /**
     * Sets the value of the syncBehavior property.
     * 
     * @param value
     *     allowed object is
     *     {@link SyncBehaviorType }
     *     
     */
    public void setSyncBehavior(SyncBehaviorType value) {
        this.syncBehavior = value;
    }

    public boolean isSetSyncBehavior() {
        return (this.syncBehavior!= null);
    }

    /**
     * Gets the value of the syncTolerance property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSyncTolerance() {
        return syncTolerance;
    }

    /**
     * Sets the value of the syncTolerance property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSyncTolerance(String value) {
        this.syncTolerance = value;
    }

    public boolean isSetSyncTolerance() {
        return (this.syncTolerance!= null);
    }

    /**
     * Gets the value of the fillDefault property.
     * 
     * @return
     *     possible object is
     *     {@link FillDefaultType }
     *     
     */
    public FillDefaultType getFillDefault() {
        if (fillDefault == null) {
            return FillDefaultType.INHERIT;
        } else {
            return fillDefault;
        }
    }

    /**
     * Sets the value of the fillDefault property.
     * 
     * @param value
     *     allowed object is
     *     {@link FillDefaultType }
     *     
     */
    public void setFillDefault(FillDefaultType value) {
        this.fillDefault = value;
    }

    public boolean isSetFillDefault() {
        return (this.fillDefault!= null);
    }

    /**
     * Gets the value of the restart property.
     * 
     * @return
     *     possible object is
     *     {@link RestartTimingType }
     *     
     */
    public RestartTimingType getRestart() {
        if (restart == null) {
            return RestartTimingType.DEFAULT;
        } else {
            return restart;
        }
    }

    /**
     * Sets the value of the restart property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestartTimingType }
     *     
     */
    public void setRestart(RestartTimingType value) {
        this.restart = value;
    }

    public boolean isSetRestart() {
        return (this.restart!= null);
    }

    /**
     * Gets the value of the fill property.
     * 
     * @return
     *     possible object is
     *     {@link FillTimingAttrsType }
     *     
     */
    public FillTimingAttrsType getFill() {
        if (fill == null) {
            return FillTimingAttrsType.DEFAULT;
        } else {
            return fill;
        }
    }

    /**
     * Sets the value of the fill property.
     * 
     * @param value
     *     allowed object is
     *     {@link FillTimingAttrsType }
     *     
     */
    public void setFill(FillTimingAttrsType value) {
        this.fill = value;
    }

    public boolean isSetFill() {
        return (this.fill!= null);
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    public boolean isSetId() {
        return (this.id!= null);
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setClazz(String value) {
        this.clazz = value;
    }

    public boolean isSetClazz() {
        return (this.clazz!= null);
    }

    /**
     * Gets the value of the lang property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLang() {
        return lang;
    }

    /**
     * Sets the value of the lang property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLang(String value) {
        this.lang = value;
    }

    public boolean isSetLang() {
        return (this.lang!= null);
    }

    /**
     * Gets the value of the alt property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAlt() {
        return alt;
    }

    /**
     * Sets the value of the alt property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAlt(String value) {
        this.alt = value;
    }

    public boolean isSetAlt() {
        return (this.alt!= null);
    }

    /**
     * Gets the value of the longdesc property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLongdesc() {
        return longdesc;
    }

    /**
     * Sets the value of the longdesc property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLongdesc(String value) {
        this.longdesc = value;
    }

    public boolean isSetLongdesc() {
        return (this.longdesc!= null);
    }

    /**
     * Gets the value of the targetElement property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getTargetElement() {
        return targetElement;
    }

    /**
     * Sets the value of the targetElement property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setTargetElement(Object value) {
        this.targetElement = value;
    }

    public boolean isSetTargetElement() {
        return (this.targetElement!= null);
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            boolean theSkipContent;
            theSkipContent = (this.isSetSkipContent()?this.isSkipContent():false);
            strategy.appendField(locator, this, "skipContent", buffer, theSkipContent);
        }
        {
            SyncBehaviorDefaultType theSyncBehaviorDefault;
            theSyncBehaviorDefault = this.getSyncBehaviorDefault();
            strategy.appendField(locator, this, "syncBehaviorDefault", buffer, theSyncBehaviorDefault);
        }
        {
            String theSyncToleranceDefault;
            theSyncToleranceDefault = this.getSyncToleranceDefault();
            strategy.appendField(locator, this, "syncToleranceDefault", buffer, theSyncToleranceDefault);
        }
        {
            String theMin;
            theMin = this.getMin();
            strategy.appendField(locator, this, "min", buffer, theMin);
        }
        {
            String theMax;
            theMax = this.getMax();
            strategy.appendField(locator, this, "max", buffer, theMax);
        }
        {
            String theDur;
            theDur = this.getDur();
            strategy.appendField(locator, this, "dur", buffer, theDur);
        }
        {
            BigInteger theRepeat;
            theRepeat = this.getRepeat();
            strategy.appendField(locator, this, "repeat", buffer, theRepeat);
        }
        {
            String theRepeatDur;
            theRepeatDur = this.getRepeatDur();
            strategy.appendField(locator, this, "repeatDur", buffer, theRepeatDur);
        }
        {
            BigDecimal theRepeatCount;
            theRepeatCount = this.getRepeatCount();
            strategy.appendField(locator, this, "repeatCount", buffer, theRepeatCount);
        }
        {
            String theBegin;
            theBegin = this.getBegin();
            strategy.appendField(locator, this, "begin", buffer, theBegin);
        }
        {
            String theEnd;
            theEnd = this.getEnd();
            strategy.appendField(locator, this, "end", buffer, theEnd);
        }
        {
            RestartDefaultType theRestartDefault;
            theRestartDefault = this.getRestartDefault();
            strategy.appendField(locator, this, "restartDefault", buffer, theRestartDefault);
        }
        {
            SyncBehaviorType theSyncBehavior;
            theSyncBehavior = this.getSyncBehavior();
            strategy.appendField(locator, this, "syncBehavior", buffer, theSyncBehavior);
        }
        {
            String theSyncTolerance;
            theSyncTolerance = this.getSyncTolerance();
            strategy.appendField(locator, this, "syncTolerance", buffer, theSyncTolerance);
        }
        {
            FillDefaultType theFillDefault;
            theFillDefault = this.getFillDefault();
            strategy.appendField(locator, this, "fillDefault", buffer, theFillDefault);
        }
        {
            RestartTimingType theRestart;
            theRestart = this.getRestart();
            strategy.appendField(locator, this, "restart", buffer, theRestart);
        }
        {
            FillTimingAttrsType theFill;
            theFill = this.getFill();
            strategy.appendField(locator, this, "fill", buffer, theFill);
        }
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        {
            String theClazz;
            theClazz = this.getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz);
        }
        {
            String theLang;
            theLang = this.getLang();
            strategy.appendField(locator, this, "lang", buffer, theLang);
        }
        {
            String theAlt;
            theAlt = this.getAlt();
            strategy.appendField(locator, this, "alt", buffer, theAlt);
        }
        {
            String theLongdesc;
            theLongdesc = this.getLongdesc();
            strategy.appendField(locator, this, "longdesc", buffer, theLongdesc);
        }
        {
            Object theTargetElement;
            theTargetElement = this.getTargetElement();
            strategy.appendField(locator, this, "targetElement", buffer, theTargetElement);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SetType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SetType that = ((SetType) object);
        {
            List<Object> lhsAny;
            lhsAny = (this.isSetAny()?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (that.isSetAny()?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            boolean lhsSkipContent;
            lhsSkipContent = (this.isSetSkipContent()?this.isSkipContent():false);
            boolean rhsSkipContent;
            rhsSkipContent = (that.isSetSkipContent()?that.isSkipContent():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "skipContent", lhsSkipContent), LocatorUtils.property(thatLocator, "skipContent", rhsSkipContent), lhsSkipContent, rhsSkipContent)) {
                return false;
            }
        }
        {
            SyncBehaviorDefaultType lhsSyncBehaviorDefault;
            lhsSyncBehaviorDefault = this.getSyncBehaviorDefault();
            SyncBehaviorDefaultType rhsSyncBehaviorDefault;
            rhsSyncBehaviorDefault = that.getSyncBehaviorDefault();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "syncBehaviorDefault", lhsSyncBehaviorDefault), LocatorUtils.property(thatLocator, "syncBehaviorDefault", rhsSyncBehaviorDefault), lhsSyncBehaviorDefault, rhsSyncBehaviorDefault)) {
                return false;
            }
        }
        {
            String lhsSyncToleranceDefault;
            lhsSyncToleranceDefault = this.getSyncToleranceDefault();
            String rhsSyncToleranceDefault;
            rhsSyncToleranceDefault = that.getSyncToleranceDefault();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "syncToleranceDefault", lhsSyncToleranceDefault), LocatorUtils.property(thatLocator, "syncToleranceDefault", rhsSyncToleranceDefault), lhsSyncToleranceDefault, rhsSyncToleranceDefault)) {
                return false;
            }
        }
        {
            String lhsMin;
            lhsMin = this.getMin();
            String rhsMin;
            rhsMin = that.getMin();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "min", lhsMin), LocatorUtils.property(thatLocator, "min", rhsMin), lhsMin, rhsMin)) {
                return false;
            }
        }
        {
            String lhsMax;
            lhsMax = this.getMax();
            String rhsMax;
            rhsMax = that.getMax();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "max", lhsMax), LocatorUtils.property(thatLocator, "max", rhsMax), lhsMax, rhsMax)) {
                return false;
            }
        }
        {
            String lhsDur;
            lhsDur = this.getDur();
            String rhsDur;
            rhsDur = that.getDur();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dur", lhsDur), LocatorUtils.property(thatLocator, "dur", rhsDur), lhsDur, rhsDur)) {
                return false;
            }
        }
        {
            BigInteger lhsRepeat;
            lhsRepeat = this.getRepeat();
            BigInteger rhsRepeat;
            rhsRepeat = that.getRepeat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "repeat", lhsRepeat), LocatorUtils.property(thatLocator, "repeat", rhsRepeat), lhsRepeat, rhsRepeat)) {
                return false;
            }
        }
        {
            String lhsRepeatDur;
            lhsRepeatDur = this.getRepeatDur();
            String rhsRepeatDur;
            rhsRepeatDur = that.getRepeatDur();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "repeatDur", lhsRepeatDur), LocatorUtils.property(thatLocator, "repeatDur", rhsRepeatDur), lhsRepeatDur, rhsRepeatDur)) {
                return false;
            }
        }
        {
            BigDecimal lhsRepeatCount;
            lhsRepeatCount = this.getRepeatCount();
            BigDecimal rhsRepeatCount;
            rhsRepeatCount = that.getRepeatCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "repeatCount", lhsRepeatCount), LocatorUtils.property(thatLocator, "repeatCount", rhsRepeatCount), lhsRepeatCount, rhsRepeatCount)) {
                return false;
            }
        }
        {
            String lhsBegin;
            lhsBegin = this.getBegin();
            String rhsBegin;
            rhsBegin = that.getBegin();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "begin", lhsBegin), LocatorUtils.property(thatLocator, "begin", rhsBegin), lhsBegin, rhsBegin)) {
                return false;
            }
        }
        {
            String lhsEnd;
            lhsEnd = this.getEnd();
            String rhsEnd;
            rhsEnd = that.getEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "end", lhsEnd), LocatorUtils.property(thatLocator, "end", rhsEnd), lhsEnd, rhsEnd)) {
                return false;
            }
        }
        {
            RestartDefaultType lhsRestartDefault;
            lhsRestartDefault = this.getRestartDefault();
            RestartDefaultType rhsRestartDefault;
            rhsRestartDefault = that.getRestartDefault();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restartDefault", lhsRestartDefault), LocatorUtils.property(thatLocator, "restartDefault", rhsRestartDefault), lhsRestartDefault, rhsRestartDefault)) {
                return false;
            }
        }
        {
            SyncBehaviorType lhsSyncBehavior;
            lhsSyncBehavior = this.getSyncBehavior();
            SyncBehaviorType rhsSyncBehavior;
            rhsSyncBehavior = that.getSyncBehavior();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "syncBehavior", lhsSyncBehavior), LocatorUtils.property(thatLocator, "syncBehavior", rhsSyncBehavior), lhsSyncBehavior, rhsSyncBehavior)) {
                return false;
            }
        }
        {
            String lhsSyncTolerance;
            lhsSyncTolerance = this.getSyncTolerance();
            String rhsSyncTolerance;
            rhsSyncTolerance = that.getSyncTolerance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "syncTolerance", lhsSyncTolerance), LocatorUtils.property(thatLocator, "syncTolerance", rhsSyncTolerance), lhsSyncTolerance, rhsSyncTolerance)) {
                return false;
            }
        }
        {
            FillDefaultType lhsFillDefault;
            lhsFillDefault = this.getFillDefault();
            FillDefaultType rhsFillDefault;
            rhsFillDefault = that.getFillDefault();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fillDefault", lhsFillDefault), LocatorUtils.property(thatLocator, "fillDefault", rhsFillDefault), lhsFillDefault, rhsFillDefault)) {
                return false;
            }
        }
        {
            RestartTimingType lhsRestart;
            lhsRestart = this.getRestart();
            RestartTimingType rhsRestart;
            rhsRestart = that.getRestart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restart", lhsRestart), LocatorUtils.property(thatLocator, "restart", rhsRestart), lhsRestart, rhsRestart)) {
                return false;
            }
        }
        {
            FillTimingAttrsType lhsFill;
            lhsFill = this.getFill();
            FillTimingAttrsType rhsFill;
            rhsFill = that.getFill();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fill", lhsFill), LocatorUtils.property(thatLocator, "fill", rhsFill), lhsFill, rhsFill)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        {
            String lhsClazz;
            lhsClazz = this.getClazz();
            String rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            String lhsLang;
            lhsLang = this.getLang();
            String rhsLang;
            rhsLang = that.getLang();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lang", lhsLang), LocatorUtils.property(thatLocator, "lang", rhsLang), lhsLang, rhsLang)) {
                return false;
            }
        }
        {
            String lhsAlt;
            lhsAlt = this.getAlt();
            String rhsAlt;
            rhsAlt = that.getAlt();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alt", lhsAlt), LocatorUtils.property(thatLocator, "alt", rhsAlt), lhsAlt, rhsAlt)) {
                return false;
            }
        }
        {
            String lhsLongdesc;
            lhsLongdesc = this.getLongdesc();
            String rhsLongdesc;
            rhsLongdesc = that.getLongdesc();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "longdesc", lhsLongdesc), LocatorUtils.property(thatLocator, "longdesc", rhsLongdesc), lhsLongdesc, rhsLongdesc)) {
                return false;
            }
        }
        {
            Object lhsTargetElement;
            lhsTargetElement = this.getTargetElement();
            Object rhsTargetElement;
            rhsTargetElement = that.getTargetElement();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "targetElement", lhsTargetElement), LocatorUtils.property(thatLocator, "targetElement", rhsTargetElement), lhsTargetElement, rhsTargetElement)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            boolean theSkipContent;
            theSkipContent = (this.isSetSkipContent()?this.isSkipContent():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "skipContent", theSkipContent), currentHashCode, theSkipContent);
        }
        {
            SyncBehaviorDefaultType theSyncBehaviorDefault;
            theSyncBehaviorDefault = this.getSyncBehaviorDefault();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "syncBehaviorDefault", theSyncBehaviorDefault), currentHashCode, theSyncBehaviorDefault);
        }
        {
            String theSyncToleranceDefault;
            theSyncToleranceDefault = this.getSyncToleranceDefault();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "syncToleranceDefault", theSyncToleranceDefault), currentHashCode, theSyncToleranceDefault);
        }
        {
            String theMin;
            theMin = this.getMin();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "min", theMin), currentHashCode, theMin);
        }
        {
            String theMax;
            theMax = this.getMax();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "max", theMax), currentHashCode, theMax);
        }
        {
            String theDur;
            theDur = this.getDur();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dur", theDur), currentHashCode, theDur);
        }
        {
            BigInteger theRepeat;
            theRepeat = this.getRepeat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "repeat", theRepeat), currentHashCode, theRepeat);
        }
        {
            String theRepeatDur;
            theRepeatDur = this.getRepeatDur();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "repeatDur", theRepeatDur), currentHashCode, theRepeatDur);
        }
        {
            BigDecimal theRepeatCount;
            theRepeatCount = this.getRepeatCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "repeatCount", theRepeatCount), currentHashCode, theRepeatCount);
        }
        {
            String theBegin;
            theBegin = this.getBegin();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "begin", theBegin), currentHashCode, theBegin);
        }
        {
            String theEnd;
            theEnd = this.getEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "end", theEnd), currentHashCode, theEnd);
        }
        {
            RestartDefaultType theRestartDefault;
            theRestartDefault = this.getRestartDefault();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restartDefault", theRestartDefault), currentHashCode, theRestartDefault);
        }
        {
            SyncBehaviorType theSyncBehavior;
            theSyncBehavior = this.getSyncBehavior();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "syncBehavior", theSyncBehavior), currentHashCode, theSyncBehavior);
        }
        {
            String theSyncTolerance;
            theSyncTolerance = this.getSyncTolerance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "syncTolerance", theSyncTolerance), currentHashCode, theSyncTolerance);
        }
        {
            FillDefaultType theFillDefault;
            theFillDefault = this.getFillDefault();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fillDefault", theFillDefault), currentHashCode, theFillDefault);
        }
        {
            RestartTimingType theRestart;
            theRestart = this.getRestart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restart", theRestart), currentHashCode, theRestart);
        }
        {
            FillTimingAttrsType theFill;
            theFill = this.getFill();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fill", theFill), currentHashCode, theFill);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        {
            String theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            String theLang;
            theLang = this.getLang();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lang", theLang), currentHashCode, theLang);
        }
        {
            String theAlt;
            theAlt = this.getAlt();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alt", theAlt), currentHashCode, theAlt);
        }
        {
            String theLongdesc;
            theLongdesc = this.getLongdesc();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "longdesc", theLongdesc), currentHashCode, theLongdesc);
        }
        {
            Object theTargetElement;
            theTargetElement = this.getTargetElement();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "targetElement", theTargetElement), currentHashCode, theTargetElement);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof SetType) {
            final SetType copy = ((SetType) draftCopy);
            if (this.isSetAny()) {
                List<Object> sourceAny;
                sourceAny = (this.isSetAny()?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.unsetAny();
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.unsetAny();
            }
            if (this.isSetSkipContent()) {
                boolean sourceSkipContent;
                sourceSkipContent = (this.isSetSkipContent()?this.isSkipContent():false);
                boolean copySkipContent = strategy.copy(LocatorUtils.property(locator, "skipContent", sourceSkipContent), sourceSkipContent);
                copy.setSkipContent(copySkipContent);
            } else {
                copy.unsetSkipContent();
            }
            if (this.isSetSyncBehaviorDefault()) {
                SyncBehaviorDefaultType sourceSyncBehaviorDefault;
                sourceSyncBehaviorDefault = this.getSyncBehaviorDefault();
                SyncBehaviorDefaultType copySyncBehaviorDefault = ((SyncBehaviorDefaultType) strategy.copy(LocatorUtils.property(locator, "syncBehaviorDefault", sourceSyncBehaviorDefault), sourceSyncBehaviorDefault));
                copy.setSyncBehaviorDefault(copySyncBehaviorDefault);
            } else {
                copy.syncBehaviorDefault = null;
            }
            if (this.isSetSyncToleranceDefault()) {
                String sourceSyncToleranceDefault;
                sourceSyncToleranceDefault = this.getSyncToleranceDefault();
                String copySyncToleranceDefault = ((String) strategy.copy(LocatorUtils.property(locator, "syncToleranceDefault", sourceSyncToleranceDefault), sourceSyncToleranceDefault));
                copy.setSyncToleranceDefault(copySyncToleranceDefault);
            } else {
                copy.syncToleranceDefault = null;
            }
            if (this.isSetMin()) {
                String sourceMin;
                sourceMin = this.getMin();
                String copyMin = ((String) strategy.copy(LocatorUtils.property(locator, "min", sourceMin), sourceMin));
                copy.setMin(copyMin);
            } else {
                copy.min = null;
            }
            if (this.isSetMax()) {
                String sourceMax;
                sourceMax = this.getMax();
                String copyMax = ((String) strategy.copy(LocatorUtils.property(locator, "max", sourceMax), sourceMax));
                copy.setMax(copyMax);
            } else {
                copy.max = null;
            }
            if (this.isSetDur()) {
                String sourceDur;
                sourceDur = this.getDur();
                String copyDur = ((String) strategy.copy(LocatorUtils.property(locator, "dur", sourceDur), sourceDur));
                copy.setDur(copyDur);
            } else {
                copy.dur = null;
            }
            if (this.isSetRepeat()) {
                BigInteger sourceRepeat;
                sourceRepeat = this.getRepeat();
                BigInteger copyRepeat = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "repeat", sourceRepeat), sourceRepeat));
                copy.setRepeat(copyRepeat);
            } else {
                copy.repeat = null;
            }
            if (this.isSetRepeatDur()) {
                String sourceRepeatDur;
                sourceRepeatDur = this.getRepeatDur();
                String copyRepeatDur = ((String) strategy.copy(LocatorUtils.property(locator, "repeatDur", sourceRepeatDur), sourceRepeatDur));
                copy.setRepeatDur(copyRepeatDur);
            } else {
                copy.repeatDur = null;
            }
            if (this.isSetRepeatCount()) {
                BigDecimal sourceRepeatCount;
                sourceRepeatCount = this.getRepeatCount();
                BigDecimal copyRepeatCount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "repeatCount", sourceRepeatCount), sourceRepeatCount));
                copy.setRepeatCount(copyRepeatCount);
            } else {
                copy.repeatCount = null;
            }
            if (this.isSetBegin()) {
                String sourceBegin;
                sourceBegin = this.getBegin();
                String copyBegin = ((String) strategy.copy(LocatorUtils.property(locator, "begin", sourceBegin), sourceBegin));
                copy.setBegin(copyBegin);
            } else {
                copy.begin = null;
            }
            if (this.isSetEnd()) {
                String sourceEnd;
                sourceEnd = this.getEnd();
                String copyEnd = ((String) strategy.copy(LocatorUtils.property(locator, "end", sourceEnd), sourceEnd));
                copy.setEnd(copyEnd);
            } else {
                copy.end = null;
            }
            if (this.isSetRestartDefault()) {
                RestartDefaultType sourceRestartDefault;
                sourceRestartDefault = this.getRestartDefault();
                RestartDefaultType copyRestartDefault = ((RestartDefaultType) strategy.copy(LocatorUtils.property(locator, "restartDefault", sourceRestartDefault), sourceRestartDefault));
                copy.setRestartDefault(copyRestartDefault);
            } else {
                copy.restartDefault = null;
            }
            if (this.isSetSyncBehavior()) {
                SyncBehaviorType sourceSyncBehavior;
                sourceSyncBehavior = this.getSyncBehavior();
                SyncBehaviorType copySyncBehavior = ((SyncBehaviorType) strategy.copy(LocatorUtils.property(locator, "syncBehavior", sourceSyncBehavior), sourceSyncBehavior));
                copy.setSyncBehavior(copySyncBehavior);
            } else {
                copy.syncBehavior = null;
            }
            if (this.isSetSyncTolerance()) {
                String sourceSyncTolerance;
                sourceSyncTolerance = this.getSyncTolerance();
                String copySyncTolerance = ((String) strategy.copy(LocatorUtils.property(locator, "syncTolerance", sourceSyncTolerance), sourceSyncTolerance));
                copy.setSyncTolerance(copySyncTolerance);
            } else {
                copy.syncTolerance = null;
            }
            if (this.isSetFillDefault()) {
                FillDefaultType sourceFillDefault;
                sourceFillDefault = this.getFillDefault();
                FillDefaultType copyFillDefault = ((FillDefaultType) strategy.copy(LocatorUtils.property(locator, "fillDefault", sourceFillDefault), sourceFillDefault));
                copy.setFillDefault(copyFillDefault);
            } else {
                copy.fillDefault = null;
            }
            if (this.isSetRestart()) {
                RestartTimingType sourceRestart;
                sourceRestart = this.getRestart();
                RestartTimingType copyRestart = ((RestartTimingType) strategy.copy(LocatorUtils.property(locator, "restart", sourceRestart), sourceRestart));
                copy.setRestart(copyRestart);
            } else {
                copy.restart = null;
            }
            if (this.isSetFill()) {
                FillTimingAttrsType sourceFill;
                sourceFill = this.getFill();
                FillTimingAttrsType copyFill = ((FillTimingAttrsType) strategy.copy(LocatorUtils.property(locator, "fill", sourceFill), sourceFill));
                copy.setFill(copyFill);
            } else {
                copy.fill = null;
            }
            if (this.isSetId()) {
                String sourceId;
                sourceId = this.getId();
                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
            if (this.isSetClazz()) {
                String sourceClazz;
                sourceClazz = this.getClazz();
                String copyClazz = ((String) strategy.copy(LocatorUtils.property(locator, "clazz", sourceClazz), sourceClazz));
                copy.setClazz(copyClazz);
            } else {
                copy.clazz = null;
            }
            if (this.isSetLang()) {
                String sourceLang;
                sourceLang = this.getLang();
                String copyLang = ((String) strategy.copy(LocatorUtils.property(locator, "lang", sourceLang), sourceLang));
                copy.setLang(copyLang);
            } else {
                copy.lang = null;
            }
            if (this.isSetAlt()) {
                String sourceAlt;
                sourceAlt = this.getAlt();
                String copyAlt = ((String) strategy.copy(LocatorUtils.property(locator, "alt", sourceAlt), sourceAlt));
                copy.setAlt(copyAlt);
            } else {
                copy.alt = null;
            }
            if (this.isSetLongdesc()) {
                String sourceLongdesc;
                sourceLongdesc = this.getLongdesc();
                String copyLongdesc = ((String) strategy.copy(LocatorUtils.property(locator, "longdesc", sourceLongdesc), sourceLongdesc));
                copy.setLongdesc(copyLongdesc);
            } else {
                copy.longdesc = null;
            }
            if (this.isSetTargetElement()) {
                Object sourceTargetElement;
                sourceTargetElement = this.getTargetElement();
                Object copyTargetElement = ((Object) strategy.copy(LocatorUtils.property(locator, "targetElement", sourceTargetElement), sourceTargetElement));
                copy.setTargetElement(copyTargetElement);
            } else {
                copy.targetElement = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SetType();
    }

}
