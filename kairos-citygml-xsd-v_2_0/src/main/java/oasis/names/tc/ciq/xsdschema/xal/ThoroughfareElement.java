//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package oasis.names.tc.ciq.xsdschema.xal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlMixed;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber"/&gt;
 *           &lt;element name="ThoroughfareNumberRange"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;sequence&gt;
 *                     &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                     &lt;element name="ThoroughfareNumberFrom"&gt;
 *                       &lt;complexType&gt;
 *                         &lt;complexContent&gt;
 *                           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                             &lt;sequence&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber" maxOccurs="unbounded"/&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                             &lt;/sequence&gt;
 *                             &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                             &lt;anyAttribute namespace='##other'/&gt;
 *                           &lt;/restriction&gt;
 *                         &lt;/complexContent&gt;
 *                       &lt;/complexType&gt;
 *                     &lt;/element&gt;
 *                     &lt;element name="ThoroughfareNumberTo"&gt;
 *                       &lt;complexType&gt;
 *                         &lt;complexContent&gt;
 *                           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                             &lt;sequence&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber" maxOccurs="unbounded"/&gt;
 *                               &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                             &lt;/sequence&gt;
 *                             &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                             &lt;anyAttribute namespace='##other'/&gt;
 *                           &lt;/restriction&gt;
 *                         &lt;/complexContent&gt;
 *                       &lt;/complexType&gt;
 *                     &lt;/element&gt;
 *                   &lt;/sequence&gt;
 *                   &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                   &lt;attribute name="RangeType"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                         &lt;enumeration value="Odd"/&gt;
 *                         &lt;enumeration value="Even"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                   &lt;attribute name="Separator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                   &lt;attribute name="IndicatorOccurrence"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                         &lt;enumeration value="Before"/&gt;
 *                         &lt;enumeration value="After"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="NumberRangeOccurrence"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                         &lt;enumeration value="BeforeName"/&gt;
 *                         &lt;enumeration value="AfterName"/&gt;
 *                         &lt;enumeration value="BeforeType"/&gt;
 *                         &lt;enumeration value="AfterType"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                   &lt;anyAttribute namespace='##other'/&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="ThoroughfarePreDirection" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfarePreDirectionType" minOccurs="0"/&gt;
 *         &lt;element name="ThoroughfareLeadingType" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareLeadingTypeType" minOccurs="0"/&gt;
 *         &lt;element name="ThoroughfareName" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNameType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="ThoroughfareTrailingType" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareTrailingTypeType" minOccurs="0"/&gt;
 *         &lt;element name="ThoroughfarePostDirection" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfarePostDirectionType" minOccurs="0"/&gt;
 *         &lt;element name="DependentThoroughfare" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="ThoroughfarePreDirection" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfarePreDirectionType" minOccurs="0"/&gt;
 *                   &lt;element name="ThoroughfareLeadingType" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareLeadingTypeType" minOccurs="0"/&gt;
 *                   &lt;element name="ThoroughfareName" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNameType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="ThoroughfareTrailingType" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareTrailingTypeType" minOccurs="0"/&gt;
 *                   &lt;element name="ThoroughfarePostDirection" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfarePostDirectionType" minOccurs="0"/&gt;
 *                   &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element name="DependentLocality" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}DependentLocalityType"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}Premise"/&gt;
 *           &lt;element name="Firm" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}FirmType"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalCode"/&gt;
 *         &lt;/choice&gt;
 *         &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="DependentThoroughfares"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *             &lt;enumeration value="Yes"/&gt;
 *             &lt;enumeration value="No"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *       &lt;attribute name="DependentThoroughfaresIndicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="DependentThoroughfaresConnector" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="DependentThoroughfaresType" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;anyAttribute namespace='##other'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "addressLine",
    "thoroughfareNumberOrThoroughfareNumberRange",
    "thoroughfareNumberPrefix",
    "thoroughfareNumberSuffix",
    "thoroughfarePreDirection",
    "thoroughfareLeadingType",
    "thoroughfareName",
    "thoroughfareTrailingType",
    "thoroughfarePostDirection",
    "dependentThoroughfare",
    "dependentLocality",
    "premise",
    "firm",
    "postalCode",
    "any"
})
@XmlRootElement(name = "Thoroughfare")
public class ThoroughfareElement
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AddressLine")
    protected List<AddressLineElement> addressLine;
    @XmlElements({
        @XmlElement(name = "ThoroughfareNumber", type = ThoroughfareNumberElement.class),
        @XmlElement(name = "ThoroughfareNumberRange", type = ThoroughfareElement.ThoroughfareNumberRange.class)
    })
    protected List<Object> thoroughfareNumberOrThoroughfareNumberRange;
    @XmlElement(name = "ThoroughfareNumberPrefix")
    protected List<ThoroughfareNumberPrefixElement> thoroughfareNumberPrefix;
    @XmlElement(name = "ThoroughfareNumberSuffix")
    protected List<ThoroughfareNumberSuffixElement> thoroughfareNumberSuffix;
    @XmlElement(name = "ThoroughfarePreDirection")
    protected ThoroughfarePreDirectionType thoroughfarePreDirection;
    @XmlElement(name = "ThoroughfareLeadingType")
    protected ThoroughfareLeadingTypeType thoroughfareLeadingType;
    @XmlElement(name = "ThoroughfareName")
    protected List<ThoroughfareNameType> thoroughfareName;
    @XmlElement(name = "ThoroughfareTrailingType")
    protected ThoroughfareTrailingTypeType thoroughfareTrailingType;
    @XmlElement(name = "ThoroughfarePostDirection")
    protected ThoroughfarePostDirectionType thoroughfarePostDirection;
    @XmlElement(name = "DependentThoroughfare")
    protected ThoroughfareElement.DependentThoroughfare dependentThoroughfare;
    @XmlElement(name = "DependentLocality")
    protected DependentLocalityType dependentLocality;
    @XmlElement(name = "Premise")
    protected PremiseElement premise;
    @XmlElement(name = "Firm")
    protected FirmType firm;
    @XmlElement(name = "PostalCode")
    protected PostalCodeElement postalCode;
    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "Type")
    @XmlSchemaType(name = "anySimpleType")
    protected String type;
    @XmlAttribute(name = "DependentThoroughfares")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String dependentThoroughfares;
    @XmlAttribute(name = "DependentThoroughfaresIndicator")
    @XmlSchemaType(name = "anySimpleType")
    protected String dependentThoroughfaresIndicator;
    @XmlAttribute(name = "DependentThoroughfaresConnector")
    @XmlSchemaType(name = "anySimpleType")
    protected String dependentThoroughfaresConnector;
    @XmlAttribute(name = "DependentThoroughfaresType")
    @XmlSchemaType(name = "anySimpleType")
    protected String dependentThoroughfaresType;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the addressLine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addressLine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressLine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressLineElement }
     * 
     * 
     */
    public List<AddressLineElement> getAddressLine() {
        if (addressLine == null) {
            addressLine = new ArrayList<AddressLineElement>();
        }
        return this.addressLine;
    }

    public boolean isSetAddressLine() {
        return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
    }

    public void unsetAddressLine() {
        this.addressLine = null;
    }

    /**
     * Gets the value of the thoroughfareNumberOrThoroughfareNumberRange property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the thoroughfareNumberOrThoroughfareNumberRange property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getThoroughfareNumberOrThoroughfareNumberRange().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ThoroughfareNumberElement }
     * {@link ThoroughfareElement.ThoroughfareNumberRange }
     * 
     * 
     */
    public List<Object> getThoroughfareNumberOrThoroughfareNumberRange() {
        if (thoroughfareNumberOrThoroughfareNumberRange == null) {
            thoroughfareNumberOrThoroughfareNumberRange = new ArrayList<Object>();
        }
        return this.thoroughfareNumberOrThoroughfareNumberRange;
    }

    public boolean isSetThoroughfareNumberOrThoroughfareNumberRange() {
        return ((this.thoroughfareNumberOrThoroughfareNumberRange!= null)&&(!this.thoroughfareNumberOrThoroughfareNumberRange.isEmpty()));
    }

    public void unsetThoroughfareNumberOrThoroughfareNumberRange() {
        this.thoroughfareNumberOrThoroughfareNumberRange = null;
    }

    /**
     * Gets the value of the thoroughfareNumberPrefix property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the thoroughfareNumberPrefix property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getThoroughfareNumberPrefix().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ThoroughfareNumberPrefixElement }
     * 
     * 
     */
    public List<ThoroughfareNumberPrefixElement> getThoroughfareNumberPrefix() {
        if (thoroughfareNumberPrefix == null) {
            thoroughfareNumberPrefix = new ArrayList<ThoroughfareNumberPrefixElement>();
        }
        return this.thoroughfareNumberPrefix;
    }

    public boolean isSetThoroughfareNumberPrefix() {
        return ((this.thoroughfareNumberPrefix!= null)&&(!this.thoroughfareNumberPrefix.isEmpty()));
    }

    public void unsetThoroughfareNumberPrefix() {
        this.thoroughfareNumberPrefix = null;
    }

    /**
     * Gets the value of the thoroughfareNumberSuffix property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the thoroughfareNumberSuffix property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getThoroughfareNumberSuffix().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ThoroughfareNumberSuffixElement }
     * 
     * 
     */
    public List<ThoroughfareNumberSuffixElement> getThoroughfareNumberSuffix() {
        if (thoroughfareNumberSuffix == null) {
            thoroughfareNumberSuffix = new ArrayList<ThoroughfareNumberSuffixElement>();
        }
        return this.thoroughfareNumberSuffix;
    }

    public boolean isSetThoroughfareNumberSuffix() {
        return ((this.thoroughfareNumberSuffix!= null)&&(!this.thoroughfareNumberSuffix.isEmpty()));
    }

    public void unsetThoroughfareNumberSuffix() {
        this.thoroughfareNumberSuffix = null;
    }

    /**
     * Gets the value of the thoroughfarePreDirection property.
     * 
     * @return
     *     possible object is
     *     {@link ThoroughfarePreDirectionType }
     *     
     */
    public ThoroughfarePreDirectionType getThoroughfarePreDirection() {
        return thoroughfarePreDirection;
    }

    /**
     * Sets the value of the thoroughfarePreDirection property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThoroughfarePreDirectionType }
     *     
     */
    public void setThoroughfarePreDirection(ThoroughfarePreDirectionType value) {
        this.thoroughfarePreDirection = value;
    }

    public boolean isSetThoroughfarePreDirection() {
        return (this.thoroughfarePreDirection!= null);
    }

    /**
     * Gets the value of the thoroughfareLeadingType property.
     * 
     * @return
     *     possible object is
     *     {@link ThoroughfareLeadingTypeType }
     *     
     */
    public ThoroughfareLeadingTypeType getThoroughfareLeadingType() {
        return thoroughfareLeadingType;
    }

    /**
     * Sets the value of the thoroughfareLeadingType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThoroughfareLeadingTypeType }
     *     
     */
    public void setThoroughfareLeadingType(ThoroughfareLeadingTypeType value) {
        this.thoroughfareLeadingType = value;
    }

    public boolean isSetThoroughfareLeadingType() {
        return (this.thoroughfareLeadingType!= null);
    }

    /**
     * Gets the value of the thoroughfareName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the thoroughfareName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getThoroughfareName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ThoroughfareNameType }
     * 
     * 
     */
    public List<ThoroughfareNameType> getThoroughfareName() {
        if (thoroughfareName == null) {
            thoroughfareName = new ArrayList<ThoroughfareNameType>();
        }
        return this.thoroughfareName;
    }

    public boolean isSetThoroughfareName() {
        return ((this.thoroughfareName!= null)&&(!this.thoroughfareName.isEmpty()));
    }

    public void unsetThoroughfareName() {
        this.thoroughfareName = null;
    }

    /**
     * Gets the value of the thoroughfareTrailingType property.
     * 
     * @return
     *     possible object is
     *     {@link ThoroughfareTrailingTypeType }
     *     
     */
    public ThoroughfareTrailingTypeType getThoroughfareTrailingType() {
        return thoroughfareTrailingType;
    }

    /**
     * Sets the value of the thoroughfareTrailingType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThoroughfareTrailingTypeType }
     *     
     */
    public void setThoroughfareTrailingType(ThoroughfareTrailingTypeType value) {
        this.thoroughfareTrailingType = value;
    }

    public boolean isSetThoroughfareTrailingType() {
        return (this.thoroughfareTrailingType!= null);
    }

    /**
     * Gets the value of the thoroughfarePostDirection property.
     * 
     * @return
     *     possible object is
     *     {@link ThoroughfarePostDirectionType }
     *     
     */
    public ThoroughfarePostDirectionType getThoroughfarePostDirection() {
        return thoroughfarePostDirection;
    }

    /**
     * Sets the value of the thoroughfarePostDirection property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThoroughfarePostDirectionType }
     *     
     */
    public void setThoroughfarePostDirection(ThoroughfarePostDirectionType value) {
        this.thoroughfarePostDirection = value;
    }

    public boolean isSetThoroughfarePostDirection() {
        return (this.thoroughfarePostDirection!= null);
    }

    /**
     * Gets the value of the dependentThoroughfare property.
     * 
     * @return
     *     possible object is
     *     {@link ThoroughfareElement.DependentThoroughfare }
     *     
     */
    public ThoroughfareElement.DependentThoroughfare getDependentThoroughfare() {
        return dependentThoroughfare;
    }

    /**
     * Sets the value of the dependentThoroughfare property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThoroughfareElement.DependentThoroughfare }
     *     
     */
    public void setDependentThoroughfare(ThoroughfareElement.DependentThoroughfare value) {
        this.dependentThoroughfare = value;
    }

    public boolean isSetDependentThoroughfare() {
        return (this.dependentThoroughfare!= null);
    }

    /**
     * Gets the value of the dependentLocality property.
     * 
     * @return
     *     possible object is
     *     {@link DependentLocalityType }
     *     
     */
    public DependentLocalityType getDependentLocality() {
        return dependentLocality;
    }

    /**
     * Sets the value of the dependentLocality property.
     * 
     * @param value
     *     allowed object is
     *     {@link DependentLocalityType }
     *     
     */
    public void setDependentLocality(DependentLocalityType value) {
        this.dependentLocality = value;
    }

    public boolean isSetDependentLocality() {
        return (this.dependentLocality!= null);
    }

    /**
     * Gets the value of the premise property.
     * 
     * @return
     *     possible object is
     *     {@link PremiseElement }
     *     
     */
    public PremiseElement getPremise() {
        return premise;
    }

    /**
     * Sets the value of the premise property.
     * 
     * @param value
     *     allowed object is
     *     {@link PremiseElement }
     *     
     */
    public void setPremise(PremiseElement value) {
        this.premise = value;
    }

    public boolean isSetPremise() {
        return (this.premise!= null);
    }

    /**
     * Gets the value of the firm property.
     * 
     * @return
     *     possible object is
     *     {@link FirmType }
     *     
     */
    public FirmType getFirm() {
        return firm;
    }

    /**
     * Sets the value of the firm property.
     * 
     * @param value
     *     allowed object is
     *     {@link FirmType }
     *     
     */
    public void setFirm(FirmType value) {
        this.firm = value;
    }

    public boolean isSetFirm() {
        return (this.firm!= null);
    }

    /**
     * Gets the value of the postalCode property.
     * 
     * @return
     *     possible object is
     *     {@link PostalCodeElement }
     *     
     */
    public PostalCodeElement getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the value of the postalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostalCodeElement }
     *     
     */
    public void setPostalCode(PostalCodeElement value) {
        this.postalCode = value;
    }

    public boolean isSetPostalCode() {
        return (this.postalCode!= null);
    }

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    public boolean isSetAny() {
        return ((this.any!= null)&&(!this.any.isEmpty()));
    }

    public void unsetAny() {
        this.any = null;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets the value of the dependentThoroughfares property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDependentThoroughfares() {
        return dependentThoroughfares;
    }

    /**
     * Sets the value of the dependentThoroughfares property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDependentThoroughfares(String value) {
        this.dependentThoroughfares = value;
    }

    public boolean isSetDependentThoroughfares() {
        return (this.dependentThoroughfares!= null);
    }

    /**
     * Gets the value of the dependentThoroughfaresIndicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDependentThoroughfaresIndicator() {
        return dependentThoroughfaresIndicator;
    }

    /**
     * Sets the value of the dependentThoroughfaresIndicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDependentThoroughfaresIndicator(String value) {
        this.dependentThoroughfaresIndicator = value;
    }

    public boolean isSetDependentThoroughfaresIndicator() {
        return (this.dependentThoroughfaresIndicator!= null);
    }

    /**
     * Gets the value of the dependentThoroughfaresConnector property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDependentThoroughfaresConnector() {
        return dependentThoroughfaresConnector;
    }

    /**
     * Sets the value of the dependentThoroughfaresConnector property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDependentThoroughfaresConnector(String value) {
        this.dependentThoroughfaresConnector = value;
    }

    public boolean isSetDependentThoroughfaresConnector() {
        return (this.dependentThoroughfaresConnector!= null);
    }

    /**
     * Gets the value of the dependentThoroughfaresType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDependentThoroughfaresType() {
        return dependentThoroughfaresType;
    }

    /**
     * Sets the value of the dependentThoroughfaresType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDependentThoroughfaresType(String value) {
        this.dependentThoroughfaresType = value;
    }

    public boolean isSetDependentThoroughfaresType() {
        return (this.dependentThoroughfaresType!= null);
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
        }
        {
            List<Object> theThoroughfareNumberOrThoroughfareNumberRange;
            theThoroughfareNumberOrThoroughfareNumberRange = (this.isSetThoroughfareNumberOrThoroughfareNumberRange()?this.getThoroughfareNumberOrThoroughfareNumberRange():null);
            strategy.appendField(locator, this, "thoroughfareNumberOrThoroughfareNumberRange", buffer, theThoroughfareNumberOrThoroughfareNumberRange);
        }
        {
            List<ThoroughfareNumberPrefixElement> theThoroughfareNumberPrefix;
            theThoroughfareNumberPrefix = (this.isSetThoroughfareNumberPrefix()?this.getThoroughfareNumberPrefix():null);
            strategy.appendField(locator, this, "thoroughfareNumberPrefix", buffer, theThoroughfareNumberPrefix);
        }
        {
            List<ThoroughfareNumberSuffixElement> theThoroughfareNumberSuffix;
            theThoroughfareNumberSuffix = (this.isSetThoroughfareNumberSuffix()?this.getThoroughfareNumberSuffix():null);
            strategy.appendField(locator, this, "thoroughfareNumberSuffix", buffer, theThoroughfareNumberSuffix);
        }
        {
            ThoroughfarePreDirectionType theThoroughfarePreDirection;
            theThoroughfarePreDirection = this.getThoroughfarePreDirection();
            strategy.appendField(locator, this, "thoroughfarePreDirection", buffer, theThoroughfarePreDirection);
        }
        {
            ThoroughfareLeadingTypeType theThoroughfareLeadingType;
            theThoroughfareLeadingType = this.getThoroughfareLeadingType();
            strategy.appendField(locator, this, "thoroughfareLeadingType", buffer, theThoroughfareLeadingType);
        }
        {
            List<ThoroughfareNameType> theThoroughfareName;
            theThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
            strategy.appendField(locator, this, "thoroughfareName", buffer, theThoroughfareName);
        }
        {
            ThoroughfareTrailingTypeType theThoroughfareTrailingType;
            theThoroughfareTrailingType = this.getThoroughfareTrailingType();
            strategy.appendField(locator, this, "thoroughfareTrailingType", buffer, theThoroughfareTrailingType);
        }
        {
            ThoroughfarePostDirectionType theThoroughfarePostDirection;
            theThoroughfarePostDirection = this.getThoroughfarePostDirection();
            strategy.appendField(locator, this, "thoroughfarePostDirection", buffer, theThoroughfarePostDirection);
        }
        {
            ThoroughfareElement.DependentThoroughfare theDependentThoroughfare;
            theDependentThoroughfare = this.getDependentThoroughfare();
            strategy.appendField(locator, this, "dependentThoroughfare", buffer, theDependentThoroughfare);
        }
        {
            DependentLocalityType theDependentLocality;
            theDependentLocality = this.getDependentLocality();
            strategy.appendField(locator, this, "dependentLocality", buffer, theDependentLocality);
        }
        {
            PremiseElement thePremise;
            thePremise = this.getPremise();
            strategy.appendField(locator, this, "premise", buffer, thePremise);
        }
        {
            FirmType theFirm;
            theFirm = this.getFirm();
            strategy.appendField(locator, this, "firm", buffer, theFirm);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            String theDependentThoroughfares;
            theDependentThoroughfares = this.getDependentThoroughfares();
            strategy.appendField(locator, this, "dependentThoroughfares", buffer, theDependentThoroughfares);
        }
        {
            String theDependentThoroughfaresIndicator;
            theDependentThoroughfaresIndicator = this.getDependentThoroughfaresIndicator();
            strategy.appendField(locator, this, "dependentThoroughfaresIndicator", buffer, theDependentThoroughfaresIndicator);
        }
        {
            String theDependentThoroughfaresConnector;
            theDependentThoroughfaresConnector = this.getDependentThoroughfaresConnector();
            strategy.appendField(locator, this, "dependentThoroughfaresConnector", buffer, theDependentThoroughfaresConnector);
        }
        {
            String theDependentThoroughfaresType;
            theDependentThoroughfaresType = this.getDependentThoroughfaresType();
            strategy.appendField(locator, this, "dependentThoroughfaresType", buffer, theDependentThoroughfaresType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ThoroughfareElement)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ThoroughfareElement that = ((ThoroughfareElement) object);
        {
            List<AddressLineElement> lhsAddressLine;
            lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            List<AddressLineElement> rhsAddressLine;
            rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                return false;
            }
        }
        {
            List<Object> lhsThoroughfareNumberOrThoroughfareNumberRange;
            lhsThoroughfareNumberOrThoroughfareNumberRange = (this.isSetThoroughfareNumberOrThoroughfareNumberRange()?this.getThoroughfareNumberOrThoroughfareNumberRange():null);
            List<Object> rhsThoroughfareNumberOrThoroughfareNumberRange;
            rhsThoroughfareNumberOrThoroughfareNumberRange = (that.isSetThoroughfareNumberOrThoroughfareNumberRange()?that.getThoroughfareNumberOrThoroughfareNumberRange():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareNumberOrThoroughfareNumberRange", lhsThoroughfareNumberOrThoroughfareNumberRange), LocatorUtils.property(thatLocator, "thoroughfareNumberOrThoroughfareNumberRange", rhsThoroughfareNumberOrThoroughfareNumberRange), lhsThoroughfareNumberOrThoroughfareNumberRange, rhsThoroughfareNumberOrThoroughfareNumberRange)) {
                return false;
            }
        }
        {
            List<ThoroughfareNumberPrefixElement> lhsThoroughfareNumberPrefix;
            lhsThoroughfareNumberPrefix = (this.isSetThoroughfareNumberPrefix()?this.getThoroughfareNumberPrefix():null);
            List<ThoroughfareNumberPrefixElement> rhsThoroughfareNumberPrefix;
            rhsThoroughfareNumberPrefix = (that.isSetThoroughfareNumberPrefix()?that.getThoroughfareNumberPrefix():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareNumberPrefix", lhsThoroughfareNumberPrefix), LocatorUtils.property(thatLocator, "thoroughfareNumberPrefix", rhsThoroughfareNumberPrefix), lhsThoroughfareNumberPrefix, rhsThoroughfareNumberPrefix)) {
                return false;
            }
        }
        {
            List<ThoroughfareNumberSuffixElement> lhsThoroughfareNumberSuffix;
            lhsThoroughfareNumberSuffix = (this.isSetThoroughfareNumberSuffix()?this.getThoroughfareNumberSuffix():null);
            List<ThoroughfareNumberSuffixElement> rhsThoroughfareNumberSuffix;
            rhsThoroughfareNumberSuffix = (that.isSetThoroughfareNumberSuffix()?that.getThoroughfareNumberSuffix():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareNumberSuffix", lhsThoroughfareNumberSuffix), LocatorUtils.property(thatLocator, "thoroughfareNumberSuffix", rhsThoroughfareNumberSuffix), lhsThoroughfareNumberSuffix, rhsThoroughfareNumberSuffix)) {
                return false;
            }
        }
        {
            ThoroughfarePreDirectionType lhsThoroughfarePreDirection;
            lhsThoroughfarePreDirection = this.getThoroughfarePreDirection();
            ThoroughfarePreDirectionType rhsThoroughfarePreDirection;
            rhsThoroughfarePreDirection = that.getThoroughfarePreDirection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfarePreDirection", lhsThoroughfarePreDirection), LocatorUtils.property(thatLocator, "thoroughfarePreDirection", rhsThoroughfarePreDirection), lhsThoroughfarePreDirection, rhsThoroughfarePreDirection)) {
                return false;
            }
        }
        {
            ThoroughfareLeadingTypeType lhsThoroughfareLeadingType;
            lhsThoroughfareLeadingType = this.getThoroughfareLeadingType();
            ThoroughfareLeadingTypeType rhsThoroughfareLeadingType;
            rhsThoroughfareLeadingType = that.getThoroughfareLeadingType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareLeadingType", lhsThoroughfareLeadingType), LocatorUtils.property(thatLocator, "thoroughfareLeadingType", rhsThoroughfareLeadingType), lhsThoroughfareLeadingType, rhsThoroughfareLeadingType)) {
                return false;
            }
        }
        {
            List<ThoroughfareNameType> lhsThoroughfareName;
            lhsThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
            List<ThoroughfareNameType> rhsThoroughfareName;
            rhsThoroughfareName = (that.isSetThoroughfareName()?that.getThoroughfareName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareName", lhsThoroughfareName), LocatorUtils.property(thatLocator, "thoroughfareName", rhsThoroughfareName), lhsThoroughfareName, rhsThoroughfareName)) {
                return false;
            }
        }
        {
            ThoroughfareTrailingTypeType lhsThoroughfareTrailingType;
            lhsThoroughfareTrailingType = this.getThoroughfareTrailingType();
            ThoroughfareTrailingTypeType rhsThoroughfareTrailingType;
            rhsThoroughfareTrailingType = that.getThoroughfareTrailingType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareTrailingType", lhsThoroughfareTrailingType), LocatorUtils.property(thatLocator, "thoroughfareTrailingType", rhsThoroughfareTrailingType), lhsThoroughfareTrailingType, rhsThoroughfareTrailingType)) {
                return false;
            }
        }
        {
            ThoroughfarePostDirectionType lhsThoroughfarePostDirection;
            lhsThoroughfarePostDirection = this.getThoroughfarePostDirection();
            ThoroughfarePostDirectionType rhsThoroughfarePostDirection;
            rhsThoroughfarePostDirection = that.getThoroughfarePostDirection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfarePostDirection", lhsThoroughfarePostDirection), LocatorUtils.property(thatLocator, "thoroughfarePostDirection", rhsThoroughfarePostDirection), lhsThoroughfarePostDirection, rhsThoroughfarePostDirection)) {
                return false;
            }
        }
        {
            ThoroughfareElement.DependentThoroughfare lhsDependentThoroughfare;
            lhsDependentThoroughfare = this.getDependentThoroughfare();
            ThoroughfareElement.DependentThoroughfare rhsDependentThoroughfare;
            rhsDependentThoroughfare = that.getDependentThoroughfare();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentThoroughfare", lhsDependentThoroughfare), LocatorUtils.property(thatLocator, "dependentThoroughfare", rhsDependentThoroughfare), lhsDependentThoroughfare, rhsDependentThoroughfare)) {
                return false;
            }
        }
        {
            DependentLocalityType lhsDependentLocality;
            lhsDependentLocality = this.getDependentLocality();
            DependentLocalityType rhsDependentLocality;
            rhsDependentLocality = that.getDependentLocality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentLocality", lhsDependentLocality), LocatorUtils.property(thatLocator, "dependentLocality", rhsDependentLocality), lhsDependentLocality, rhsDependentLocality)) {
                return false;
            }
        }
        {
            PremiseElement lhsPremise;
            lhsPremise = this.getPremise();
            PremiseElement rhsPremise;
            rhsPremise = that.getPremise();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "premise", lhsPremise), LocatorUtils.property(thatLocator, "premise", rhsPremise), lhsPremise, rhsPremise)) {
                return false;
            }
        }
        {
            FirmType lhsFirm;
            lhsFirm = this.getFirm();
            FirmType rhsFirm;
            rhsFirm = that.getFirm();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "firm", lhsFirm), LocatorUtils.property(thatLocator, "firm", rhsFirm), lhsFirm, rhsFirm)) {
                return false;
            }
        }
        {
            PostalCodeElement lhsPostalCode;
            lhsPostalCode = this.getPostalCode();
            PostalCodeElement rhsPostalCode;
            rhsPostalCode = that.getPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                return false;
            }
        }
        {
            List<Object> lhsAny;
            lhsAny = (this.isSetAny()?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (that.isSetAny()?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            String lhsDependentThoroughfares;
            lhsDependentThoroughfares = this.getDependentThoroughfares();
            String rhsDependentThoroughfares;
            rhsDependentThoroughfares = that.getDependentThoroughfares();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentThoroughfares", lhsDependentThoroughfares), LocatorUtils.property(thatLocator, "dependentThoroughfares", rhsDependentThoroughfares), lhsDependentThoroughfares, rhsDependentThoroughfares)) {
                return false;
            }
        }
        {
            String lhsDependentThoroughfaresIndicator;
            lhsDependentThoroughfaresIndicator = this.getDependentThoroughfaresIndicator();
            String rhsDependentThoroughfaresIndicator;
            rhsDependentThoroughfaresIndicator = that.getDependentThoroughfaresIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentThoroughfaresIndicator", lhsDependentThoroughfaresIndicator), LocatorUtils.property(thatLocator, "dependentThoroughfaresIndicator", rhsDependentThoroughfaresIndicator), lhsDependentThoroughfaresIndicator, rhsDependentThoroughfaresIndicator)) {
                return false;
            }
        }
        {
            String lhsDependentThoroughfaresConnector;
            lhsDependentThoroughfaresConnector = this.getDependentThoroughfaresConnector();
            String rhsDependentThoroughfaresConnector;
            rhsDependentThoroughfaresConnector = that.getDependentThoroughfaresConnector();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentThoroughfaresConnector", lhsDependentThoroughfaresConnector), LocatorUtils.property(thatLocator, "dependentThoroughfaresConnector", rhsDependentThoroughfaresConnector), lhsDependentThoroughfaresConnector, rhsDependentThoroughfaresConnector)) {
                return false;
            }
        }
        {
            String lhsDependentThoroughfaresType;
            lhsDependentThoroughfaresType = this.getDependentThoroughfaresType();
            String rhsDependentThoroughfaresType;
            rhsDependentThoroughfaresType = that.getDependentThoroughfaresType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentThoroughfaresType", lhsDependentThoroughfaresType), LocatorUtils.property(thatLocator, "dependentThoroughfaresType", rhsDependentThoroughfaresType), lhsDependentThoroughfaresType, rhsDependentThoroughfaresType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
        }
        {
            List<Object> theThoroughfareNumberOrThoroughfareNumberRange;
            theThoroughfareNumberOrThoroughfareNumberRange = (this.isSetThoroughfareNumberOrThoroughfareNumberRange()?this.getThoroughfareNumberOrThoroughfareNumberRange():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareNumberOrThoroughfareNumberRange", theThoroughfareNumberOrThoroughfareNumberRange), currentHashCode, theThoroughfareNumberOrThoroughfareNumberRange);
        }
        {
            List<ThoroughfareNumberPrefixElement> theThoroughfareNumberPrefix;
            theThoroughfareNumberPrefix = (this.isSetThoroughfareNumberPrefix()?this.getThoroughfareNumberPrefix():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareNumberPrefix", theThoroughfareNumberPrefix), currentHashCode, theThoroughfareNumberPrefix);
        }
        {
            List<ThoroughfareNumberSuffixElement> theThoroughfareNumberSuffix;
            theThoroughfareNumberSuffix = (this.isSetThoroughfareNumberSuffix()?this.getThoroughfareNumberSuffix():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareNumberSuffix", theThoroughfareNumberSuffix), currentHashCode, theThoroughfareNumberSuffix);
        }
        {
            ThoroughfarePreDirectionType theThoroughfarePreDirection;
            theThoroughfarePreDirection = this.getThoroughfarePreDirection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfarePreDirection", theThoroughfarePreDirection), currentHashCode, theThoroughfarePreDirection);
        }
        {
            ThoroughfareLeadingTypeType theThoroughfareLeadingType;
            theThoroughfareLeadingType = this.getThoroughfareLeadingType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareLeadingType", theThoroughfareLeadingType), currentHashCode, theThoroughfareLeadingType);
        }
        {
            List<ThoroughfareNameType> theThoroughfareName;
            theThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareName", theThoroughfareName), currentHashCode, theThoroughfareName);
        }
        {
            ThoroughfareTrailingTypeType theThoroughfareTrailingType;
            theThoroughfareTrailingType = this.getThoroughfareTrailingType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareTrailingType", theThoroughfareTrailingType), currentHashCode, theThoroughfareTrailingType);
        }
        {
            ThoroughfarePostDirectionType theThoroughfarePostDirection;
            theThoroughfarePostDirection = this.getThoroughfarePostDirection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfarePostDirection", theThoroughfarePostDirection), currentHashCode, theThoroughfarePostDirection);
        }
        {
            ThoroughfareElement.DependentThoroughfare theDependentThoroughfare;
            theDependentThoroughfare = this.getDependentThoroughfare();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentThoroughfare", theDependentThoroughfare), currentHashCode, theDependentThoroughfare);
        }
        {
            DependentLocalityType theDependentLocality;
            theDependentLocality = this.getDependentLocality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentLocality", theDependentLocality), currentHashCode, theDependentLocality);
        }
        {
            PremiseElement thePremise;
            thePremise = this.getPremise();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "premise", thePremise), currentHashCode, thePremise);
        }
        {
            FirmType theFirm;
            theFirm = this.getFirm();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firm", theFirm), currentHashCode, theFirm);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            String theDependentThoroughfares;
            theDependentThoroughfares = this.getDependentThoroughfares();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentThoroughfares", theDependentThoroughfares), currentHashCode, theDependentThoroughfares);
        }
        {
            String theDependentThoroughfaresIndicator;
            theDependentThoroughfaresIndicator = this.getDependentThoroughfaresIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentThoroughfaresIndicator", theDependentThoroughfaresIndicator), currentHashCode, theDependentThoroughfaresIndicator);
        }
        {
            String theDependentThoroughfaresConnector;
            theDependentThoroughfaresConnector = this.getDependentThoroughfaresConnector();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentThoroughfaresConnector", theDependentThoroughfaresConnector), currentHashCode, theDependentThoroughfaresConnector);
        }
        {
            String theDependentThoroughfaresType;
            theDependentThoroughfaresType = this.getDependentThoroughfaresType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentThoroughfaresType", theDependentThoroughfaresType), currentHashCode, theDependentThoroughfaresType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ThoroughfareElement) {
            final ThoroughfareElement copy = ((ThoroughfareElement) draftCopy);
            if (this.isSetAddressLine()) {
                List<AddressLineElement> sourceAddressLine;
                sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                @SuppressWarnings("unchecked")
                List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                copy.unsetAddressLine();
                if (copyAddressLine!= null) {
                    List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                    uniqueAddressLinel.addAll(copyAddressLine);
                }
            } else {
                copy.unsetAddressLine();
            }
            if (this.isSetThoroughfareNumberOrThoroughfareNumberRange()) {
                List<Object> sourceThoroughfareNumberOrThoroughfareNumberRange;
                sourceThoroughfareNumberOrThoroughfareNumberRange = (this.isSetThoroughfareNumberOrThoroughfareNumberRange()?this.getThoroughfareNumberOrThoroughfareNumberRange():null);
                @SuppressWarnings("unchecked")
                List<Object> copyThoroughfareNumberOrThoroughfareNumberRange = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "thoroughfareNumberOrThoroughfareNumberRange", sourceThoroughfareNumberOrThoroughfareNumberRange), sourceThoroughfareNumberOrThoroughfareNumberRange));
                copy.unsetThoroughfareNumberOrThoroughfareNumberRange();
                if (copyThoroughfareNumberOrThoroughfareNumberRange!= null) {
                    List<Object> uniqueThoroughfareNumberOrThoroughfareNumberRangel = copy.getThoroughfareNumberOrThoroughfareNumberRange();
                    uniqueThoroughfareNumberOrThoroughfareNumberRangel.addAll(copyThoroughfareNumberOrThoroughfareNumberRange);
                }
            } else {
                copy.unsetThoroughfareNumberOrThoroughfareNumberRange();
            }
            if (this.isSetThoroughfareNumberPrefix()) {
                List<ThoroughfareNumberPrefixElement> sourceThoroughfareNumberPrefix;
                sourceThoroughfareNumberPrefix = (this.isSetThoroughfareNumberPrefix()?this.getThoroughfareNumberPrefix():null);
                @SuppressWarnings("unchecked")
                List<ThoroughfareNumberPrefixElement> copyThoroughfareNumberPrefix = ((List<ThoroughfareNumberPrefixElement> ) strategy.copy(LocatorUtils.property(locator, "thoroughfareNumberPrefix", sourceThoroughfareNumberPrefix), sourceThoroughfareNumberPrefix));
                copy.unsetThoroughfareNumberPrefix();
                if (copyThoroughfareNumberPrefix!= null) {
                    List<ThoroughfareNumberPrefixElement> uniqueThoroughfareNumberPrefixl = copy.getThoroughfareNumberPrefix();
                    uniqueThoroughfareNumberPrefixl.addAll(copyThoroughfareNumberPrefix);
                }
            } else {
                copy.unsetThoroughfareNumberPrefix();
            }
            if (this.isSetThoroughfareNumberSuffix()) {
                List<ThoroughfareNumberSuffixElement> sourceThoroughfareNumberSuffix;
                sourceThoroughfareNumberSuffix = (this.isSetThoroughfareNumberSuffix()?this.getThoroughfareNumberSuffix():null);
                @SuppressWarnings("unchecked")
                List<ThoroughfareNumberSuffixElement> copyThoroughfareNumberSuffix = ((List<ThoroughfareNumberSuffixElement> ) strategy.copy(LocatorUtils.property(locator, "thoroughfareNumberSuffix", sourceThoroughfareNumberSuffix), sourceThoroughfareNumberSuffix));
                copy.unsetThoroughfareNumberSuffix();
                if (copyThoroughfareNumberSuffix!= null) {
                    List<ThoroughfareNumberSuffixElement> uniqueThoroughfareNumberSuffixl = copy.getThoroughfareNumberSuffix();
                    uniqueThoroughfareNumberSuffixl.addAll(copyThoroughfareNumberSuffix);
                }
            } else {
                copy.unsetThoroughfareNumberSuffix();
            }
            if (this.isSetThoroughfarePreDirection()) {
                ThoroughfarePreDirectionType sourceThoroughfarePreDirection;
                sourceThoroughfarePreDirection = this.getThoroughfarePreDirection();
                ThoroughfarePreDirectionType copyThoroughfarePreDirection = ((ThoroughfarePreDirectionType) strategy.copy(LocatorUtils.property(locator, "thoroughfarePreDirection", sourceThoroughfarePreDirection), sourceThoroughfarePreDirection));
                copy.setThoroughfarePreDirection(copyThoroughfarePreDirection);
            } else {
                copy.thoroughfarePreDirection = null;
            }
            if (this.isSetThoroughfareLeadingType()) {
                ThoroughfareLeadingTypeType sourceThoroughfareLeadingType;
                sourceThoroughfareLeadingType = this.getThoroughfareLeadingType();
                ThoroughfareLeadingTypeType copyThoroughfareLeadingType = ((ThoroughfareLeadingTypeType) strategy.copy(LocatorUtils.property(locator, "thoroughfareLeadingType", sourceThoroughfareLeadingType), sourceThoroughfareLeadingType));
                copy.setThoroughfareLeadingType(copyThoroughfareLeadingType);
            } else {
                copy.thoroughfareLeadingType = null;
            }
            if (this.isSetThoroughfareName()) {
                List<ThoroughfareNameType> sourceThoroughfareName;
                sourceThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
                @SuppressWarnings("unchecked")
                List<ThoroughfareNameType> copyThoroughfareName = ((List<ThoroughfareNameType> ) strategy.copy(LocatorUtils.property(locator, "thoroughfareName", sourceThoroughfareName), sourceThoroughfareName));
                copy.unsetThoroughfareName();
                if (copyThoroughfareName!= null) {
                    List<ThoroughfareNameType> uniqueThoroughfareNamel = copy.getThoroughfareName();
                    uniqueThoroughfareNamel.addAll(copyThoroughfareName);
                }
            } else {
                copy.unsetThoroughfareName();
            }
            if (this.isSetThoroughfareTrailingType()) {
                ThoroughfareTrailingTypeType sourceThoroughfareTrailingType;
                sourceThoroughfareTrailingType = this.getThoroughfareTrailingType();
                ThoroughfareTrailingTypeType copyThoroughfareTrailingType = ((ThoroughfareTrailingTypeType) strategy.copy(LocatorUtils.property(locator, "thoroughfareTrailingType", sourceThoroughfareTrailingType), sourceThoroughfareTrailingType));
                copy.setThoroughfareTrailingType(copyThoroughfareTrailingType);
            } else {
                copy.thoroughfareTrailingType = null;
            }
            if (this.isSetThoroughfarePostDirection()) {
                ThoroughfarePostDirectionType sourceThoroughfarePostDirection;
                sourceThoroughfarePostDirection = this.getThoroughfarePostDirection();
                ThoroughfarePostDirectionType copyThoroughfarePostDirection = ((ThoroughfarePostDirectionType) strategy.copy(LocatorUtils.property(locator, "thoroughfarePostDirection", sourceThoroughfarePostDirection), sourceThoroughfarePostDirection));
                copy.setThoroughfarePostDirection(copyThoroughfarePostDirection);
            } else {
                copy.thoroughfarePostDirection = null;
            }
            if (this.isSetDependentThoroughfare()) {
                ThoroughfareElement.DependentThoroughfare sourceDependentThoroughfare;
                sourceDependentThoroughfare = this.getDependentThoroughfare();
                ThoroughfareElement.DependentThoroughfare copyDependentThoroughfare = ((ThoroughfareElement.DependentThoroughfare) strategy.copy(LocatorUtils.property(locator, "dependentThoroughfare", sourceDependentThoroughfare), sourceDependentThoroughfare));
                copy.setDependentThoroughfare(copyDependentThoroughfare);
            } else {
                copy.dependentThoroughfare = null;
            }
            if (this.isSetDependentLocality()) {
                DependentLocalityType sourceDependentLocality;
                sourceDependentLocality = this.getDependentLocality();
                DependentLocalityType copyDependentLocality = ((DependentLocalityType) strategy.copy(LocatorUtils.property(locator, "dependentLocality", sourceDependentLocality), sourceDependentLocality));
                copy.setDependentLocality(copyDependentLocality);
            } else {
                copy.dependentLocality = null;
            }
            if (this.isSetPremise()) {
                PremiseElement sourcePremise;
                sourcePremise = this.getPremise();
                PremiseElement copyPremise = ((PremiseElement) strategy.copy(LocatorUtils.property(locator, "premise", sourcePremise), sourcePremise));
                copy.setPremise(copyPremise);
            } else {
                copy.premise = null;
            }
            if (this.isSetFirm()) {
                FirmType sourceFirm;
                sourceFirm = this.getFirm();
                FirmType copyFirm = ((FirmType) strategy.copy(LocatorUtils.property(locator, "firm", sourceFirm), sourceFirm));
                copy.setFirm(copyFirm);
            } else {
                copy.firm = null;
            }
            if (this.isSetPostalCode()) {
                PostalCodeElement sourcePostalCode;
                sourcePostalCode = this.getPostalCode();
                PostalCodeElement copyPostalCode = ((PostalCodeElement) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                copy.setPostalCode(copyPostalCode);
            } else {
                copy.postalCode = null;
            }
            if (this.isSetAny()) {
                List<Object> sourceAny;
                sourceAny = (this.isSetAny()?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.unsetAny();
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.unsetAny();
            }
            if (this.isSetType()) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.isSetDependentThoroughfares()) {
                String sourceDependentThoroughfares;
                sourceDependentThoroughfares = this.getDependentThoroughfares();
                String copyDependentThoroughfares = ((String) strategy.copy(LocatorUtils.property(locator, "dependentThoroughfares", sourceDependentThoroughfares), sourceDependentThoroughfares));
                copy.setDependentThoroughfares(copyDependentThoroughfares);
            } else {
                copy.dependentThoroughfares = null;
            }
            if (this.isSetDependentThoroughfaresIndicator()) {
                String sourceDependentThoroughfaresIndicator;
                sourceDependentThoroughfaresIndicator = this.getDependentThoroughfaresIndicator();
                String copyDependentThoroughfaresIndicator = ((String) strategy.copy(LocatorUtils.property(locator, "dependentThoroughfaresIndicator", sourceDependentThoroughfaresIndicator), sourceDependentThoroughfaresIndicator));
                copy.setDependentThoroughfaresIndicator(copyDependentThoroughfaresIndicator);
            } else {
                copy.dependentThoroughfaresIndicator = null;
            }
            if (this.isSetDependentThoroughfaresConnector()) {
                String sourceDependentThoroughfaresConnector;
                sourceDependentThoroughfaresConnector = this.getDependentThoroughfaresConnector();
                String copyDependentThoroughfaresConnector = ((String) strategy.copy(LocatorUtils.property(locator, "dependentThoroughfaresConnector", sourceDependentThoroughfaresConnector), sourceDependentThoroughfaresConnector));
                copy.setDependentThoroughfaresConnector(copyDependentThoroughfaresConnector);
            } else {
                copy.dependentThoroughfaresConnector = null;
            }
            if (this.isSetDependentThoroughfaresType()) {
                String sourceDependentThoroughfaresType;
                sourceDependentThoroughfaresType = this.getDependentThoroughfaresType();
                String copyDependentThoroughfaresType = ((String) strategy.copy(LocatorUtils.property(locator, "dependentThoroughfaresType", sourceDependentThoroughfaresType), sourceDependentThoroughfaresType));
                copy.setDependentThoroughfaresType(copyDependentThoroughfaresType);
            } else {
                copy.dependentThoroughfaresType = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ThoroughfareElement();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="ThoroughfarePreDirection" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfarePreDirectionType" minOccurs="0"/&gt;
     *         &lt;element name="ThoroughfareLeadingType" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareLeadingTypeType" minOccurs="0"/&gt;
     *         &lt;element name="ThoroughfareName" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNameType" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="ThoroughfareTrailingType" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareTrailingTypeType" minOccurs="0"/&gt;
     *         &lt;element name="ThoroughfarePostDirection" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfarePostDirectionType" minOccurs="0"/&gt;
     *         &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "addressLine",
        "thoroughfarePreDirection",
        "thoroughfareLeadingType",
        "thoroughfareName",
        "thoroughfareTrailingType",
        "thoroughfarePostDirection",
        "any"
    })
    public static class DependentThoroughfare
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AddressLine")
        protected List<AddressLineElement> addressLine;
        @XmlElement(name = "ThoroughfarePreDirection")
        protected ThoroughfarePreDirectionType thoroughfarePreDirection;
        @XmlElement(name = "ThoroughfareLeadingType")
        protected ThoroughfareLeadingTypeType thoroughfareLeadingType;
        @XmlElement(name = "ThoroughfareName")
        protected List<ThoroughfareNameType> thoroughfareName;
        @XmlElement(name = "ThoroughfareTrailingType")
        protected ThoroughfareTrailingTypeType thoroughfareTrailingType;
        @XmlElement(name = "ThoroughfarePostDirection")
        protected ThoroughfarePostDirectionType thoroughfarePostDirection;
        @XmlAnyElement(lax = true)
        protected List<Object> any;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the addressLine property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the addressLine property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAddressLine().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AddressLineElement }
         * 
         * 
         */
        public List<AddressLineElement> getAddressLine() {
            if (addressLine == null) {
                addressLine = new ArrayList<AddressLineElement>();
            }
            return this.addressLine;
        }

        public boolean isSetAddressLine() {
            return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
        }

        public void unsetAddressLine() {
            this.addressLine = null;
        }

        /**
         * Gets the value of the thoroughfarePreDirection property.
         * 
         * @return
         *     possible object is
         *     {@link ThoroughfarePreDirectionType }
         *     
         */
        public ThoroughfarePreDirectionType getThoroughfarePreDirection() {
            return thoroughfarePreDirection;
        }

        /**
         * Sets the value of the thoroughfarePreDirection property.
         * 
         * @param value
         *     allowed object is
         *     {@link ThoroughfarePreDirectionType }
         *     
         */
        public void setThoroughfarePreDirection(ThoroughfarePreDirectionType value) {
            this.thoroughfarePreDirection = value;
        }

        public boolean isSetThoroughfarePreDirection() {
            return (this.thoroughfarePreDirection!= null);
        }

        /**
         * Gets the value of the thoroughfareLeadingType property.
         * 
         * @return
         *     possible object is
         *     {@link ThoroughfareLeadingTypeType }
         *     
         */
        public ThoroughfareLeadingTypeType getThoroughfareLeadingType() {
            return thoroughfareLeadingType;
        }

        /**
         * Sets the value of the thoroughfareLeadingType property.
         * 
         * @param value
         *     allowed object is
         *     {@link ThoroughfareLeadingTypeType }
         *     
         */
        public void setThoroughfareLeadingType(ThoroughfareLeadingTypeType value) {
            this.thoroughfareLeadingType = value;
        }

        public boolean isSetThoroughfareLeadingType() {
            return (this.thoroughfareLeadingType!= null);
        }

        /**
         * Gets the value of the thoroughfareName property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the thoroughfareName property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getThoroughfareName().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link ThoroughfareNameType }
         * 
         * 
         */
        public List<ThoroughfareNameType> getThoroughfareName() {
            if (thoroughfareName == null) {
                thoroughfareName = new ArrayList<ThoroughfareNameType>();
            }
            return this.thoroughfareName;
        }

        public boolean isSetThoroughfareName() {
            return ((this.thoroughfareName!= null)&&(!this.thoroughfareName.isEmpty()));
        }

        public void unsetThoroughfareName() {
            this.thoroughfareName = null;
        }

        /**
         * Gets the value of the thoroughfareTrailingType property.
         * 
         * @return
         *     possible object is
         *     {@link ThoroughfareTrailingTypeType }
         *     
         */
        public ThoroughfareTrailingTypeType getThoroughfareTrailingType() {
            return thoroughfareTrailingType;
        }

        /**
         * Sets the value of the thoroughfareTrailingType property.
         * 
         * @param value
         *     allowed object is
         *     {@link ThoroughfareTrailingTypeType }
         *     
         */
        public void setThoroughfareTrailingType(ThoroughfareTrailingTypeType value) {
            this.thoroughfareTrailingType = value;
        }

        public boolean isSetThoroughfareTrailingType() {
            return (this.thoroughfareTrailingType!= null);
        }

        /**
         * Gets the value of the thoroughfarePostDirection property.
         * 
         * @return
         *     possible object is
         *     {@link ThoroughfarePostDirectionType }
         *     
         */
        public ThoroughfarePostDirectionType getThoroughfarePostDirection() {
            return thoroughfarePostDirection;
        }

        /**
         * Sets the value of the thoroughfarePostDirection property.
         * 
         * @param value
         *     allowed object is
         *     {@link ThoroughfarePostDirectionType }
         *     
         */
        public void setThoroughfarePostDirection(ThoroughfarePostDirectionType value) {
            this.thoroughfarePostDirection = value;
        }

        public boolean isSetThoroughfarePostDirection() {
            return (this.thoroughfarePostDirection!= null);
        }

        /**
         * Gets the value of the any property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the any property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAny().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Object }
         * 
         * 
         */
        public List<Object> getAny() {
            if (any == null) {
                any = new ArrayList<Object>();
            }
            return this.any;
        }

        public boolean isSetAny() {
            return ((this.any!= null)&&(!this.any.isEmpty()));
        }

        public void unsetAny() {
            this.any = null;
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AddressLineElement> theAddressLine;
                theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
            }
            {
                ThoroughfarePreDirectionType theThoroughfarePreDirection;
                theThoroughfarePreDirection = this.getThoroughfarePreDirection();
                strategy.appendField(locator, this, "thoroughfarePreDirection", buffer, theThoroughfarePreDirection);
            }
            {
                ThoroughfareLeadingTypeType theThoroughfareLeadingType;
                theThoroughfareLeadingType = this.getThoroughfareLeadingType();
                strategy.appendField(locator, this, "thoroughfareLeadingType", buffer, theThoroughfareLeadingType);
            }
            {
                List<ThoroughfareNameType> theThoroughfareName;
                theThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
                strategy.appendField(locator, this, "thoroughfareName", buffer, theThoroughfareName);
            }
            {
                ThoroughfareTrailingTypeType theThoroughfareTrailingType;
                theThoroughfareTrailingType = this.getThoroughfareTrailingType();
                strategy.appendField(locator, this, "thoroughfareTrailingType", buffer, theThoroughfareTrailingType);
            }
            {
                ThoroughfarePostDirectionType theThoroughfarePostDirection;
                theThoroughfarePostDirection = this.getThoroughfarePostDirection();
                strategy.appendField(locator, this, "thoroughfarePostDirection", buffer, theThoroughfarePostDirection);
            }
            {
                List<Object> theAny;
                theAny = (this.isSetAny()?this.getAny():null);
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ThoroughfareElement.DependentThoroughfare)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ThoroughfareElement.DependentThoroughfare that = ((ThoroughfareElement.DependentThoroughfare) object);
            {
                List<AddressLineElement> lhsAddressLine;
                lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                List<AddressLineElement> rhsAddressLine;
                rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                    return false;
                }
            }
            {
                ThoroughfarePreDirectionType lhsThoroughfarePreDirection;
                lhsThoroughfarePreDirection = this.getThoroughfarePreDirection();
                ThoroughfarePreDirectionType rhsThoroughfarePreDirection;
                rhsThoroughfarePreDirection = that.getThoroughfarePreDirection();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfarePreDirection", lhsThoroughfarePreDirection), LocatorUtils.property(thatLocator, "thoroughfarePreDirection", rhsThoroughfarePreDirection), lhsThoroughfarePreDirection, rhsThoroughfarePreDirection)) {
                    return false;
                }
            }
            {
                ThoroughfareLeadingTypeType lhsThoroughfareLeadingType;
                lhsThoroughfareLeadingType = this.getThoroughfareLeadingType();
                ThoroughfareLeadingTypeType rhsThoroughfareLeadingType;
                rhsThoroughfareLeadingType = that.getThoroughfareLeadingType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareLeadingType", lhsThoroughfareLeadingType), LocatorUtils.property(thatLocator, "thoroughfareLeadingType", rhsThoroughfareLeadingType), lhsThoroughfareLeadingType, rhsThoroughfareLeadingType)) {
                    return false;
                }
            }
            {
                List<ThoroughfareNameType> lhsThoroughfareName;
                lhsThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
                List<ThoroughfareNameType> rhsThoroughfareName;
                rhsThoroughfareName = (that.isSetThoroughfareName()?that.getThoroughfareName():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareName", lhsThoroughfareName), LocatorUtils.property(thatLocator, "thoroughfareName", rhsThoroughfareName), lhsThoroughfareName, rhsThoroughfareName)) {
                    return false;
                }
            }
            {
                ThoroughfareTrailingTypeType lhsThoroughfareTrailingType;
                lhsThoroughfareTrailingType = this.getThoroughfareTrailingType();
                ThoroughfareTrailingTypeType rhsThoroughfareTrailingType;
                rhsThoroughfareTrailingType = that.getThoroughfareTrailingType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareTrailingType", lhsThoroughfareTrailingType), LocatorUtils.property(thatLocator, "thoroughfareTrailingType", rhsThoroughfareTrailingType), lhsThoroughfareTrailingType, rhsThoroughfareTrailingType)) {
                    return false;
                }
            }
            {
                ThoroughfarePostDirectionType lhsThoroughfarePostDirection;
                lhsThoroughfarePostDirection = this.getThoroughfarePostDirection();
                ThoroughfarePostDirectionType rhsThoroughfarePostDirection;
                rhsThoroughfarePostDirection = that.getThoroughfarePostDirection();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfarePostDirection", lhsThoroughfarePostDirection), LocatorUtils.property(thatLocator, "thoroughfarePostDirection", rhsThoroughfarePostDirection), lhsThoroughfarePostDirection, rhsThoroughfarePostDirection)) {
                    return false;
                }
            }
            {
                List<Object> lhsAny;
                lhsAny = (this.isSetAny()?this.getAny():null);
                List<Object> rhsAny;
                rhsAny = (that.isSetAny()?that.getAny():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AddressLineElement> theAddressLine;
                theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
            }
            {
                ThoroughfarePreDirectionType theThoroughfarePreDirection;
                theThoroughfarePreDirection = this.getThoroughfarePreDirection();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfarePreDirection", theThoroughfarePreDirection), currentHashCode, theThoroughfarePreDirection);
            }
            {
                ThoroughfareLeadingTypeType theThoroughfareLeadingType;
                theThoroughfareLeadingType = this.getThoroughfareLeadingType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareLeadingType", theThoroughfareLeadingType), currentHashCode, theThoroughfareLeadingType);
            }
            {
                List<ThoroughfareNameType> theThoroughfareName;
                theThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareName", theThoroughfareName), currentHashCode, theThoroughfareName);
            }
            {
                ThoroughfareTrailingTypeType theThoroughfareTrailingType;
                theThoroughfareTrailingType = this.getThoroughfareTrailingType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareTrailingType", theThoroughfareTrailingType), currentHashCode, theThoroughfareTrailingType);
            }
            {
                ThoroughfarePostDirectionType theThoroughfarePostDirection;
                theThoroughfarePostDirection = this.getThoroughfarePostDirection();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfarePostDirection", theThoroughfarePostDirection), currentHashCode, theThoroughfarePostDirection);
            }
            {
                List<Object> theAny;
                theAny = (this.isSetAny()?this.getAny():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ThoroughfareElement.DependentThoroughfare) {
                final ThoroughfareElement.DependentThoroughfare copy = ((ThoroughfareElement.DependentThoroughfare) draftCopy);
                if (this.isSetAddressLine()) {
                    List<AddressLineElement> sourceAddressLine;
                    sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                    @SuppressWarnings("unchecked")
                    List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                    copy.unsetAddressLine();
                    if (copyAddressLine!= null) {
                        List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                        uniqueAddressLinel.addAll(copyAddressLine);
                    }
                } else {
                    copy.unsetAddressLine();
                }
                if (this.isSetThoroughfarePreDirection()) {
                    ThoroughfarePreDirectionType sourceThoroughfarePreDirection;
                    sourceThoroughfarePreDirection = this.getThoroughfarePreDirection();
                    ThoroughfarePreDirectionType copyThoroughfarePreDirection = ((ThoroughfarePreDirectionType) strategy.copy(LocatorUtils.property(locator, "thoroughfarePreDirection", sourceThoroughfarePreDirection), sourceThoroughfarePreDirection));
                    copy.setThoroughfarePreDirection(copyThoroughfarePreDirection);
                } else {
                    copy.thoroughfarePreDirection = null;
                }
                if (this.isSetThoroughfareLeadingType()) {
                    ThoroughfareLeadingTypeType sourceThoroughfareLeadingType;
                    sourceThoroughfareLeadingType = this.getThoroughfareLeadingType();
                    ThoroughfareLeadingTypeType copyThoroughfareLeadingType = ((ThoroughfareLeadingTypeType) strategy.copy(LocatorUtils.property(locator, "thoroughfareLeadingType", sourceThoroughfareLeadingType), sourceThoroughfareLeadingType));
                    copy.setThoroughfareLeadingType(copyThoroughfareLeadingType);
                } else {
                    copy.thoroughfareLeadingType = null;
                }
                if (this.isSetThoroughfareName()) {
                    List<ThoroughfareNameType> sourceThoroughfareName;
                    sourceThoroughfareName = (this.isSetThoroughfareName()?this.getThoroughfareName():null);
                    @SuppressWarnings("unchecked")
                    List<ThoroughfareNameType> copyThoroughfareName = ((List<ThoroughfareNameType> ) strategy.copy(LocatorUtils.property(locator, "thoroughfareName", sourceThoroughfareName), sourceThoroughfareName));
                    copy.unsetThoroughfareName();
                    if (copyThoroughfareName!= null) {
                        List<ThoroughfareNameType> uniqueThoroughfareNamel = copy.getThoroughfareName();
                        uniqueThoroughfareNamel.addAll(copyThoroughfareName);
                    }
                } else {
                    copy.unsetThoroughfareName();
                }
                if (this.isSetThoroughfareTrailingType()) {
                    ThoroughfareTrailingTypeType sourceThoroughfareTrailingType;
                    sourceThoroughfareTrailingType = this.getThoroughfareTrailingType();
                    ThoroughfareTrailingTypeType copyThoroughfareTrailingType = ((ThoroughfareTrailingTypeType) strategy.copy(LocatorUtils.property(locator, "thoroughfareTrailingType", sourceThoroughfareTrailingType), sourceThoroughfareTrailingType));
                    copy.setThoroughfareTrailingType(copyThoroughfareTrailingType);
                } else {
                    copy.thoroughfareTrailingType = null;
                }
                if (this.isSetThoroughfarePostDirection()) {
                    ThoroughfarePostDirectionType sourceThoroughfarePostDirection;
                    sourceThoroughfarePostDirection = this.getThoroughfarePostDirection();
                    ThoroughfarePostDirectionType copyThoroughfarePostDirection = ((ThoroughfarePostDirectionType) strategy.copy(LocatorUtils.property(locator, "thoroughfarePostDirection", sourceThoroughfarePostDirection), sourceThoroughfarePostDirection));
                    copy.setThoroughfarePostDirection(copyThoroughfarePostDirection);
                } else {
                    copy.thoroughfarePostDirection = null;
                }
                if (this.isSetAny()) {
                    List<Object> sourceAny;
                    sourceAny = (this.isSetAny()?this.getAny():null);
                    @SuppressWarnings("unchecked")
                    List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                    copy.unsetAny();
                    if (copyAny!= null) {
                        List<Object> uniqueAnyl = copy.getAny();
                        uniqueAnyl.addAll(copyAny);
                    }
                } else {
                    copy.unsetAny();
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ThoroughfareElement.DependentThoroughfare();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="ThoroughfareNumberFrom"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber" maxOccurs="unbounded"/&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
     *                 &lt;/sequence&gt;
     *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *                 &lt;anyAttribute namespace='##other'/&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;element name="ThoroughfareNumberTo"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;sequence&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber" maxOccurs="unbounded"/&gt;
     *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
     *                 &lt;/sequence&gt;
     *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *                 &lt;anyAttribute namespace='##other'/&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *       &lt;/sequence&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="RangeType"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Odd"/&gt;
     *             &lt;enumeration value="Even"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="Separator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="IndicatorOccurrence"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Before"/&gt;
     *             &lt;enumeration value="After"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="NumberRangeOccurrence"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="BeforeName"/&gt;
     *             &lt;enumeration value="AfterName"/&gt;
     *             &lt;enumeration value="BeforeType"/&gt;
     *             &lt;enumeration value="AfterType"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "addressLine",
        "thoroughfareNumberFrom",
        "thoroughfareNumberTo"
    })
    public static class ThoroughfareNumberRange implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AddressLine")
        protected List<AddressLineElement> addressLine;
        @XmlElement(name = "ThoroughfareNumberFrom", required = true)
        protected ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom thoroughfareNumberFrom;
        @XmlElement(name = "ThoroughfareNumberTo", required = true)
        protected ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo thoroughfareNumberTo;
        @XmlAttribute(name = "RangeType")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String rangeType;
        @XmlAttribute(name = "Indicator")
        @XmlSchemaType(name = "anySimpleType")
        protected String indicator;
        @XmlAttribute(name = "Separator")
        @XmlSchemaType(name = "anySimpleType")
        protected String separator;
        @XmlAttribute(name = "IndicatorOccurrence")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String indicatorOccurrence;
        @XmlAttribute(name = "NumberRangeOccurrence")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String numberRangeOccurrence;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the addressLine property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the addressLine property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAddressLine().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AddressLineElement }
         * 
         * 
         */
        public List<AddressLineElement> getAddressLine() {
            if (addressLine == null) {
                addressLine = new ArrayList<AddressLineElement>();
            }
            return this.addressLine;
        }

        public boolean isSetAddressLine() {
            return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
        }

        public void unsetAddressLine() {
            this.addressLine = null;
        }

        /**
         * Gets the value of the thoroughfareNumberFrom property.
         * 
         * @return
         *     possible object is
         *     {@link ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom }
         *     
         */
        public ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom getThoroughfareNumberFrom() {
            return thoroughfareNumberFrom;
        }

        /**
         * Sets the value of the thoroughfareNumberFrom property.
         * 
         * @param value
         *     allowed object is
         *     {@link ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom }
         *     
         */
        public void setThoroughfareNumberFrom(ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom value) {
            this.thoroughfareNumberFrom = value;
        }

        public boolean isSetThoroughfareNumberFrom() {
            return (this.thoroughfareNumberFrom!= null);
        }

        /**
         * Gets the value of the thoroughfareNumberTo property.
         * 
         * @return
         *     possible object is
         *     {@link ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo }
         *     
         */
        public ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo getThoroughfareNumberTo() {
            return thoroughfareNumberTo;
        }

        /**
         * Sets the value of the thoroughfareNumberTo property.
         * 
         * @param value
         *     allowed object is
         *     {@link ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo }
         *     
         */
        public void setThoroughfareNumberTo(ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo value) {
            this.thoroughfareNumberTo = value;
        }

        public boolean isSetThoroughfareNumberTo() {
            return (this.thoroughfareNumberTo!= null);
        }

        /**
         * Gets the value of the rangeType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRangeType() {
            return rangeType;
        }

        /**
         * Sets the value of the rangeType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRangeType(String value) {
            this.rangeType = value;
        }

        public boolean isSetRangeType() {
            return (this.rangeType!= null);
        }

        /**
         * Gets the value of the indicator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getIndicator() {
            return indicator;
        }

        /**
         * Sets the value of the indicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setIndicator(String value) {
            this.indicator = value;
        }

        public boolean isSetIndicator() {
            return (this.indicator!= null);
        }

        /**
         * Gets the value of the separator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSeparator() {
            return separator;
        }

        /**
         * Sets the value of the separator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSeparator(String value) {
            this.separator = value;
        }

        public boolean isSetSeparator() {
            return (this.separator!= null);
        }

        /**
         * Gets the value of the indicatorOccurrence property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getIndicatorOccurrence() {
            return indicatorOccurrence;
        }

        /**
         * Sets the value of the indicatorOccurrence property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setIndicatorOccurrence(String value) {
            this.indicatorOccurrence = value;
        }

        public boolean isSetIndicatorOccurrence() {
            return (this.indicatorOccurrence!= null);
        }

        /**
         * Gets the value of the numberRangeOccurrence property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNumberRangeOccurrence() {
            return numberRangeOccurrence;
        }

        /**
         * Sets the value of the numberRangeOccurrence property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNumberRangeOccurrence(String value) {
            this.numberRangeOccurrence = value;
        }

        public boolean isSetNumberRangeOccurrence() {
            return (this.numberRangeOccurrence!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AddressLineElement> theAddressLine;
                theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
            }
            {
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom theThoroughfareNumberFrom;
                theThoroughfareNumberFrom = this.getThoroughfareNumberFrom();
                strategy.appendField(locator, this, "thoroughfareNumberFrom", buffer, theThoroughfareNumberFrom);
            }
            {
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo theThoroughfareNumberTo;
                theThoroughfareNumberTo = this.getThoroughfareNumberTo();
                strategy.appendField(locator, this, "thoroughfareNumberTo", buffer, theThoroughfareNumberTo);
            }
            {
                String theRangeType;
                theRangeType = this.getRangeType();
                strategy.appendField(locator, this, "rangeType", buffer, theRangeType);
            }
            {
                String theIndicator;
                theIndicator = this.getIndicator();
                strategy.appendField(locator, this, "indicator", buffer, theIndicator);
            }
            {
                String theSeparator;
                theSeparator = this.getSeparator();
                strategy.appendField(locator, this, "separator", buffer, theSeparator);
            }
            {
                String theIndicatorOccurrence;
                theIndicatorOccurrence = this.getIndicatorOccurrence();
                strategy.appendField(locator, this, "indicatorOccurrence", buffer, theIndicatorOccurrence);
            }
            {
                String theNumberRangeOccurrence;
                theNumberRangeOccurrence = this.getNumberRangeOccurrence();
                strategy.appendField(locator, this, "numberRangeOccurrence", buffer, theNumberRangeOccurrence);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof ThoroughfareElement.ThoroughfareNumberRange)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final ThoroughfareElement.ThoroughfareNumberRange that = ((ThoroughfareElement.ThoroughfareNumberRange) object);
            {
                List<AddressLineElement> lhsAddressLine;
                lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                List<AddressLineElement> rhsAddressLine;
                rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                    return false;
                }
            }
            {
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom lhsThoroughfareNumberFrom;
                lhsThoroughfareNumberFrom = this.getThoroughfareNumberFrom();
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom rhsThoroughfareNumberFrom;
                rhsThoroughfareNumberFrom = that.getThoroughfareNumberFrom();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareNumberFrom", lhsThoroughfareNumberFrom), LocatorUtils.property(thatLocator, "thoroughfareNumberFrom", rhsThoroughfareNumberFrom), lhsThoroughfareNumberFrom, rhsThoroughfareNumberFrom)) {
                    return false;
                }
            }
            {
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo lhsThoroughfareNumberTo;
                lhsThoroughfareNumberTo = this.getThoroughfareNumberTo();
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo rhsThoroughfareNumberTo;
                rhsThoroughfareNumberTo = that.getThoroughfareNumberTo();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfareNumberTo", lhsThoroughfareNumberTo), LocatorUtils.property(thatLocator, "thoroughfareNumberTo", rhsThoroughfareNumberTo), lhsThoroughfareNumberTo, rhsThoroughfareNumberTo)) {
                    return false;
                }
            }
            {
                String lhsRangeType;
                lhsRangeType = this.getRangeType();
                String rhsRangeType;
                rhsRangeType = that.getRangeType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "rangeType", lhsRangeType), LocatorUtils.property(thatLocator, "rangeType", rhsRangeType), lhsRangeType, rhsRangeType)) {
                    return false;
                }
            }
            {
                String lhsIndicator;
                lhsIndicator = this.getIndicator();
                String rhsIndicator;
                rhsIndicator = that.getIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "indicator", lhsIndicator), LocatorUtils.property(thatLocator, "indicator", rhsIndicator), lhsIndicator, rhsIndicator)) {
                    return false;
                }
            }
            {
                String lhsSeparator;
                lhsSeparator = this.getSeparator();
                String rhsSeparator;
                rhsSeparator = that.getSeparator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "separator", lhsSeparator), LocatorUtils.property(thatLocator, "separator", rhsSeparator), lhsSeparator, rhsSeparator)) {
                    return false;
                }
            }
            {
                String lhsIndicatorOccurrence;
                lhsIndicatorOccurrence = this.getIndicatorOccurrence();
                String rhsIndicatorOccurrence;
                rhsIndicatorOccurrence = that.getIndicatorOccurrence();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "indicatorOccurrence", lhsIndicatorOccurrence), LocatorUtils.property(thatLocator, "indicatorOccurrence", rhsIndicatorOccurrence), lhsIndicatorOccurrence, rhsIndicatorOccurrence)) {
                    return false;
                }
            }
            {
                String lhsNumberRangeOccurrence;
                lhsNumberRangeOccurrence = this.getNumberRangeOccurrence();
                String rhsNumberRangeOccurrence;
                rhsNumberRangeOccurrence = that.getNumberRangeOccurrence();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "numberRangeOccurrence", lhsNumberRangeOccurrence), LocatorUtils.property(thatLocator, "numberRangeOccurrence", rhsNumberRangeOccurrence), lhsNumberRangeOccurrence, rhsNumberRangeOccurrence)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AddressLineElement> theAddressLine;
                theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
            }
            {
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom theThoroughfareNumberFrom;
                theThoroughfareNumberFrom = this.getThoroughfareNumberFrom();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareNumberFrom", theThoroughfareNumberFrom), currentHashCode, theThoroughfareNumberFrom);
            }
            {
                ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo theThoroughfareNumberTo;
                theThoroughfareNumberTo = this.getThoroughfareNumberTo();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfareNumberTo", theThoroughfareNumberTo), currentHashCode, theThoroughfareNumberTo);
            }
            {
                String theRangeType;
                theRangeType = this.getRangeType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rangeType", theRangeType), currentHashCode, theRangeType);
            }
            {
                String theIndicator;
                theIndicator = this.getIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicator", theIndicator), currentHashCode, theIndicator);
            }
            {
                String theSeparator;
                theSeparator = this.getSeparator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "separator", theSeparator), currentHashCode, theSeparator);
            }
            {
                String theIndicatorOccurrence;
                theIndicatorOccurrence = this.getIndicatorOccurrence();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicatorOccurrence", theIndicatorOccurrence), currentHashCode, theIndicatorOccurrence);
            }
            {
                String theNumberRangeOccurrence;
                theNumberRangeOccurrence = this.getNumberRangeOccurrence();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberRangeOccurrence", theNumberRangeOccurrence), currentHashCode, theNumberRangeOccurrence);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ThoroughfareElement.ThoroughfareNumberRange) {
                final ThoroughfareElement.ThoroughfareNumberRange copy = ((ThoroughfareElement.ThoroughfareNumberRange) draftCopy);
                if (this.isSetAddressLine()) {
                    List<AddressLineElement> sourceAddressLine;
                    sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                    @SuppressWarnings("unchecked")
                    List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                    copy.unsetAddressLine();
                    if (copyAddressLine!= null) {
                        List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                        uniqueAddressLinel.addAll(copyAddressLine);
                    }
                } else {
                    copy.unsetAddressLine();
                }
                if (this.isSetThoroughfareNumberFrom()) {
                    ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom sourceThoroughfareNumberFrom;
                    sourceThoroughfareNumberFrom = this.getThoroughfareNumberFrom();
                    ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom copyThoroughfareNumberFrom = ((ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom) strategy.copy(LocatorUtils.property(locator, "thoroughfareNumberFrom", sourceThoroughfareNumberFrom), sourceThoroughfareNumberFrom));
                    copy.setThoroughfareNumberFrom(copyThoroughfareNumberFrom);
                } else {
                    copy.thoroughfareNumberFrom = null;
                }
                if (this.isSetThoroughfareNumberTo()) {
                    ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo sourceThoroughfareNumberTo;
                    sourceThoroughfareNumberTo = this.getThoroughfareNumberTo();
                    ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo copyThoroughfareNumberTo = ((ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo) strategy.copy(LocatorUtils.property(locator, "thoroughfareNumberTo", sourceThoroughfareNumberTo), sourceThoroughfareNumberTo));
                    copy.setThoroughfareNumberTo(copyThoroughfareNumberTo);
                } else {
                    copy.thoroughfareNumberTo = null;
                }
                if (this.isSetRangeType()) {
                    String sourceRangeType;
                    sourceRangeType = this.getRangeType();
                    String copyRangeType = ((String) strategy.copy(LocatorUtils.property(locator, "rangeType", sourceRangeType), sourceRangeType));
                    copy.setRangeType(copyRangeType);
                } else {
                    copy.rangeType = null;
                }
                if (this.isSetIndicator()) {
                    String sourceIndicator;
                    sourceIndicator = this.getIndicator();
                    String copyIndicator = ((String) strategy.copy(LocatorUtils.property(locator, "indicator", sourceIndicator), sourceIndicator));
                    copy.setIndicator(copyIndicator);
                } else {
                    copy.indicator = null;
                }
                if (this.isSetSeparator()) {
                    String sourceSeparator;
                    sourceSeparator = this.getSeparator();
                    String copySeparator = ((String) strategy.copy(LocatorUtils.property(locator, "separator", sourceSeparator), sourceSeparator));
                    copy.setSeparator(copySeparator);
                } else {
                    copy.separator = null;
                }
                if (this.isSetIndicatorOccurrence()) {
                    String sourceIndicatorOccurrence;
                    sourceIndicatorOccurrence = this.getIndicatorOccurrence();
                    String copyIndicatorOccurrence = ((String) strategy.copy(LocatorUtils.property(locator, "indicatorOccurrence", sourceIndicatorOccurrence), sourceIndicatorOccurrence));
                    copy.setIndicatorOccurrence(copyIndicatorOccurrence);
                } else {
                    copy.indicatorOccurrence = null;
                }
                if (this.isSetNumberRangeOccurrence()) {
                    String sourceNumberRangeOccurrence;
                    sourceNumberRangeOccurrence = this.getNumberRangeOccurrence();
                    String copyNumberRangeOccurrence = ((String) strategy.copy(LocatorUtils.property(locator, "numberRangeOccurrence", sourceNumberRangeOccurrence), sourceNumberRangeOccurrence));
                    copy.setNumberRangeOccurrence(copyNumberRangeOccurrence);
                } else {
                    copy.numberRangeOccurrence = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ThoroughfareElement.ThoroughfareNumberRange();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber" maxOccurs="unbounded"/&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
         *       &lt;/sequence&gt;
         *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
         *       &lt;anyAttribute namespace='##other'/&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "content"
        })
        public static class ThoroughfareNumberFrom
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElementRefs({
                @XmlElementRef(name = "ThoroughfareNumberSuffix", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = ThoroughfareNumberSuffixElement.class),
                @XmlElementRef(name = "ThoroughfareNumberPrefix", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = ThoroughfareNumberPrefixElement.class),
                @XmlElementRef(name = "AddressLine", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = AddressLineElement.class),
                @XmlElementRef(name = "ThoroughfareNumber", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = ThoroughfareNumberElement.class)
            })
            @XmlMixed
            protected List<Object> content;
            @XmlAttribute(name = "Code")
            @XmlSchemaType(name = "anySimpleType")
            protected String code;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<QName, String>();

            /**
             * Gets the value of the content property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the content property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getContent().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link ThoroughfareNumberSuffixElement }
             * {@link ThoroughfareNumberPrefixElement }
             * {@link ThoroughfareNumberElement }
             * {@link String }
             * {@link AddressLineElement }
             * 
             * 
             */
            public List<Object> getContent() {
                if (content == null) {
                    content = new ArrayList<Object>();
                }
                return this.content;
            }

            public boolean isSetContent() {
                return ((this.content!= null)&&(!this.content.isEmpty()));
            }

            public void unsetContent() {
                this.content = null;
            }

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            public boolean isSetCode() {
                return (this.code!= null);
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<Object> theContent;
                    theContent = (this.isSetContent()?this.getContent():null);
                    strategy.appendField(locator, this, "content", buffer, theContent);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom that = ((ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom) object);
                {
                    List<Object> lhsContent;
                    lhsContent = (this.isSetContent()?this.getContent():null);
                    List<Object> rhsContent;
                    rhsContent = (that.isSetContent()?that.getContent():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                        return false;
                    }
                }
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<Object> theContent;
                    theContent = (this.isSetContent()?this.getContent():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom) {
                    final ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom copy = ((ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom) draftCopy);
                    if (this.isSetContent()) {
                        List<Object> sourceContent;
                        sourceContent = (this.isSetContent()?this.getContent():null);
                        @SuppressWarnings("unchecked")
                        List<Object> copyContent = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                        copy.unsetContent();
                        if (copyContent!= null) {
                            List<Object> uniqueContentl = copy.getContent();
                            uniqueContentl.addAll(copyContent);
                        }
                    } else {
                        copy.unsetContent();
                    }
                    if (this.isSetCode()) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberFrom();
            }

        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;sequence&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberPrefix" maxOccurs="unbounded" minOccurs="0"/&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumber" maxOccurs="unbounded"/&gt;
         *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}ThoroughfareNumberSuffix" maxOccurs="unbounded" minOccurs="0"/&gt;
         *       &lt;/sequence&gt;
         *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
         *       &lt;anyAttribute namespace='##other'/&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "content"
        })
        public static class ThoroughfareNumberTo
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlElementRefs({
                @XmlElementRef(name = "ThoroughfareNumberSuffix", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = ThoroughfareNumberSuffixElement.class),
                @XmlElementRef(name = "ThoroughfareNumberPrefix", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = ThoroughfareNumberPrefixElement.class),
                @XmlElementRef(name = "AddressLine", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = AddressLineElement.class),
                @XmlElementRef(name = "ThoroughfareNumber", namespace = "urn:oasis:names:tc:ciq:xsdschema:xAL:2.0", type = ThoroughfareNumberElement.class)
            })
            @XmlMixed
            protected List<Object> content;
            @XmlAttribute(name = "Code")
            @XmlSchemaType(name = "anySimpleType")
            protected String code;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<QName, String>();

            /**
             * Gets the value of the content property.
             * 
             * <p>
             * This accessor method returns a reference to the live list,
             * not a snapshot. Therefore any modification you make to the
             * returned list will be present inside the JAXB object.
             * This is why there is not a <CODE>set</CODE> method for the content property.
             * 
             * <p>
             * For example, to add a new item, do as follows:
             * <pre>
             *    getContent().add(newItem);
             * </pre>
             * 
             * 
             * <p>
             * Objects of the following type(s) are allowed in the list
             * {@link ThoroughfareNumberSuffixElement }
             * {@link ThoroughfareNumberPrefixElement }
             * {@link ThoroughfareNumberElement }
             * {@link String }
             * {@link AddressLineElement }
             * 
             * 
             */
            public List<Object> getContent() {
                if (content == null) {
                    content = new ArrayList<Object>();
                }
                return this.content;
            }

            public boolean isSetContent() {
                return ((this.content!= null)&&(!this.content.isEmpty()));
            }

            public void unsetContent() {
                this.content = null;
            }

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            public boolean isSetCode() {
                return (this.code!= null);
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    List<Object> theContent;
                    theContent = (this.isSetContent()?this.getContent():null);
                    strategy.appendField(locator, this, "content", buffer, theContent);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo that = ((ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo) object);
                {
                    List<Object> lhsContent;
                    lhsContent = (this.isSetContent()?this.getContent():null);
                    List<Object> rhsContent;
                    rhsContent = (that.isSetContent()?that.getContent():null);
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                        return false;
                    }
                }
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    List<Object> theContent;
                    theContent = (this.isSetContent()?this.getContent():null);
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo) {
                    final ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo copy = ((ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo) draftCopy);
                    if (this.isSetContent()) {
                        List<Object> sourceContent;
                        sourceContent = (this.isSetContent()?this.getContent():null);
                        @SuppressWarnings("unchecked")
                        List<Object> copyContent = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                        copy.unsetContent();
                        if (copyContent!= null) {
                            List<Object> uniqueContentl = copy.getContent();
                            uniqueContentl.addAll(copyContent);
                        }
                    } else {
                        copy.unsetContent();
                    }
                    if (this.isSetCode()) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new ThoroughfareElement.ThoroughfareNumberRange.ThoroughfareNumberTo();
            }

        }

    }

}
