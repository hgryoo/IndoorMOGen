//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package oasis.names.tc.ciq.xsdschema.xal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for DependentLocalityType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DependentLocalityType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="DependentLocalityName" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="DependentLocalityNumber" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;attribute name="NameNumberOccurrence"&gt;
 *                   &lt;simpleType&gt;
 *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                       &lt;enumeration value="Before"/&gt;
 *                       &lt;enumeration value="After"/&gt;
 *                     &lt;/restriction&gt;
 *                   &lt;/simpleType&gt;
 *                 &lt;/attribute&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostBox"/&gt;
 *           &lt;element name="LargeMailUser" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}LargeMailUserType"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostOffice"/&gt;
 *           &lt;element name="PostalRoute" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalRouteType"/&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}Thoroughfare" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}Premise" minOccurs="0"/&gt;
 *         &lt;element name="DependentLocality" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}DependentLocalityType" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalCode" minOccurs="0"/&gt;
 *         &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="UsageType" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="Connector" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;anyAttribute namespace='##other'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DependentLocalityType", propOrder = {
    "addressLine",
    "dependentLocalityName",
    "dependentLocalityNumber",
    "postBox",
    "largeMailUser",
    "postOffice",
    "postalRoute",
    "thoroughfare",
    "premise",
    "dependentLocality",
    "postalCode",
    "any"
})
public class DependentLocalityType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AddressLine")
    protected List<AddressLineElement> addressLine;
    @XmlElement(name = "DependentLocalityName")
    protected List<DependentLocalityType.DependentLocalityName> dependentLocalityName;
    @XmlElement(name = "DependentLocalityNumber")
    protected DependentLocalityType.DependentLocalityNumber dependentLocalityNumber;
    @XmlElement(name = "PostBox")
    protected PostBoxElement postBox;
    @XmlElement(name = "LargeMailUser")
    protected LargeMailUserType largeMailUser;
    @XmlElement(name = "PostOffice")
    protected PostOfficeElement postOffice;
    @XmlElement(name = "PostalRoute")
    protected PostalRouteType postalRoute;
    @XmlElement(name = "Thoroughfare")
    protected ThoroughfareElement thoroughfare;
    @XmlElement(name = "Premise")
    protected PremiseElement premise;
    @XmlElement(name = "DependentLocality")
    protected DependentLocalityType dependentLocality;
    @XmlElement(name = "PostalCode")
    protected PostalCodeElement postalCode;
    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "Type")
    @XmlSchemaType(name = "anySimpleType")
    protected String type;
    @XmlAttribute(name = "UsageType")
    @XmlSchemaType(name = "anySimpleType")
    protected String usageType;
    @XmlAttribute(name = "Connector")
    @XmlSchemaType(name = "anySimpleType")
    protected String connector;
    @XmlAttribute(name = "Indicator")
    @XmlSchemaType(name = "anySimpleType")
    protected String indicator;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the addressLine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addressLine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressLine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressLineElement }
     * 
     * 
     */
    public List<AddressLineElement> getAddressLine() {
        if (addressLine == null) {
            addressLine = new ArrayList<AddressLineElement>();
        }
        return this.addressLine;
    }

    public boolean isSetAddressLine() {
        return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
    }

    public void unsetAddressLine() {
        this.addressLine = null;
    }

    /**
     * Gets the value of the dependentLocalityName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dependentLocalityName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDependentLocalityName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DependentLocalityType.DependentLocalityName }
     * 
     * 
     */
    public List<DependentLocalityType.DependentLocalityName> getDependentLocalityName() {
        if (dependentLocalityName == null) {
            dependentLocalityName = new ArrayList<DependentLocalityType.DependentLocalityName>();
        }
        return this.dependentLocalityName;
    }

    public boolean isSetDependentLocalityName() {
        return ((this.dependentLocalityName!= null)&&(!this.dependentLocalityName.isEmpty()));
    }

    public void unsetDependentLocalityName() {
        this.dependentLocalityName = null;
    }

    /**
     * Gets the value of the dependentLocalityNumber property.
     * 
     * @return
     *     possible object is
     *     {@link DependentLocalityType.DependentLocalityNumber }
     *     
     */
    public DependentLocalityType.DependentLocalityNumber getDependentLocalityNumber() {
        return dependentLocalityNumber;
    }

    /**
     * Sets the value of the dependentLocalityNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link DependentLocalityType.DependentLocalityNumber }
     *     
     */
    public void setDependentLocalityNumber(DependentLocalityType.DependentLocalityNumber value) {
        this.dependentLocalityNumber = value;
    }

    public boolean isSetDependentLocalityNumber() {
        return (this.dependentLocalityNumber!= null);
    }

    /**
     * Gets the value of the postBox property.
     * 
     * @return
     *     possible object is
     *     {@link PostBoxElement }
     *     
     */
    public PostBoxElement getPostBox() {
        return postBox;
    }

    /**
     * Sets the value of the postBox property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostBoxElement }
     *     
     */
    public void setPostBox(PostBoxElement value) {
        this.postBox = value;
    }

    public boolean isSetPostBox() {
        return (this.postBox!= null);
    }

    /**
     * Gets the value of the largeMailUser property.
     * 
     * @return
     *     possible object is
     *     {@link LargeMailUserType }
     *     
     */
    public LargeMailUserType getLargeMailUser() {
        return largeMailUser;
    }

    /**
     * Sets the value of the largeMailUser property.
     * 
     * @param value
     *     allowed object is
     *     {@link LargeMailUserType }
     *     
     */
    public void setLargeMailUser(LargeMailUserType value) {
        this.largeMailUser = value;
    }

    public boolean isSetLargeMailUser() {
        return (this.largeMailUser!= null);
    }

    /**
     * Gets the value of the postOffice property.
     * 
     * @return
     *     possible object is
     *     {@link PostOfficeElement }
     *     
     */
    public PostOfficeElement getPostOffice() {
        return postOffice;
    }

    /**
     * Sets the value of the postOffice property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostOfficeElement }
     *     
     */
    public void setPostOffice(PostOfficeElement value) {
        this.postOffice = value;
    }

    public boolean isSetPostOffice() {
        return (this.postOffice!= null);
    }

    /**
     * Gets the value of the postalRoute property.
     * 
     * @return
     *     possible object is
     *     {@link PostalRouteType }
     *     
     */
    public PostalRouteType getPostalRoute() {
        return postalRoute;
    }

    /**
     * Sets the value of the postalRoute property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostalRouteType }
     *     
     */
    public void setPostalRoute(PostalRouteType value) {
        this.postalRoute = value;
    }

    public boolean isSetPostalRoute() {
        return (this.postalRoute!= null);
    }

    /**
     * Gets the value of the thoroughfare property.
     * 
     * @return
     *     possible object is
     *     {@link ThoroughfareElement }
     *     
     */
    public ThoroughfareElement getThoroughfare() {
        return thoroughfare;
    }

    /**
     * Sets the value of the thoroughfare property.
     * 
     * @param value
     *     allowed object is
     *     {@link ThoroughfareElement }
     *     
     */
    public void setThoroughfare(ThoroughfareElement value) {
        this.thoroughfare = value;
    }

    public boolean isSetThoroughfare() {
        return (this.thoroughfare!= null);
    }

    /**
     * Gets the value of the premise property.
     * 
     * @return
     *     possible object is
     *     {@link PremiseElement }
     *     
     */
    public PremiseElement getPremise() {
        return premise;
    }

    /**
     * Sets the value of the premise property.
     * 
     * @param value
     *     allowed object is
     *     {@link PremiseElement }
     *     
     */
    public void setPremise(PremiseElement value) {
        this.premise = value;
    }

    public boolean isSetPremise() {
        return (this.premise!= null);
    }

    /**
     * Gets the value of the dependentLocality property.
     * 
     * @return
     *     possible object is
     *     {@link DependentLocalityType }
     *     
     */
    public DependentLocalityType getDependentLocality() {
        return dependentLocality;
    }

    /**
     * Sets the value of the dependentLocality property.
     * 
     * @param value
     *     allowed object is
     *     {@link DependentLocalityType }
     *     
     */
    public void setDependentLocality(DependentLocalityType value) {
        this.dependentLocality = value;
    }

    public boolean isSetDependentLocality() {
        return (this.dependentLocality!= null);
    }

    /**
     * Gets the value of the postalCode property.
     * 
     * @return
     *     possible object is
     *     {@link PostalCodeElement }
     *     
     */
    public PostalCodeElement getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the value of the postalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostalCodeElement }
     *     
     */
    public void setPostalCode(PostalCodeElement value) {
        this.postalCode = value;
    }

    public boolean isSetPostalCode() {
        return (this.postalCode!= null);
    }

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    public boolean isSetAny() {
        return ((this.any!= null)&&(!this.any.isEmpty()));
    }

    public void unsetAny() {
        this.any = null;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets the value of the usageType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUsageType() {
        return usageType;
    }

    /**
     * Sets the value of the usageType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUsageType(String value) {
        this.usageType = value;
    }

    public boolean isSetUsageType() {
        return (this.usageType!= null);
    }

    /**
     * Gets the value of the connector property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getConnector() {
        return connector;
    }

    /**
     * Sets the value of the connector property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setConnector(String value) {
        this.connector = value;
    }

    public boolean isSetConnector() {
        return (this.connector!= null);
    }

    /**
     * Gets the value of the indicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndicator() {
        return indicator;
    }

    /**
     * Sets the value of the indicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndicator(String value) {
        this.indicator = value;
    }

    public boolean isSetIndicator() {
        return (this.indicator!= null);
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
        }
        {
            List<DependentLocalityType.DependentLocalityName> theDependentLocalityName;
            theDependentLocalityName = (this.isSetDependentLocalityName()?this.getDependentLocalityName():null);
            strategy.appendField(locator, this, "dependentLocalityName", buffer, theDependentLocalityName);
        }
        {
            DependentLocalityType.DependentLocalityNumber theDependentLocalityNumber;
            theDependentLocalityNumber = this.getDependentLocalityNumber();
            strategy.appendField(locator, this, "dependentLocalityNumber", buffer, theDependentLocalityNumber);
        }
        {
            PostBoxElement thePostBox;
            thePostBox = this.getPostBox();
            strategy.appendField(locator, this, "postBox", buffer, thePostBox);
        }
        {
            LargeMailUserType theLargeMailUser;
            theLargeMailUser = this.getLargeMailUser();
            strategy.appendField(locator, this, "largeMailUser", buffer, theLargeMailUser);
        }
        {
            PostOfficeElement thePostOffice;
            thePostOffice = this.getPostOffice();
            strategy.appendField(locator, this, "postOffice", buffer, thePostOffice);
        }
        {
            PostalRouteType thePostalRoute;
            thePostalRoute = this.getPostalRoute();
            strategy.appendField(locator, this, "postalRoute", buffer, thePostalRoute);
        }
        {
            ThoroughfareElement theThoroughfare;
            theThoroughfare = this.getThoroughfare();
            strategy.appendField(locator, this, "thoroughfare", buffer, theThoroughfare);
        }
        {
            PremiseElement thePremise;
            thePremise = this.getPremise();
            strategy.appendField(locator, this, "premise", buffer, thePremise);
        }
        {
            DependentLocalityType theDependentLocality;
            theDependentLocality = this.getDependentLocality();
            strategy.appendField(locator, this, "dependentLocality", buffer, theDependentLocality);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            String theUsageType;
            theUsageType = this.getUsageType();
            strategy.appendField(locator, this, "usageType", buffer, theUsageType);
        }
        {
            String theConnector;
            theConnector = this.getConnector();
            strategy.appendField(locator, this, "connector", buffer, theConnector);
        }
        {
            String theIndicator;
            theIndicator = this.getIndicator();
            strategy.appendField(locator, this, "indicator", buffer, theIndicator);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DependentLocalityType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DependentLocalityType that = ((DependentLocalityType) object);
        {
            List<AddressLineElement> lhsAddressLine;
            lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            List<AddressLineElement> rhsAddressLine;
            rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                return false;
            }
        }
        {
            List<DependentLocalityType.DependentLocalityName> lhsDependentLocalityName;
            lhsDependentLocalityName = (this.isSetDependentLocalityName()?this.getDependentLocalityName():null);
            List<DependentLocalityType.DependentLocalityName> rhsDependentLocalityName;
            rhsDependentLocalityName = (that.isSetDependentLocalityName()?that.getDependentLocalityName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentLocalityName", lhsDependentLocalityName), LocatorUtils.property(thatLocator, "dependentLocalityName", rhsDependentLocalityName), lhsDependentLocalityName, rhsDependentLocalityName)) {
                return false;
            }
        }
        {
            DependentLocalityType.DependentLocalityNumber lhsDependentLocalityNumber;
            lhsDependentLocalityNumber = this.getDependentLocalityNumber();
            DependentLocalityType.DependentLocalityNumber rhsDependentLocalityNumber;
            rhsDependentLocalityNumber = that.getDependentLocalityNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentLocalityNumber", lhsDependentLocalityNumber), LocatorUtils.property(thatLocator, "dependentLocalityNumber", rhsDependentLocalityNumber), lhsDependentLocalityNumber, rhsDependentLocalityNumber)) {
                return false;
            }
        }
        {
            PostBoxElement lhsPostBox;
            lhsPostBox = this.getPostBox();
            PostBoxElement rhsPostBox;
            rhsPostBox = that.getPostBox();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postBox", lhsPostBox), LocatorUtils.property(thatLocator, "postBox", rhsPostBox), lhsPostBox, rhsPostBox)) {
                return false;
            }
        }
        {
            LargeMailUserType lhsLargeMailUser;
            lhsLargeMailUser = this.getLargeMailUser();
            LargeMailUserType rhsLargeMailUser;
            rhsLargeMailUser = that.getLargeMailUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "largeMailUser", lhsLargeMailUser), LocatorUtils.property(thatLocator, "largeMailUser", rhsLargeMailUser), lhsLargeMailUser, rhsLargeMailUser)) {
                return false;
            }
        }
        {
            PostOfficeElement lhsPostOffice;
            lhsPostOffice = this.getPostOffice();
            PostOfficeElement rhsPostOffice;
            rhsPostOffice = that.getPostOffice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postOffice", lhsPostOffice), LocatorUtils.property(thatLocator, "postOffice", rhsPostOffice), lhsPostOffice, rhsPostOffice)) {
                return false;
            }
        }
        {
            PostalRouteType lhsPostalRoute;
            lhsPostalRoute = this.getPostalRoute();
            PostalRouteType rhsPostalRoute;
            rhsPostalRoute = that.getPostalRoute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalRoute", lhsPostalRoute), LocatorUtils.property(thatLocator, "postalRoute", rhsPostalRoute), lhsPostalRoute, rhsPostalRoute)) {
                return false;
            }
        }
        {
            ThoroughfareElement lhsThoroughfare;
            lhsThoroughfare = this.getThoroughfare();
            ThoroughfareElement rhsThoroughfare;
            rhsThoroughfare = that.getThoroughfare();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thoroughfare", lhsThoroughfare), LocatorUtils.property(thatLocator, "thoroughfare", rhsThoroughfare), lhsThoroughfare, rhsThoroughfare)) {
                return false;
            }
        }
        {
            PremiseElement lhsPremise;
            lhsPremise = this.getPremise();
            PremiseElement rhsPremise;
            rhsPremise = that.getPremise();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "premise", lhsPremise), LocatorUtils.property(thatLocator, "premise", rhsPremise), lhsPremise, rhsPremise)) {
                return false;
            }
        }
        {
            DependentLocalityType lhsDependentLocality;
            lhsDependentLocality = this.getDependentLocality();
            DependentLocalityType rhsDependentLocality;
            rhsDependentLocality = that.getDependentLocality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependentLocality", lhsDependentLocality), LocatorUtils.property(thatLocator, "dependentLocality", rhsDependentLocality), lhsDependentLocality, rhsDependentLocality)) {
                return false;
            }
        }
        {
            PostalCodeElement lhsPostalCode;
            lhsPostalCode = this.getPostalCode();
            PostalCodeElement rhsPostalCode;
            rhsPostalCode = that.getPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                return false;
            }
        }
        {
            List<Object> lhsAny;
            lhsAny = (this.isSetAny()?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (that.isSetAny()?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            String lhsUsageType;
            lhsUsageType = this.getUsageType();
            String rhsUsageType;
            rhsUsageType = that.getUsageType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usageType", lhsUsageType), LocatorUtils.property(thatLocator, "usageType", rhsUsageType), lhsUsageType, rhsUsageType)) {
                return false;
            }
        }
        {
            String lhsConnector;
            lhsConnector = this.getConnector();
            String rhsConnector;
            rhsConnector = that.getConnector();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "connector", lhsConnector), LocatorUtils.property(thatLocator, "connector", rhsConnector), lhsConnector, rhsConnector)) {
                return false;
            }
        }
        {
            String lhsIndicator;
            lhsIndicator = this.getIndicator();
            String rhsIndicator;
            rhsIndicator = that.getIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indicator", lhsIndicator), LocatorUtils.property(thatLocator, "indicator", rhsIndicator), lhsIndicator, rhsIndicator)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
        }
        {
            List<DependentLocalityType.DependentLocalityName> theDependentLocalityName;
            theDependentLocalityName = (this.isSetDependentLocalityName()?this.getDependentLocalityName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentLocalityName", theDependentLocalityName), currentHashCode, theDependentLocalityName);
        }
        {
            DependentLocalityType.DependentLocalityNumber theDependentLocalityNumber;
            theDependentLocalityNumber = this.getDependentLocalityNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentLocalityNumber", theDependentLocalityNumber), currentHashCode, theDependentLocalityNumber);
        }
        {
            PostBoxElement thePostBox;
            thePostBox = this.getPostBox();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postBox", thePostBox), currentHashCode, thePostBox);
        }
        {
            LargeMailUserType theLargeMailUser;
            theLargeMailUser = this.getLargeMailUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "largeMailUser", theLargeMailUser), currentHashCode, theLargeMailUser);
        }
        {
            PostOfficeElement thePostOffice;
            thePostOffice = this.getPostOffice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postOffice", thePostOffice), currentHashCode, thePostOffice);
        }
        {
            PostalRouteType thePostalRoute;
            thePostalRoute = this.getPostalRoute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalRoute", thePostalRoute), currentHashCode, thePostalRoute);
        }
        {
            ThoroughfareElement theThoroughfare;
            theThoroughfare = this.getThoroughfare();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thoroughfare", theThoroughfare), currentHashCode, theThoroughfare);
        }
        {
            PremiseElement thePremise;
            thePremise = this.getPremise();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "premise", thePremise), currentHashCode, thePremise);
        }
        {
            DependentLocalityType theDependentLocality;
            theDependentLocality = this.getDependentLocality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependentLocality", theDependentLocality), currentHashCode, theDependentLocality);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            String theUsageType;
            theUsageType = this.getUsageType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usageType", theUsageType), currentHashCode, theUsageType);
        }
        {
            String theConnector;
            theConnector = this.getConnector();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "connector", theConnector), currentHashCode, theConnector);
        }
        {
            String theIndicator;
            theIndicator = this.getIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicator", theIndicator), currentHashCode, theIndicator);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof DependentLocalityType) {
            final DependentLocalityType copy = ((DependentLocalityType) draftCopy);
            if (this.isSetAddressLine()) {
                List<AddressLineElement> sourceAddressLine;
                sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                @SuppressWarnings("unchecked")
                List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                copy.unsetAddressLine();
                if (copyAddressLine!= null) {
                    List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                    uniqueAddressLinel.addAll(copyAddressLine);
                }
            } else {
                copy.unsetAddressLine();
            }
            if (this.isSetDependentLocalityName()) {
                List<DependentLocalityType.DependentLocalityName> sourceDependentLocalityName;
                sourceDependentLocalityName = (this.isSetDependentLocalityName()?this.getDependentLocalityName():null);
                @SuppressWarnings("unchecked")
                List<DependentLocalityType.DependentLocalityName> copyDependentLocalityName = ((List<DependentLocalityType.DependentLocalityName> ) strategy.copy(LocatorUtils.property(locator, "dependentLocalityName", sourceDependentLocalityName), sourceDependentLocalityName));
                copy.unsetDependentLocalityName();
                if (copyDependentLocalityName!= null) {
                    List<DependentLocalityType.DependentLocalityName> uniqueDependentLocalityNamel = copy.getDependentLocalityName();
                    uniqueDependentLocalityNamel.addAll(copyDependentLocalityName);
                }
            } else {
                copy.unsetDependentLocalityName();
            }
            if (this.isSetDependentLocalityNumber()) {
                DependentLocalityType.DependentLocalityNumber sourceDependentLocalityNumber;
                sourceDependentLocalityNumber = this.getDependentLocalityNumber();
                DependentLocalityType.DependentLocalityNumber copyDependentLocalityNumber = ((DependentLocalityType.DependentLocalityNumber) strategy.copy(LocatorUtils.property(locator, "dependentLocalityNumber", sourceDependentLocalityNumber), sourceDependentLocalityNumber));
                copy.setDependentLocalityNumber(copyDependentLocalityNumber);
            } else {
                copy.dependentLocalityNumber = null;
            }
            if (this.isSetPostBox()) {
                PostBoxElement sourcePostBox;
                sourcePostBox = this.getPostBox();
                PostBoxElement copyPostBox = ((PostBoxElement) strategy.copy(LocatorUtils.property(locator, "postBox", sourcePostBox), sourcePostBox));
                copy.setPostBox(copyPostBox);
            } else {
                copy.postBox = null;
            }
            if (this.isSetLargeMailUser()) {
                LargeMailUserType sourceLargeMailUser;
                sourceLargeMailUser = this.getLargeMailUser();
                LargeMailUserType copyLargeMailUser = ((LargeMailUserType) strategy.copy(LocatorUtils.property(locator, "largeMailUser", sourceLargeMailUser), sourceLargeMailUser));
                copy.setLargeMailUser(copyLargeMailUser);
            } else {
                copy.largeMailUser = null;
            }
            if (this.isSetPostOffice()) {
                PostOfficeElement sourcePostOffice;
                sourcePostOffice = this.getPostOffice();
                PostOfficeElement copyPostOffice = ((PostOfficeElement) strategy.copy(LocatorUtils.property(locator, "postOffice", sourcePostOffice), sourcePostOffice));
                copy.setPostOffice(copyPostOffice);
            } else {
                copy.postOffice = null;
            }
            if (this.isSetPostalRoute()) {
                PostalRouteType sourcePostalRoute;
                sourcePostalRoute = this.getPostalRoute();
                PostalRouteType copyPostalRoute = ((PostalRouteType) strategy.copy(LocatorUtils.property(locator, "postalRoute", sourcePostalRoute), sourcePostalRoute));
                copy.setPostalRoute(copyPostalRoute);
            } else {
                copy.postalRoute = null;
            }
            if (this.isSetThoroughfare()) {
                ThoroughfareElement sourceThoroughfare;
                sourceThoroughfare = this.getThoroughfare();
                ThoroughfareElement copyThoroughfare = ((ThoroughfareElement) strategy.copy(LocatorUtils.property(locator, "thoroughfare", sourceThoroughfare), sourceThoroughfare));
                copy.setThoroughfare(copyThoroughfare);
            } else {
                copy.thoroughfare = null;
            }
            if (this.isSetPremise()) {
                PremiseElement sourcePremise;
                sourcePremise = this.getPremise();
                PremiseElement copyPremise = ((PremiseElement) strategy.copy(LocatorUtils.property(locator, "premise", sourcePremise), sourcePremise));
                copy.setPremise(copyPremise);
            } else {
                copy.premise = null;
            }
            if (this.isSetDependentLocality()) {
                DependentLocalityType sourceDependentLocality;
                sourceDependentLocality = this.getDependentLocality();
                DependentLocalityType copyDependentLocality = ((DependentLocalityType) strategy.copy(LocatorUtils.property(locator, "dependentLocality", sourceDependentLocality), sourceDependentLocality));
                copy.setDependentLocality(copyDependentLocality);
            } else {
                copy.dependentLocality = null;
            }
            if (this.isSetPostalCode()) {
                PostalCodeElement sourcePostalCode;
                sourcePostalCode = this.getPostalCode();
                PostalCodeElement copyPostalCode = ((PostalCodeElement) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                copy.setPostalCode(copyPostalCode);
            } else {
                copy.postalCode = null;
            }
            if (this.isSetAny()) {
                List<Object> sourceAny;
                sourceAny = (this.isSetAny()?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.unsetAny();
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.unsetAny();
            }
            if (this.isSetType()) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.isSetUsageType()) {
                String sourceUsageType;
                sourceUsageType = this.getUsageType();
                String copyUsageType = ((String) strategy.copy(LocatorUtils.property(locator, "usageType", sourceUsageType), sourceUsageType));
                copy.setUsageType(copyUsageType);
            } else {
                copy.usageType = null;
            }
            if (this.isSetConnector()) {
                String sourceConnector;
                sourceConnector = this.getConnector();
                String copyConnector = ((String) strategy.copy(LocatorUtils.property(locator, "connector", sourceConnector), sourceConnector));
                copy.setConnector(copyConnector);
            } else {
                copy.connector = null;
            }
            if (this.isSetIndicator()) {
                String sourceIndicator;
                sourceIndicator = this.getIndicator();
                String copyIndicator = ((String) strategy.copy(LocatorUtils.property(locator, "indicator", sourceIndicator), sourceIndicator));
                copy.setIndicator(copyIndicator);
            } else {
                copy.indicator = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DependentLocalityType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class DependentLocalityName
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DependentLocalityType.DependentLocalityName)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DependentLocalityType.DependentLocalityName that = ((DependentLocalityType.DependentLocalityName) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DependentLocalityType.DependentLocalityName) {
                final DependentLocalityType.DependentLocalityName copy = ((DependentLocalityType.DependentLocalityName) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DependentLocalityType.DependentLocalityName();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="NameNumberOccurrence"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Before"/&gt;
     *             &lt;enumeration value="After"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class DependentLocalityNumber
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "NameNumberOccurrence")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String nameNumberOccurrence;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the nameNumberOccurrence property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNameNumberOccurrence() {
            return nameNumberOccurrence;
        }

        /**
         * Sets the value of the nameNumberOccurrence property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNameNumberOccurrence(String value) {
            this.nameNumberOccurrence = value;
        }

        public boolean isSetNameNumberOccurrence() {
            return (this.nameNumberOccurrence!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theNameNumberOccurrence;
                theNameNumberOccurrence = this.getNameNumberOccurrence();
                strategy.appendField(locator, this, "nameNumberOccurrence", buffer, theNameNumberOccurrence);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DependentLocalityType.DependentLocalityNumber)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DependentLocalityType.DependentLocalityNumber that = ((DependentLocalityType.DependentLocalityNumber) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsNameNumberOccurrence;
                lhsNameNumberOccurrence = this.getNameNumberOccurrence();
                String rhsNameNumberOccurrence;
                rhsNameNumberOccurrence = that.getNameNumberOccurrence();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "nameNumberOccurrence", lhsNameNumberOccurrence), LocatorUtils.property(thatLocator, "nameNumberOccurrence", rhsNameNumberOccurrence), lhsNameNumberOccurrence, rhsNameNumberOccurrence)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theNameNumberOccurrence;
                theNameNumberOccurrence = this.getNameNumberOccurrence();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nameNumberOccurrence", theNameNumberOccurrence), currentHashCode, theNameNumberOccurrence);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof DependentLocalityType.DependentLocalityNumber) {
                final DependentLocalityType.DependentLocalityNumber copy = ((DependentLocalityType.DependentLocalityNumber) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetNameNumberOccurrence()) {
                    String sourceNameNumberOccurrence;
                    sourceNameNumberOccurrence = this.getNameNumberOccurrence();
                    String copyNameNumberOccurrence = ((String) strategy.copy(LocatorUtils.property(locator, "nameNumberOccurrence", sourceNameNumberOccurrence), sourceNameNumberOccurrence));
                    copy.setNameNumberOccurrence(copyNameNumberOccurrence);
                } else {
                    copy.nameNumberOccurrence = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new DependentLocalityType.DependentLocalityNumber();
        }

    }

}
