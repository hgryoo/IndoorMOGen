//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package oasis.names.tc.ciq.xsdschema.xal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="AdministrativeAreaName" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SubAdministrativeArea" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="SubAdministrativeAreaName" maxOccurs="unbounded" minOccurs="0"&gt;
 *                     &lt;complexType&gt;
 *                       &lt;complexContent&gt;
 *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                           &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                           &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                           &lt;anyAttribute namespace='##other'/&gt;
 *                         &lt;/restriction&gt;
 *                       &lt;/complexContent&gt;
 *                     &lt;/complexType&gt;
 *                   &lt;/element&gt;
 *                   &lt;choice minOccurs="0"&gt;
 *                     &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}Locality"/&gt;
 *                     &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostOffice"/&gt;
 *                     &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalCode"/&gt;
 *                   &lt;/choice&gt;
 *                   &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;attribute name="UsageType" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}Locality"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostOffice"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalCode"/&gt;
 *         &lt;/choice&gt;
 *         &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="UsageType" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;anyAttribute namespace='##other'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "addressLine",
    "administrativeAreaName",
    "subAdministrativeArea",
    "locality",
    "postOffice",
    "postalCode",
    "any"
})
@XmlRootElement(name = "AdministrativeArea")
public class AdministrativeAreaElement
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AddressLine")
    protected List<AddressLineElement> addressLine;
    @XmlElement(name = "AdministrativeAreaName")
    protected List<AdministrativeAreaElement.AdministrativeAreaName> administrativeAreaName;
    @XmlElement(name = "SubAdministrativeArea")
    protected AdministrativeAreaElement.SubAdministrativeArea subAdministrativeArea;
    @XmlElement(name = "Locality")
    protected LocalityElement locality;
    @XmlElement(name = "PostOffice")
    protected PostOfficeElement postOffice;
    @XmlElement(name = "PostalCode")
    protected PostalCodeElement postalCode;
    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "Type")
    @XmlSchemaType(name = "anySimpleType")
    protected String type;
    @XmlAttribute(name = "UsageType")
    @XmlSchemaType(name = "anySimpleType")
    protected String usageType;
    @XmlAttribute(name = "Indicator")
    @XmlSchemaType(name = "anySimpleType")
    protected String indicator;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the addressLine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addressLine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressLine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressLineElement }
     * 
     * 
     */
    public List<AddressLineElement> getAddressLine() {
        if (addressLine == null) {
            addressLine = new ArrayList<AddressLineElement>();
        }
        return this.addressLine;
    }

    public boolean isSetAddressLine() {
        return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
    }

    public void unsetAddressLine() {
        this.addressLine = null;
    }

    /**
     * Gets the value of the administrativeAreaName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the administrativeAreaName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAdministrativeAreaName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdministrativeAreaElement.AdministrativeAreaName }
     * 
     * 
     */
    public List<AdministrativeAreaElement.AdministrativeAreaName> getAdministrativeAreaName() {
        if (administrativeAreaName == null) {
            administrativeAreaName = new ArrayList<AdministrativeAreaElement.AdministrativeAreaName>();
        }
        return this.administrativeAreaName;
    }

    public boolean isSetAdministrativeAreaName() {
        return ((this.administrativeAreaName!= null)&&(!this.administrativeAreaName.isEmpty()));
    }

    public void unsetAdministrativeAreaName() {
        this.administrativeAreaName = null;
    }

    /**
     * Gets the value of the subAdministrativeArea property.
     * 
     * @return
     *     possible object is
     *     {@link AdministrativeAreaElement.SubAdministrativeArea }
     *     
     */
    public AdministrativeAreaElement.SubAdministrativeArea getSubAdministrativeArea() {
        return subAdministrativeArea;
    }

    /**
     * Sets the value of the subAdministrativeArea property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdministrativeAreaElement.SubAdministrativeArea }
     *     
     */
    public void setSubAdministrativeArea(AdministrativeAreaElement.SubAdministrativeArea value) {
        this.subAdministrativeArea = value;
    }

    public boolean isSetSubAdministrativeArea() {
        return (this.subAdministrativeArea!= null);
    }

    /**
     * Gets the value of the locality property.
     * 
     * @return
     *     possible object is
     *     {@link LocalityElement }
     *     
     */
    public LocalityElement getLocality() {
        return locality;
    }

    /**
     * Sets the value of the locality property.
     * 
     * @param value
     *     allowed object is
     *     {@link LocalityElement }
     *     
     */
    public void setLocality(LocalityElement value) {
        this.locality = value;
    }

    public boolean isSetLocality() {
        return (this.locality!= null);
    }

    /**
     * Gets the value of the postOffice property.
     * 
     * @return
     *     possible object is
     *     {@link PostOfficeElement }
     *     
     */
    public PostOfficeElement getPostOffice() {
        return postOffice;
    }

    /**
     * Sets the value of the postOffice property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostOfficeElement }
     *     
     */
    public void setPostOffice(PostOfficeElement value) {
        this.postOffice = value;
    }

    public boolean isSetPostOffice() {
        return (this.postOffice!= null);
    }

    /**
     * Gets the value of the postalCode property.
     * 
     * @return
     *     possible object is
     *     {@link PostalCodeElement }
     *     
     */
    public PostalCodeElement getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the value of the postalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostalCodeElement }
     *     
     */
    public void setPostalCode(PostalCodeElement value) {
        this.postalCode = value;
    }

    public boolean isSetPostalCode() {
        return (this.postalCode!= null);
    }

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    public boolean isSetAny() {
        return ((this.any!= null)&&(!this.any.isEmpty()));
    }

    public void unsetAny() {
        this.any = null;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets the value of the usageType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUsageType() {
        return usageType;
    }

    /**
     * Sets the value of the usageType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUsageType(String value) {
        this.usageType = value;
    }

    public boolean isSetUsageType() {
        return (this.usageType!= null);
    }

    /**
     * Gets the value of the indicator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndicator() {
        return indicator;
    }

    /**
     * Sets the value of the indicator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndicator(String value) {
        this.indicator = value;
    }

    public boolean isSetIndicator() {
        return (this.indicator!= null);
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
        }
        {
            List<AdministrativeAreaElement.AdministrativeAreaName> theAdministrativeAreaName;
            theAdministrativeAreaName = (this.isSetAdministrativeAreaName()?this.getAdministrativeAreaName():null);
            strategy.appendField(locator, this, "administrativeAreaName", buffer, theAdministrativeAreaName);
        }
        {
            AdministrativeAreaElement.SubAdministrativeArea theSubAdministrativeArea;
            theSubAdministrativeArea = this.getSubAdministrativeArea();
            strategy.appendField(locator, this, "subAdministrativeArea", buffer, theSubAdministrativeArea);
        }
        {
            LocalityElement theLocality;
            theLocality = this.getLocality();
            strategy.appendField(locator, this, "locality", buffer, theLocality);
        }
        {
            PostOfficeElement thePostOffice;
            thePostOffice = this.getPostOffice();
            strategy.appendField(locator, this, "postOffice", buffer, thePostOffice);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            String theUsageType;
            theUsageType = this.getUsageType();
            strategy.appendField(locator, this, "usageType", buffer, theUsageType);
        }
        {
            String theIndicator;
            theIndicator = this.getIndicator();
            strategy.appendField(locator, this, "indicator", buffer, theIndicator);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AdministrativeAreaElement)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AdministrativeAreaElement that = ((AdministrativeAreaElement) object);
        {
            List<AddressLineElement> lhsAddressLine;
            lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            List<AddressLineElement> rhsAddressLine;
            rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                return false;
            }
        }
        {
            List<AdministrativeAreaElement.AdministrativeAreaName> lhsAdministrativeAreaName;
            lhsAdministrativeAreaName = (this.isSetAdministrativeAreaName()?this.getAdministrativeAreaName():null);
            List<AdministrativeAreaElement.AdministrativeAreaName> rhsAdministrativeAreaName;
            rhsAdministrativeAreaName = (that.isSetAdministrativeAreaName()?that.getAdministrativeAreaName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "administrativeAreaName", lhsAdministrativeAreaName), LocatorUtils.property(thatLocator, "administrativeAreaName", rhsAdministrativeAreaName), lhsAdministrativeAreaName, rhsAdministrativeAreaName)) {
                return false;
            }
        }
        {
            AdministrativeAreaElement.SubAdministrativeArea lhsSubAdministrativeArea;
            lhsSubAdministrativeArea = this.getSubAdministrativeArea();
            AdministrativeAreaElement.SubAdministrativeArea rhsSubAdministrativeArea;
            rhsSubAdministrativeArea = that.getSubAdministrativeArea();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subAdministrativeArea", lhsSubAdministrativeArea), LocatorUtils.property(thatLocator, "subAdministrativeArea", rhsSubAdministrativeArea), lhsSubAdministrativeArea, rhsSubAdministrativeArea)) {
                return false;
            }
        }
        {
            LocalityElement lhsLocality;
            lhsLocality = this.getLocality();
            LocalityElement rhsLocality;
            rhsLocality = that.getLocality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locality", lhsLocality), LocatorUtils.property(thatLocator, "locality", rhsLocality), lhsLocality, rhsLocality)) {
                return false;
            }
        }
        {
            PostOfficeElement lhsPostOffice;
            lhsPostOffice = this.getPostOffice();
            PostOfficeElement rhsPostOffice;
            rhsPostOffice = that.getPostOffice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postOffice", lhsPostOffice), LocatorUtils.property(thatLocator, "postOffice", rhsPostOffice), lhsPostOffice, rhsPostOffice)) {
                return false;
            }
        }
        {
            PostalCodeElement lhsPostalCode;
            lhsPostalCode = this.getPostalCode();
            PostalCodeElement rhsPostalCode;
            rhsPostalCode = that.getPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                return false;
            }
        }
        {
            List<Object> lhsAny;
            lhsAny = (this.isSetAny()?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (that.isSetAny()?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            String lhsUsageType;
            lhsUsageType = this.getUsageType();
            String rhsUsageType;
            rhsUsageType = that.getUsageType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usageType", lhsUsageType), LocatorUtils.property(thatLocator, "usageType", rhsUsageType), lhsUsageType, rhsUsageType)) {
                return false;
            }
        }
        {
            String lhsIndicator;
            lhsIndicator = this.getIndicator();
            String rhsIndicator;
            rhsIndicator = that.getIndicator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indicator", lhsIndicator), LocatorUtils.property(thatLocator, "indicator", rhsIndicator), lhsIndicator, rhsIndicator)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
        }
        {
            List<AdministrativeAreaElement.AdministrativeAreaName> theAdministrativeAreaName;
            theAdministrativeAreaName = (this.isSetAdministrativeAreaName()?this.getAdministrativeAreaName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "administrativeAreaName", theAdministrativeAreaName), currentHashCode, theAdministrativeAreaName);
        }
        {
            AdministrativeAreaElement.SubAdministrativeArea theSubAdministrativeArea;
            theSubAdministrativeArea = this.getSubAdministrativeArea();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subAdministrativeArea", theSubAdministrativeArea), currentHashCode, theSubAdministrativeArea);
        }
        {
            LocalityElement theLocality;
            theLocality = this.getLocality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locality", theLocality), currentHashCode, theLocality);
        }
        {
            PostOfficeElement thePostOffice;
            thePostOffice = this.getPostOffice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postOffice", thePostOffice), currentHashCode, thePostOffice);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            String theUsageType;
            theUsageType = this.getUsageType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usageType", theUsageType), currentHashCode, theUsageType);
        }
        {
            String theIndicator;
            theIndicator = this.getIndicator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicator", theIndicator), currentHashCode, theIndicator);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AdministrativeAreaElement) {
            final AdministrativeAreaElement copy = ((AdministrativeAreaElement) draftCopy);
            if (this.isSetAddressLine()) {
                List<AddressLineElement> sourceAddressLine;
                sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                @SuppressWarnings("unchecked")
                List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                copy.unsetAddressLine();
                if (copyAddressLine!= null) {
                    List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                    uniqueAddressLinel.addAll(copyAddressLine);
                }
            } else {
                copy.unsetAddressLine();
            }
            if (this.isSetAdministrativeAreaName()) {
                List<AdministrativeAreaElement.AdministrativeAreaName> sourceAdministrativeAreaName;
                sourceAdministrativeAreaName = (this.isSetAdministrativeAreaName()?this.getAdministrativeAreaName():null);
                @SuppressWarnings("unchecked")
                List<AdministrativeAreaElement.AdministrativeAreaName> copyAdministrativeAreaName = ((List<AdministrativeAreaElement.AdministrativeAreaName> ) strategy.copy(LocatorUtils.property(locator, "administrativeAreaName", sourceAdministrativeAreaName), sourceAdministrativeAreaName));
                copy.unsetAdministrativeAreaName();
                if (copyAdministrativeAreaName!= null) {
                    List<AdministrativeAreaElement.AdministrativeAreaName> uniqueAdministrativeAreaNamel = copy.getAdministrativeAreaName();
                    uniqueAdministrativeAreaNamel.addAll(copyAdministrativeAreaName);
                }
            } else {
                copy.unsetAdministrativeAreaName();
            }
            if (this.isSetSubAdministrativeArea()) {
                AdministrativeAreaElement.SubAdministrativeArea sourceSubAdministrativeArea;
                sourceSubAdministrativeArea = this.getSubAdministrativeArea();
                AdministrativeAreaElement.SubAdministrativeArea copySubAdministrativeArea = ((AdministrativeAreaElement.SubAdministrativeArea) strategy.copy(LocatorUtils.property(locator, "subAdministrativeArea", sourceSubAdministrativeArea), sourceSubAdministrativeArea));
                copy.setSubAdministrativeArea(copySubAdministrativeArea);
            } else {
                copy.subAdministrativeArea = null;
            }
            if (this.isSetLocality()) {
                LocalityElement sourceLocality;
                sourceLocality = this.getLocality();
                LocalityElement copyLocality = ((LocalityElement) strategy.copy(LocatorUtils.property(locator, "locality", sourceLocality), sourceLocality));
                copy.setLocality(copyLocality);
            } else {
                copy.locality = null;
            }
            if (this.isSetPostOffice()) {
                PostOfficeElement sourcePostOffice;
                sourcePostOffice = this.getPostOffice();
                PostOfficeElement copyPostOffice = ((PostOfficeElement) strategy.copy(LocatorUtils.property(locator, "postOffice", sourcePostOffice), sourcePostOffice));
                copy.setPostOffice(copyPostOffice);
            } else {
                copy.postOffice = null;
            }
            if (this.isSetPostalCode()) {
                PostalCodeElement sourcePostalCode;
                sourcePostalCode = this.getPostalCode();
                PostalCodeElement copyPostalCode = ((PostalCodeElement) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                copy.setPostalCode(copyPostalCode);
            } else {
                copy.postalCode = null;
            }
            if (this.isSetAny()) {
                List<Object> sourceAny;
                sourceAny = (this.isSetAny()?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.unsetAny();
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.unsetAny();
            }
            if (this.isSetType()) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.isSetUsageType()) {
                String sourceUsageType;
                sourceUsageType = this.getUsageType();
                String copyUsageType = ((String) strategy.copy(LocatorUtils.property(locator, "usageType", sourceUsageType), sourceUsageType));
                copy.setUsageType(copyUsageType);
            } else {
                copy.usageType = null;
            }
            if (this.isSetIndicator()) {
                String sourceIndicator;
                sourceIndicator = this.getIndicator();
                String copyIndicator = ((String) strategy.copy(LocatorUtils.property(locator, "indicator", sourceIndicator), sourceIndicator));
                copy.setIndicator(copyIndicator);
            } else {
                copy.indicator = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AdministrativeAreaElement();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class AdministrativeAreaName
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AdministrativeAreaElement.AdministrativeAreaName)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AdministrativeAreaElement.AdministrativeAreaName that = ((AdministrativeAreaElement.AdministrativeAreaName) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AdministrativeAreaElement.AdministrativeAreaName) {
                final AdministrativeAreaElement.AdministrativeAreaName copy = ((AdministrativeAreaElement.AdministrativeAreaName) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AdministrativeAreaElement.AdministrativeAreaName();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="SubAdministrativeAreaName" maxOccurs="unbounded" minOccurs="0"&gt;
     *           &lt;complexType&gt;
     *             &lt;complexContent&gt;
     *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *                 &lt;anyAttribute namespace='##other'/&gt;
     *               &lt;/restriction&gt;
     *             &lt;/complexContent&gt;
     *           &lt;/complexType&gt;
     *         &lt;/element&gt;
     *         &lt;choice minOccurs="0"&gt;
     *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}Locality"/&gt;
     *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostOffice"/&gt;
     *           &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalCode"/&gt;
     *         &lt;/choice&gt;
     *         &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="UsageType" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "addressLine",
        "subAdministrativeAreaName",
        "locality",
        "postOffice",
        "postalCode",
        "any"
    })
    public static class SubAdministrativeArea
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlElement(name = "AddressLine")
        protected List<AddressLineElement> addressLine;
        @XmlElement(name = "SubAdministrativeAreaName")
        protected List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> subAdministrativeAreaName;
        @XmlElement(name = "Locality")
        protected LocalityElement locality;
        @XmlElement(name = "PostOffice")
        protected PostOfficeElement postOffice;
        @XmlElement(name = "PostalCode")
        protected PostalCodeElement postalCode;
        @XmlAnyElement(lax = true)
        protected List<Object> any;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "UsageType")
        @XmlSchemaType(name = "anySimpleType")
        protected String usageType;
        @XmlAttribute(name = "Indicator")
        @XmlSchemaType(name = "anySimpleType")
        protected String indicator;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the addressLine property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the addressLine property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAddressLine().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AddressLineElement }
         * 
         * 
         */
        public List<AddressLineElement> getAddressLine() {
            if (addressLine == null) {
                addressLine = new ArrayList<AddressLineElement>();
            }
            return this.addressLine;
        }

        public boolean isSetAddressLine() {
            return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
        }

        public void unsetAddressLine() {
            this.addressLine = null;
        }

        /**
         * Gets the value of the subAdministrativeAreaName property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the subAdministrativeAreaName property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSubAdministrativeAreaName().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName }
         * 
         * 
         */
        public List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> getSubAdministrativeAreaName() {
            if (subAdministrativeAreaName == null) {
                subAdministrativeAreaName = new ArrayList<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName>();
            }
            return this.subAdministrativeAreaName;
        }

        public boolean isSetSubAdministrativeAreaName() {
            return ((this.subAdministrativeAreaName!= null)&&(!this.subAdministrativeAreaName.isEmpty()));
        }

        public void unsetSubAdministrativeAreaName() {
            this.subAdministrativeAreaName = null;
        }

        /**
         * Gets the value of the locality property.
         * 
         * @return
         *     possible object is
         *     {@link LocalityElement }
         *     
         */
        public LocalityElement getLocality() {
            return locality;
        }

        /**
         * Sets the value of the locality property.
         * 
         * @param value
         *     allowed object is
         *     {@link LocalityElement }
         *     
         */
        public void setLocality(LocalityElement value) {
            this.locality = value;
        }

        public boolean isSetLocality() {
            return (this.locality!= null);
        }

        /**
         * Gets the value of the postOffice property.
         * 
         * @return
         *     possible object is
         *     {@link PostOfficeElement }
         *     
         */
        public PostOfficeElement getPostOffice() {
            return postOffice;
        }

        /**
         * Sets the value of the postOffice property.
         * 
         * @param value
         *     allowed object is
         *     {@link PostOfficeElement }
         *     
         */
        public void setPostOffice(PostOfficeElement value) {
            this.postOffice = value;
        }

        public boolean isSetPostOffice() {
            return (this.postOffice!= null);
        }

        /**
         * Gets the value of the postalCode property.
         * 
         * @return
         *     possible object is
         *     {@link PostalCodeElement }
         *     
         */
        public PostalCodeElement getPostalCode() {
            return postalCode;
        }

        /**
         * Sets the value of the postalCode property.
         * 
         * @param value
         *     allowed object is
         *     {@link PostalCodeElement }
         *     
         */
        public void setPostalCode(PostalCodeElement value) {
            this.postalCode = value;
        }

        public boolean isSetPostalCode() {
            return (this.postalCode!= null);
        }

        /**
         * Gets the value of the any property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the any property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAny().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Object }
         * 
         * 
         */
        public List<Object> getAny() {
            if (any == null) {
                any = new ArrayList<Object>();
            }
            return this.any;
        }

        public boolean isSetAny() {
            return ((this.any!= null)&&(!this.any.isEmpty()));
        }

        public void unsetAny() {
            this.any = null;
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the usageType property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getUsageType() {
            return usageType;
        }

        /**
         * Sets the value of the usageType property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setUsageType(String value) {
            this.usageType = value;
        }

        public boolean isSetUsageType() {
            return (this.usageType!= null);
        }

        /**
         * Gets the value of the indicator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getIndicator() {
            return indicator;
        }

        /**
         * Sets the value of the indicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setIndicator(String value) {
            this.indicator = value;
        }

        public boolean isSetIndicator() {
            return (this.indicator!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<AddressLineElement> theAddressLine;
                theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
            }
            {
                List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> theSubAdministrativeAreaName;
                theSubAdministrativeAreaName = (this.isSetSubAdministrativeAreaName()?this.getSubAdministrativeAreaName():null);
                strategy.appendField(locator, this, "subAdministrativeAreaName", buffer, theSubAdministrativeAreaName);
            }
            {
                LocalityElement theLocality;
                theLocality = this.getLocality();
                strategy.appendField(locator, this, "locality", buffer, theLocality);
            }
            {
                PostOfficeElement thePostOffice;
                thePostOffice = this.getPostOffice();
                strategy.appendField(locator, this, "postOffice", buffer, thePostOffice);
            }
            {
                PostalCodeElement thePostalCode;
                thePostalCode = this.getPostalCode();
                strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
            }
            {
                List<Object> theAny;
                theAny = (this.isSetAny()?this.getAny():null);
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theUsageType;
                theUsageType = this.getUsageType();
                strategy.appendField(locator, this, "usageType", buffer, theUsageType);
            }
            {
                String theIndicator;
                theIndicator = this.getIndicator();
                strategy.appendField(locator, this, "indicator", buffer, theIndicator);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof AdministrativeAreaElement.SubAdministrativeArea)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final AdministrativeAreaElement.SubAdministrativeArea that = ((AdministrativeAreaElement.SubAdministrativeArea) object);
            {
                List<AddressLineElement> lhsAddressLine;
                lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                List<AddressLineElement> rhsAddressLine;
                rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                    return false;
                }
            }
            {
                List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> lhsSubAdministrativeAreaName;
                lhsSubAdministrativeAreaName = (this.isSetSubAdministrativeAreaName()?this.getSubAdministrativeAreaName():null);
                List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> rhsSubAdministrativeAreaName;
                rhsSubAdministrativeAreaName = (that.isSetSubAdministrativeAreaName()?that.getSubAdministrativeAreaName():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "subAdministrativeAreaName", lhsSubAdministrativeAreaName), LocatorUtils.property(thatLocator, "subAdministrativeAreaName", rhsSubAdministrativeAreaName), lhsSubAdministrativeAreaName, rhsSubAdministrativeAreaName)) {
                    return false;
                }
            }
            {
                LocalityElement lhsLocality;
                lhsLocality = this.getLocality();
                LocalityElement rhsLocality;
                rhsLocality = that.getLocality();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "locality", lhsLocality), LocatorUtils.property(thatLocator, "locality", rhsLocality), lhsLocality, rhsLocality)) {
                    return false;
                }
            }
            {
                PostOfficeElement lhsPostOffice;
                lhsPostOffice = this.getPostOffice();
                PostOfficeElement rhsPostOffice;
                rhsPostOffice = that.getPostOffice();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "postOffice", lhsPostOffice), LocatorUtils.property(thatLocator, "postOffice", rhsPostOffice), lhsPostOffice, rhsPostOffice)) {
                    return false;
                }
            }
            {
                PostalCodeElement lhsPostalCode;
                lhsPostalCode = this.getPostalCode();
                PostalCodeElement rhsPostalCode;
                rhsPostalCode = that.getPostalCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                    return false;
                }
            }
            {
                List<Object> lhsAny;
                lhsAny = (this.isSetAny()?this.getAny():null);
                List<Object> rhsAny;
                rhsAny = (that.isSetAny()?that.getAny():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsUsageType;
                lhsUsageType = this.getUsageType();
                String rhsUsageType;
                rhsUsageType = that.getUsageType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "usageType", lhsUsageType), LocatorUtils.property(thatLocator, "usageType", rhsUsageType), lhsUsageType, rhsUsageType)) {
                    return false;
                }
            }
            {
                String lhsIndicator;
                lhsIndicator = this.getIndicator();
                String rhsIndicator;
                rhsIndicator = that.getIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "indicator", lhsIndicator), LocatorUtils.property(thatLocator, "indicator", rhsIndicator), lhsIndicator, rhsIndicator)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<AddressLineElement> theAddressLine;
                theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
            }
            {
                List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> theSubAdministrativeAreaName;
                theSubAdministrativeAreaName = (this.isSetSubAdministrativeAreaName()?this.getSubAdministrativeAreaName():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subAdministrativeAreaName", theSubAdministrativeAreaName), currentHashCode, theSubAdministrativeAreaName);
            }
            {
                LocalityElement theLocality;
                theLocality = this.getLocality();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locality", theLocality), currentHashCode, theLocality);
            }
            {
                PostOfficeElement thePostOffice;
                thePostOffice = this.getPostOffice();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postOffice", thePostOffice), currentHashCode, thePostOffice);
            }
            {
                PostalCodeElement thePostalCode;
                thePostalCode = this.getPostalCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
            }
            {
                List<Object> theAny;
                theAny = (this.isSetAny()?this.getAny():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theUsageType;
                theUsageType = this.getUsageType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usageType", theUsageType), currentHashCode, theUsageType);
            }
            {
                String theIndicator;
                theIndicator = this.getIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicator", theIndicator), currentHashCode, theIndicator);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof AdministrativeAreaElement.SubAdministrativeArea) {
                final AdministrativeAreaElement.SubAdministrativeArea copy = ((AdministrativeAreaElement.SubAdministrativeArea) draftCopy);
                if (this.isSetAddressLine()) {
                    List<AddressLineElement> sourceAddressLine;
                    sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                    @SuppressWarnings("unchecked")
                    List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                    copy.unsetAddressLine();
                    if (copyAddressLine!= null) {
                        List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                        uniqueAddressLinel.addAll(copyAddressLine);
                    }
                } else {
                    copy.unsetAddressLine();
                }
                if (this.isSetSubAdministrativeAreaName()) {
                    List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> sourceSubAdministrativeAreaName;
                    sourceSubAdministrativeAreaName = (this.isSetSubAdministrativeAreaName()?this.getSubAdministrativeAreaName():null);
                    @SuppressWarnings("unchecked")
                    List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> copySubAdministrativeAreaName = ((List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> ) strategy.copy(LocatorUtils.property(locator, "subAdministrativeAreaName", sourceSubAdministrativeAreaName), sourceSubAdministrativeAreaName));
                    copy.unsetSubAdministrativeAreaName();
                    if (copySubAdministrativeAreaName!= null) {
                        List<AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName> uniqueSubAdministrativeAreaNamel = copy.getSubAdministrativeAreaName();
                        uniqueSubAdministrativeAreaNamel.addAll(copySubAdministrativeAreaName);
                    }
                } else {
                    copy.unsetSubAdministrativeAreaName();
                }
                if (this.isSetLocality()) {
                    LocalityElement sourceLocality;
                    sourceLocality = this.getLocality();
                    LocalityElement copyLocality = ((LocalityElement) strategy.copy(LocatorUtils.property(locator, "locality", sourceLocality), sourceLocality));
                    copy.setLocality(copyLocality);
                } else {
                    copy.locality = null;
                }
                if (this.isSetPostOffice()) {
                    PostOfficeElement sourcePostOffice;
                    sourcePostOffice = this.getPostOffice();
                    PostOfficeElement copyPostOffice = ((PostOfficeElement) strategy.copy(LocatorUtils.property(locator, "postOffice", sourcePostOffice), sourcePostOffice));
                    copy.setPostOffice(copyPostOffice);
                } else {
                    copy.postOffice = null;
                }
                if (this.isSetPostalCode()) {
                    PostalCodeElement sourcePostalCode;
                    sourcePostalCode = this.getPostalCode();
                    PostalCodeElement copyPostalCode = ((PostalCodeElement) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                    copy.setPostalCode(copyPostalCode);
                } else {
                    copy.postalCode = null;
                }
                if (this.isSetAny()) {
                    List<Object> sourceAny;
                    sourceAny = (this.isSetAny()?this.getAny():null);
                    @SuppressWarnings("unchecked")
                    List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                    copy.unsetAny();
                    if (copyAny!= null) {
                        List<Object> uniqueAnyl = copy.getAny();
                        uniqueAnyl.addAll(copyAny);
                    }
                } else {
                    copy.unsetAny();
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetUsageType()) {
                    String sourceUsageType;
                    sourceUsageType = this.getUsageType();
                    String copyUsageType = ((String) strategy.copy(LocatorUtils.property(locator, "usageType", sourceUsageType), sourceUsageType));
                    copy.setUsageType(copyUsageType);
                } else {
                    copy.usageType = null;
                }
                if (this.isSetIndicator()) {
                    String sourceIndicator;
                    sourceIndicator = this.getIndicator();
                    String copyIndicator = ((String) strategy.copy(LocatorUtils.property(locator, "indicator", sourceIndicator), sourceIndicator));
                    copy.setIndicator(copyIndicator);
                } else {
                    copy.indicator = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new AdministrativeAreaElement.SubAdministrativeArea();
        }


        /**
         * <p>Java class for anonymous complex type.
         * 
         * <p>The following schema fragment specifies the expected content contained within this class.
         * 
         * <pre>
         * &lt;complexType&gt;
         *   &lt;complexContent&gt;
         *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
         *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
         *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
         *       &lt;anyAttribute namespace='##other'/&gt;
         *     &lt;/restriction&gt;
         *   &lt;/complexContent&gt;
         * &lt;/complexType&gt;
         * </pre>
         * 
         * 
         */
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType(name = "", propOrder = {
            "content"
        })
        public static class SubAdministrativeAreaName
            implements Cloneable, CopyTo, Equals, HashCode, ToString
        {

            @XmlValue
            protected String content;
            @XmlAttribute(name = "Type")
            @XmlSchemaType(name = "anySimpleType")
            protected String type;
            @XmlAttribute(name = "Code")
            @XmlSchemaType(name = "anySimpleType")
            protected String code;
            @XmlAnyAttribute
            private Map<QName, String> otherAttributes = new HashMap<QName, String>();

            /**
             * Gets the value of the content property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getContent() {
                return content;
            }

            /**
             * Sets the value of the content property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setContent(String value) {
                this.content = value;
            }

            public boolean isSetContent() {
                return (this.content!= null);
            }

            /**
             * Gets the value of the type property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getType() {
                return type;
            }

            /**
             * Sets the value of the type property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setType(String value) {
                this.type = value;
            }

            public boolean isSetType() {
                return (this.type!= null);
            }

            /**
             * Gets the value of the code property.
             * 
             * @return
             *     possible object is
             *     {@link String }
             *     
             */
            public String getCode() {
                return code;
            }

            /**
             * Sets the value of the code property.
             * 
             * @param value
             *     allowed object is
             *     {@link String }
             *     
             */
            public void setCode(String value) {
                this.code = value;
            }

            public boolean isSetCode() {
                return (this.code!= null);
            }

            /**
             * Gets a map that contains attributes that aren't bound to any typed property on this class.
             * 
             * <p>
             * the map is keyed by the name of the attribute and 
             * the value is the string value of the attribute.
             * 
             * the map returned by this method is live, and you can add new attribute
             * by updating the map directly. Because of this design, there's no setter.
             * 
             * 
             * @return
             *     always non-null
             */
            public Map<QName, String> getOtherAttributes() {
                return otherAttributes;
            }

            public String toString() {
                final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
                final StringBuilder buffer = new StringBuilder();
                append(null, buffer, strategy);
                return buffer.toString();
            }

            public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                strategy.appendStart(locator, this, buffer);
                appendFields(locator, buffer, strategy);
                strategy.appendEnd(locator, this, buffer);
                return buffer;
            }

            public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
                {
                    String theContent;
                    theContent = this.getContent();
                    strategy.appendField(locator, this, "content", buffer, theContent);
                }
                {
                    String theType;
                    theType = this.getType();
                    strategy.appendField(locator, this, "type", buffer, theType);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    strategy.appendField(locator, this, "code", buffer, theCode);
                }
                return buffer;
            }

            public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
                if (!(object instanceof AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName)) {
                    return false;
                }
                if (this == object) {
                    return true;
                }
                final AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName that = ((AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName) object);
                {
                    String lhsContent;
                    lhsContent = this.getContent();
                    String rhsContent;
                    rhsContent = that.getContent();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                        return false;
                    }
                }
                {
                    String lhsType;
                    lhsType = this.getType();
                    String rhsType;
                    rhsType = that.getType();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                        return false;
                    }
                }
                {
                    String lhsCode;
                    lhsCode = this.getCode();
                    String rhsCode;
                    rhsCode = that.getCode();
                    if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                        return false;
                    }
                }
                return true;
            }

            public boolean equals(Object object) {
                final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
                return equals(null, null, object, strategy);
            }

            public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
                int currentHashCode = 1;
                {
                    String theContent;
                    theContent = this.getContent();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
                }
                {
                    String theType;
                    theType = this.getType();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
                }
                {
                    String theCode;
                    theCode = this.getCode();
                    currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
                }
                return currentHashCode;
            }

            public int hashCode() {
                final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
                return this.hashCode(null, strategy);
            }

            public Object clone() {
                return copyTo(createNewInstance());
            }

            public Object copyTo(Object target) {
                final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
                return copyTo(null, target, strategy);
            }

            public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
                final Object draftCopy = ((target == null)?createNewInstance():target);
                if (draftCopy instanceof AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName) {
                    final AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName copy = ((AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName) draftCopy);
                    if (this.isSetContent()) {
                        String sourceContent;
                        sourceContent = this.getContent();
                        String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                        copy.setContent(copyContent);
                    } else {
                        copy.content = null;
                    }
                    if (this.isSetType()) {
                        String sourceType;
                        sourceType = this.getType();
                        String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                        copy.setType(copyType);
                    } else {
                        copy.type = null;
                    }
                    if (this.isSetCode()) {
                        String sourceCode;
                        sourceCode = this.getCode();
                        String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                        copy.setCode(copyCode);
                    } else {
                        copy.code = null;
                    }
                }
                return draftCopy;
            }

            public Object createNewInstance() {
                return new AdministrativeAreaElement.SubAdministrativeArea.SubAdministrativeAreaName();
            }

        }

    }

}
