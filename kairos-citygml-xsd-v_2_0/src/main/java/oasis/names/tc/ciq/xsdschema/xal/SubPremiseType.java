//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package oasis.names.tc.ciq.xsdschema.xal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SubPremiseType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SubPremiseType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}AddressLine" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="SubPremiseName" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;attribute name="TypeOccurrence"&gt;
 *                   &lt;simpleType&gt;
 *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                       &lt;enumeration value="Before"/&gt;
 *                       &lt;enumeration value="After"/&gt;
 *                     &lt;/restriction&gt;
 *                   &lt;/simpleType&gt;
 *                 &lt;/attribute&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;choice minOccurs="0"&gt;
 *           &lt;element name="SubPremiseLocation"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *           &lt;element name="SubPremiseNumber" maxOccurs="unbounded" minOccurs="0"&gt;
 *             &lt;complexType&gt;
 *               &lt;complexContent&gt;
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                   &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                   &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                   &lt;attribute name="IndicatorOccurrence"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                         &lt;enumeration value="Before"/&gt;
 *                         &lt;enumeration value="After"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="NumberTypeOccurrence"&gt;
 *                     &lt;simpleType&gt;
 *                       &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *                         &lt;enumeration value="Before"/&gt;
 *                         &lt;enumeration value="After"/&gt;
 *                       &lt;/restriction&gt;
 *                     &lt;/simpleType&gt;
 *                   &lt;/attribute&gt;
 *                   &lt;attribute name="PremiseNumberSeparator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                   &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                   &lt;anyAttribute namespace='##other'/&gt;
 *                 &lt;/restriction&gt;
 *               &lt;/complexContent&gt;
 *             &lt;/complexType&gt;
 *           &lt;/element&gt;
 *         &lt;/choice&gt;
 *         &lt;element name="SubPremiseNumberPrefix" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;attribute name="NumberPrefixSeparator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SubPremiseNumberSuffix" maxOccurs="unbounded" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
 *                 &lt;attribute name="NumberSuffixSeparator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *                 &lt;anyAttribute namespace='##other'/&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="BuildingName" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}BuildingNameType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="Firm" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}FirmType" minOccurs="0"/&gt;
 *         &lt;element name="MailStop" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}MailStopType" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}PostalCode" minOccurs="0"/&gt;
 *         &lt;element name="SubPremise" type="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}SubPremiseType" minOccurs="0"/&gt;
 *         &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
 *       &lt;anyAttribute namespace='##other'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SubPremiseType", propOrder = {
    "addressLine",
    "subPremiseName",
    "subPremiseLocation",
    "subPremiseNumber",
    "subPremiseNumberPrefix",
    "subPremiseNumberSuffix",
    "buildingName",
    "firm",
    "mailStop",
    "postalCode",
    "subPremise",
    "any"
})
public class SubPremiseType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "AddressLine")
    protected List<AddressLineElement> addressLine;
    @XmlElement(name = "SubPremiseName")
    protected List<SubPremiseType.SubPremiseName> subPremiseName;
    @XmlElement(name = "SubPremiseLocation")
    protected SubPremiseType.SubPremiseLocation subPremiseLocation;
    @XmlElement(name = "SubPremiseNumber")
    protected List<SubPremiseType.SubPremiseNumber> subPremiseNumber;
    @XmlElement(name = "SubPremiseNumberPrefix")
    protected List<SubPremiseType.SubPremiseNumberPrefix> subPremiseNumberPrefix;
    @XmlElement(name = "SubPremiseNumberSuffix")
    protected List<SubPremiseType.SubPremiseNumberSuffix> subPremiseNumberSuffix;
    @XmlElement(name = "BuildingName")
    protected List<BuildingNameType> buildingName;
    @XmlElement(name = "Firm")
    protected FirmType firm;
    @XmlElement(name = "MailStop")
    protected MailStopType mailStop;
    @XmlElement(name = "PostalCode")
    protected PostalCodeElement postalCode;
    @XmlElement(name = "SubPremise")
    protected SubPremiseType subPremise;
    @XmlAnyElement(lax = true)
    protected List<Object> any;
    @XmlAttribute(name = "Type")
    @XmlSchemaType(name = "anySimpleType")
    protected String type;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the addressLine property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addressLine property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddressLine().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressLineElement }
     * 
     * 
     */
    public List<AddressLineElement> getAddressLine() {
        if (addressLine == null) {
            addressLine = new ArrayList<AddressLineElement>();
        }
        return this.addressLine;
    }

    public boolean isSetAddressLine() {
        return ((this.addressLine!= null)&&(!this.addressLine.isEmpty()));
    }

    public void unsetAddressLine() {
        this.addressLine = null;
    }

    /**
     * Gets the value of the subPremiseName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subPremiseName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubPremiseName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SubPremiseType.SubPremiseName }
     * 
     * 
     */
    public List<SubPremiseType.SubPremiseName> getSubPremiseName() {
        if (subPremiseName == null) {
            subPremiseName = new ArrayList<SubPremiseType.SubPremiseName>();
        }
        return this.subPremiseName;
    }

    public boolean isSetSubPremiseName() {
        return ((this.subPremiseName!= null)&&(!this.subPremiseName.isEmpty()));
    }

    public void unsetSubPremiseName() {
        this.subPremiseName = null;
    }

    /**
     * Gets the value of the subPremiseLocation property.
     * 
     * @return
     *     possible object is
     *     {@link SubPremiseType.SubPremiseLocation }
     *     
     */
    public SubPremiseType.SubPremiseLocation getSubPremiseLocation() {
        return subPremiseLocation;
    }

    /**
     * Sets the value of the subPremiseLocation property.
     * 
     * @param value
     *     allowed object is
     *     {@link SubPremiseType.SubPremiseLocation }
     *     
     */
    public void setSubPremiseLocation(SubPremiseType.SubPremiseLocation value) {
        this.subPremiseLocation = value;
    }

    public boolean isSetSubPremiseLocation() {
        return (this.subPremiseLocation!= null);
    }

    /**
     * Gets the value of the subPremiseNumber property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subPremiseNumber property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubPremiseNumber().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SubPremiseType.SubPremiseNumber }
     * 
     * 
     */
    public List<SubPremiseType.SubPremiseNumber> getSubPremiseNumber() {
        if (subPremiseNumber == null) {
            subPremiseNumber = new ArrayList<SubPremiseType.SubPremiseNumber>();
        }
        return this.subPremiseNumber;
    }

    public boolean isSetSubPremiseNumber() {
        return ((this.subPremiseNumber!= null)&&(!this.subPremiseNumber.isEmpty()));
    }

    public void unsetSubPremiseNumber() {
        this.subPremiseNumber = null;
    }

    /**
     * Gets the value of the subPremiseNumberPrefix property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subPremiseNumberPrefix property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubPremiseNumberPrefix().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SubPremiseType.SubPremiseNumberPrefix }
     * 
     * 
     */
    public List<SubPremiseType.SubPremiseNumberPrefix> getSubPremiseNumberPrefix() {
        if (subPremiseNumberPrefix == null) {
            subPremiseNumberPrefix = new ArrayList<SubPremiseType.SubPremiseNumberPrefix>();
        }
        return this.subPremiseNumberPrefix;
    }

    public boolean isSetSubPremiseNumberPrefix() {
        return ((this.subPremiseNumberPrefix!= null)&&(!this.subPremiseNumberPrefix.isEmpty()));
    }

    public void unsetSubPremiseNumberPrefix() {
        this.subPremiseNumberPrefix = null;
    }

    /**
     * Gets the value of the subPremiseNumberSuffix property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subPremiseNumberSuffix property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubPremiseNumberSuffix().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SubPremiseType.SubPremiseNumberSuffix }
     * 
     * 
     */
    public List<SubPremiseType.SubPremiseNumberSuffix> getSubPremiseNumberSuffix() {
        if (subPremiseNumberSuffix == null) {
            subPremiseNumberSuffix = new ArrayList<SubPremiseType.SubPremiseNumberSuffix>();
        }
        return this.subPremiseNumberSuffix;
    }

    public boolean isSetSubPremiseNumberSuffix() {
        return ((this.subPremiseNumberSuffix!= null)&&(!this.subPremiseNumberSuffix.isEmpty()));
    }

    public void unsetSubPremiseNumberSuffix() {
        this.subPremiseNumberSuffix = null;
    }

    /**
     * Gets the value of the buildingName property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the buildingName property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBuildingName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BuildingNameType }
     * 
     * 
     */
    public List<BuildingNameType> getBuildingName() {
        if (buildingName == null) {
            buildingName = new ArrayList<BuildingNameType>();
        }
        return this.buildingName;
    }

    public boolean isSetBuildingName() {
        return ((this.buildingName!= null)&&(!this.buildingName.isEmpty()));
    }

    public void unsetBuildingName() {
        this.buildingName = null;
    }

    /**
     * Gets the value of the firm property.
     * 
     * @return
     *     possible object is
     *     {@link FirmType }
     *     
     */
    public FirmType getFirm() {
        return firm;
    }

    /**
     * Sets the value of the firm property.
     * 
     * @param value
     *     allowed object is
     *     {@link FirmType }
     *     
     */
    public void setFirm(FirmType value) {
        this.firm = value;
    }

    public boolean isSetFirm() {
        return (this.firm!= null);
    }

    /**
     * Gets the value of the mailStop property.
     * 
     * @return
     *     possible object is
     *     {@link MailStopType }
     *     
     */
    public MailStopType getMailStop() {
        return mailStop;
    }

    /**
     * Sets the value of the mailStop property.
     * 
     * @param value
     *     allowed object is
     *     {@link MailStopType }
     *     
     */
    public void setMailStop(MailStopType value) {
        this.mailStop = value;
    }

    public boolean isSetMailStop() {
        return (this.mailStop!= null);
    }

    /**
     * Gets the value of the postalCode property.
     * 
     * @return
     *     possible object is
     *     {@link PostalCodeElement }
     *     
     */
    public PostalCodeElement getPostalCode() {
        return postalCode;
    }

    /**
     * Sets the value of the postalCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link PostalCodeElement }
     *     
     */
    public void setPostalCode(PostalCodeElement value) {
        this.postalCode = value;
    }

    public boolean isSetPostalCode() {
        return (this.postalCode!= null);
    }

    /**
     * Gets the value of the subPremise property.
     * 
     * @return
     *     possible object is
     *     {@link SubPremiseType }
     *     
     */
    public SubPremiseType getSubPremise() {
        return subPremise;
    }

    /**
     * Sets the value of the subPremise property.
     * 
     * @param value
     *     allowed object is
     *     {@link SubPremiseType }
     *     
     */
    public void setSubPremise(SubPremiseType value) {
        this.subPremise = value;
    }

    public boolean isSetSubPremise() {
        return (this.subPremise!= null);
    }

    /**
     * Gets the value of the any property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the any property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAny().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getAny() {
        if (any == null) {
            any = new ArrayList<Object>();
        }
        return this.any;
    }

    public boolean isSetAny() {
        return ((this.any!= null)&&(!this.any.isEmpty()));
    }

    public void unsetAny() {
        this.any = null;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setType(String value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            strategy.appendField(locator, this, "addressLine", buffer, theAddressLine);
        }
        {
            List<SubPremiseType.SubPremiseName> theSubPremiseName;
            theSubPremiseName = (this.isSetSubPremiseName()?this.getSubPremiseName():null);
            strategy.appendField(locator, this, "subPremiseName", buffer, theSubPremiseName);
        }
        {
            SubPremiseType.SubPremiseLocation theSubPremiseLocation;
            theSubPremiseLocation = this.getSubPremiseLocation();
            strategy.appendField(locator, this, "subPremiseLocation", buffer, theSubPremiseLocation);
        }
        {
            List<SubPremiseType.SubPremiseNumber> theSubPremiseNumber;
            theSubPremiseNumber = (this.isSetSubPremiseNumber()?this.getSubPremiseNumber():null);
            strategy.appendField(locator, this, "subPremiseNumber", buffer, theSubPremiseNumber);
        }
        {
            List<SubPremiseType.SubPremiseNumberPrefix> theSubPremiseNumberPrefix;
            theSubPremiseNumberPrefix = (this.isSetSubPremiseNumberPrefix()?this.getSubPremiseNumberPrefix():null);
            strategy.appendField(locator, this, "subPremiseNumberPrefix", buffer, theSubPremiseNumberPrefix);
        }
        {
            List<SubPremiseType.SubPremiseNumberSuffix> theSubPremiseNumberSuffix;
            theSubPremiseNumberSuffix = (this.isSetSubPremiseNumberSuffix()?this.getSubPremiseNumberSuffix():null);
            strategy.appendField(locator, this, "subPremiseNumberSuffix", buffer, theSubPremiseNumberSuffix);
        }
        {
            List<BuildingNameType> theBuildingName;
            theBuildingName = (this.isSetBuildingName()?this.getBuildingName():null);
            strategy.appendField(locator, this, "buildingName", buffer, theBuildingName);
        }
        {
            FirmType theFirm;
            theFirm = this.getFirm();
            strategy.appendField(locator, this, "firm", buffer, theFirm);
        }
        {
            MailStopType theMailStop;
            theMailStop = this.getMailStop();
            strategy.appendField(locator, this, "mailStop", buffer, theMailStop);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            strategy.appendField(locator, this, "postalCode", buffer, thePostalCode);
        }
        {
            SubPremiseType theSubPremise;
            theSubPremise = this.getSubPremise();
            strategy.appendField(locator, this, "subPremise", buffer, theSubPremise);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            strategy.appendField(locator, this, "any", buffer, theAny);
        }
        {
            String theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SubPremiseType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SubPremiseType that = ((SubPremiseType) object);
        {
            List<AddressLineElement> lhsAddressLine;
            lhsAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            List<AddressLineElement> rhsAddressLine;
            rhsAddressLine = (that.isSetAddressLine()?that.getAddressLine():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "addressLine", lhsAddressLine), LocatorUtils.property(thatLocator, "addressLine", rhsAddressLine), lhsAddressLine, rhsAddressLine)) {
                return false;
            }
        }
        {
            List<SubPremiseType.SubPremiseName> lhsSubPremiseName;
            lhsSubPremiseName = (this.isSetSubPremiseName()?this.getSubPremiseName():null);
            List<SubPremiseType.SubPremiseName> rhsSubPremiseName;
            rhsSubPremiseName = (that.isSetSubPremiseName()?that.getSubPremiseName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subPremiseName", lhsSubPremiseName), LocatorUtils.property(thatLocator, "subPremiseName", rhsSubPremiseName), lhsSubPremiseName, rhsSubPremiseName)) {
                return false;
            }
        }
        {
            SubPremiseType.SubPremiseLocation lhsSubPremiseLocation;
            lhsSubPremiseLocation = this.getSubPremiseLocation();
            SubPremiseType.SubPremiseLocation rhsSubPremiseLocation;
            rhsSubPremiseLocation = that.getSubPremiseLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subPremiseLocation", lhsSubPremiseLocation), LocatorUtils.property(thatLocator, "subPremiseLocation", rhsSubPremiseLocation), lhsSubPremiseLocation, rhsSubPremiseLocation)) {
                return false;
            }
        }
        {
            List<SubPremiseType.SubPremiseNumber> lhsSubPremiseNumber;
            lhsSubPremiseNumber = (this.isSetSubPremiseNumber()?this.getSubPremiseNumber():null);
            List<SubPremiseType.SubPremiseNumber> rhsSubPremiseNumber;
            rhsSubPremiseNumber = (that.isSetSubPremiseNumber()?that.getSubPremiseNumber():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subPremiseNumber", lhsSubPremiseNumber), LocatorUtils.property(thatLocator, "subPremiseNumber", rhsSubPremiseNumber), lhsSubPremiseNumber, rhsSubPremiseNumber)) {
                return false;
            }
        }
        {
            List<SubPremiseType.SubPremiseNumberPrefix> lhsSubPremiseNumberPrefix;
            lhsSubPremiseNumberPrefix = (this.isSetSubPremiseNumberPrefix()?this.getSubPremiseNumberPrefix():null);
            List<SubPremiseType.SubPremiseNumberPrefix> rhsSubPremiseNumberPrefix;
            rhsSubPremiseNumberPrefix = (that.isSetSubPremiseNumberPrefix()?that.getSubPremiseNumberPrefix():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subPremiseNumberPrefix", lhsSubPremiseNumberPrefix), LocatorUtils.property(thatLocator, "subPremiseNumberPrefix", rhsSubPremiseNumberPrefix), lhsSubPremiseNumberPrefix, rhsSubPremiseNumberPrefix)) {
                return false;
            }
        }
        {
            List<SubPremiseType.SubPremiseNumberSuffix> lhsSubPremiseNumberSuffix;
            lhsSubPremiseNumberSuffix = (this.isSetSubPremiseNumberSuffix()?this.getSubPremiseNumberSuffix():null);
            List<SubPremiseType.SubPremiseNumberSuffix> rhsSubPremiseNumberSuffix;
            rhsSubPremiseNumberSuffix = (that.isSetSubPremiseNumberSuffix()?that.getSubPremiseNumberSuffix():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subPremiseNumberSuffix", lhsSubPremiseNumberSuffix), LocatorUtils.property(thatLocator, "subPremiseNumberSuffix", rhsSubPremiseNumberSuffix), lhsSubPremiseNumberSuffix, rhsSubPremiseNumberSuffix)) {
                return false;
            }
        }
        {
            List<BuildingNameType> lhsBuildingName;
            lhsBuildingName = (this.isSetBuildingName()?this.getBuildingName():null);
            List<BuildingNameType> rhsBuildingName;
            rhsBuildingName = (that.isSetBuildingName()?that.getBuildingName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "buildingName", lhsBuildingName), LocatorUtils.property(thatLocator, "buildingName", rhsBuildingName), lhsBuildingName, rhsBuildingName)) {
                return false;
            }
        }
        {
            FirmType lhsFirm;
            lhsFirm = this.getFirm();
            FirmType rhsFirm;
            rhsFirm = that.getFirm();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "firm", lhsFirm), LocatorUtils.property(thatLocator, "firm", rhsFirm), lhsFirm, rhsFirm)) {
                return false;
            }
        }
        {
            MailStopType lhsMailStop;
            lhsMailStop = this.getMailStop();
            MailStopType rhsMailStop;
            rhsMailStop = that.getMailStop();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mailStop", lhsMailStop), LocatorUtils.property(thatLocator, "mailStop", rhsMailStop), lhsMailStop, rhsMailStop)) {
                return false;
            }
        }
        {
            PostalCodeElement lhsPostalCode;
            lhsPostalCode = this.getPostalCode();
            PostalCodeElement rhsPostalCode;
            rhsPostalCode = that.getPostalCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postalCode", lhsPostalCode), LocatorUtils.property(thatLocator, "postalCode", rhsPostalCode), lhsPostalCode, rhsPostalCode)) {
                return false;
            }
        }
        {
            SubPremiseType lhsSubPremise;
            lhsSubPremise = this.getSubPremise();
            SubPremiseType rhsSubPremise;
            rhsSubPremise = that.getSubPremise();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subPremise", lhsSubPremise), LocatorUtils.property(thatLocator, "subPremise", rhsSubPremise), lhsSubPremise, rhsSubPremise)) {
                return false;
            }
        }
        {
            List<Object> lhsAny;
            lhsAny = (this.isSetAny()?this.getAny():null);
            List<Object> rhsAny;
            rhsAny = (that.isSetAny()?that.getAny():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                return false;
            }
        }
        {
            String lhsType;
            lhsType = this.getType();
            String rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<AddressLineElement> theAddressLine;
            theAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "addressLine", theAddressLine), currentHashCode, theAddressLine);
        }
        {
            List<SubPremiseType.SubPremiseName> theSubPremiseName;
            theSubPremiseName = (this.isSetSubPremiseName()?this.getSubPremiseName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subPremiseName", theSubPremiseName), currentHashCode, theSubPremiseName);
        }
        {
            SubPremiseType.SubPremiseLocation theSubPremiseLocation;
            theSubPremiseLocation = this.getSubPremiseLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subPremiseLocation", theSubPremiseLocation), currentHashCode, theSubPremiseLocation);
        }
        {
            List<SubPremiseType.SubPremiseNumber> theSubPremiseNumber;
            theSubPremiseNumber = (this.isSetSubPremiseNumber()?this.getSubPremiseNumber():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subPremiseNumber", theSubPremiseNumber), currentHashCode, theSubPremiseNumber);
        }
        {
            List<SubPremiseType.SubPremiseNumberPrefix> theSubPremiseNumberPrefix;
            theSubPremiseNumberPrefix = (this.isSetSubPremiseNumberPrefix()?this.getSubPremiseNumberPrefix():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subPremiseNumberPrefix", theSubPremiseNumberPrefix), currentHashCode, theSubPremiseNumberPrefix);
        }
        {
            List<SubPremiseType.SubPremiseNumberSuffix> theSubPremiseNumberSuffix;
            theSubPremiseNumberSuffix = (this.isSetSubPremiseNumberSuffix()?this.getSubPremiseNumberSuffix():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subPremiseNumberSuffix", theSubPremiseNumberSuffix), currentHashCode, theSubPremiseNumberSuffix);
        }
        {
            List<BuildingNameType> theBuildingName;
            theBuildingName = (this.isSetBuildingName()?this.getBuildingName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "buildingName", theBuildingName), currentHashCode, theBuildingName);
        }
        {
            FirmType theFirm;
            theFirm = this.getFirm();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firm", theFirm), currentHashCode, theFirm);
        }
        {
            MailStopType theMailStop;
            theMailStop = this.getMailStop();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mailStop", theMailStop), currentHashCode, theMailStop);
        }
        {
            PostalCodeElement thePostalCode;
            thePostalCode = this.getPostalCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postalCode", thePostalCode), currentHashCode, thePostalCode);
        }
        {
            SubPremiseType theSubPremise;
            theSubPremise = this.getSubPremise();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subPremise", theSubPremise), currentHashCode, theSubPremise);
        }
        {
            List<Object> theAny;
            theAny = (this.isSetAny()?this.getAny():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
        }
        {
            String theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SubPremiseType) {
            final SubPremiseType copy = ((SubPremiseType) draftCopy);
            if (this.isSetAddressLine()) {
                List<AddressLineElement> sourceAddressLine;
                sourceAddressLine = (this.isSetAddressLine()?this.getAddressLine():null);
                @SuppressWarnings("unchecked")
                List<AddressLineElement> copyAddressLine = ((List<AddressLineElement> ) strategy.copy(LocatorUtils.property(locator, "addressLine", sourceAddressLine), sourceAddressLine));
                copy.unsetAddressLine();
                if (copyAddressLine!= null) {
                    List<AddressLineElement> uniqueAddressLinel = copy.getAddressLine();
                    uniqueAddressLinel.addAll(copyAddressLine);
                }
            } else {
                copy.unsetAddressLine();
            }
            if (this.isSetSubPremiseName()) {
                List<SubPremiseType.SubPremiseName> sourceSubPremiseName;
                sourceSubPremiseName = (this.isSetSubPremiseName()?this.getSubPremiseName():null);
                @SuppressWarnings("unchecked")
                List<SubPremiseType.SubPremiseName> copySubPremiseName = ((List<SubPremiseType.SubPremiseName> ) strategy.copy(LocatorUtils.property(locator, "subPremiseName", sourceSubPremiseName), sourceSubPremiseName));
                copy.unsetSubPremiseName();
                if (copySubPremiseName!= null) {
                    List<SubPremiseType.SubPremiseName> uniqueSubPremiseNamel = copy.getSubPremiseName();
                    uniqueSubPremiseNamel.addAll(copySubPremiseName);
                }
            } else {
                copy.unsetSubPremiseName();
            }
            if (this.isSetSubPremiseLocation()) {
                SubPremiseType.SubPremiseLocation sourceSubPremiseLocation;
                sourceSubPremiseLocation = this.getSubPremiseLocation();
                SubPremiseType.SubPremiseLocation copySubPremiseLocation = ((SubPremiseType.SubPremiseLocation) strategy.copy(LocatorUtils.property(locator, "subPremiseLocation", sourceSubPremiseLocation), sourceSubPremiseLocation));
                copy.setSubPremiseLocation(copySubPremiseLocation);
            } else {
                copy.subPremiseLocation = null;
            }
            if (this.isSetSubPremiseNumber()) {
                List<SubPremiseType.SubPremiseNumber> sourceSubPremiseNumber;
                sourceSubPremiseNumber = (this.isSetSubPremiseNumber()?this.getSubPremiseNumber():null);
                @SuppressWarnings("unchecked")
                List<SubPremiseType.SubPremiseNumber> copySubPremiseNumber = ((List<SubPremiseType.SubPremiseNumber> ) strategy.copy(LocatorUtils.property(locator, "subPremiseNumber", sourceSubPremiseNumber), sourceSubPremiseNumber));
                copy.unsetSubPremiseNumber();
                if (copySubPremiseNumber!= null) {
                    List<SubPremiseType.SubPremiseNumber> uniqueSubPremiseNumberl = copy.getSubPremiseNumber();
                    uniqueSubPremiseNumberl.addAll(copySubPremiseNumber);
                }
            } else {
                copy.unsetSubPremiseNumber();
            }
            if (this.isSetSubPremiseNumberPrefix()) {
                List<SubPremiseType.SubPremiseNumberPrefix> sourceSubPremiseNumberPrefix;
                sourceSubPremiseNumberPrefix = (this.isSetSubPremiseNumberPrefix()?this.getSubPremiseNumberPrefix():null);
                @SuppressWarnings("unchecked")
                List<SubPremiseType.SubPremiseNumberPrefix> copySubPremiseNumberPrefix = ((List<SubPremiseType.SubPremiseNumberPrefix> ) strategy.copy(LocatorUtils.property(locator, "subPremiseNumberPrefix", sourceSubPremiseNumberPrefix), sourceSubPremiseNumberPrefix));
                copy.unsetSubPremiseNumberPrefix();
                if (copySubPremiseNumberPrefix!= null) {
                    List<SubPremiseType.SubPremiseNumberPrefix> uniqueSubPremiseNumberPrefixl = copy.getSubPremiseNumberPrefix();
                    uniqueSubPremiseNumberPrefixl.addAll(copySubPremiseNumberPrefix);
                }
            } else {
                copy.unsetSubPremiseNumberPrefix();
            }
            if (this.isSetSubPremiseNumberSuffix()) {
                List<SubPremiseType.SubPremiseNumberSuffix> sourceSubPremiseNumberSuffix;
                sourceSubPremiseNumberSuffix = (this.isSetSubPremiseNumberSuffix()?this.getSubPremiseNumberSuffix():null);
                @SuppressWarnings("unchecked")
                List<SubPremiseType.SubPremiseNumberSuffix> copySubPremiseNumberSuffix = ((List<SubPremiseType.SubPremiseNumberSuffix> ) strategy.copy(LocatorUtils.property(locator, "subPremiseNumberSuffix", sourceSubPremiseNumberSuffix), sourceSubPremiseNumberSuffix));
                copy.unsetSubPremiseNumberSuffix();
                if (copySubPremiseNumberSuffix!= null) {
                    List<SubPremiseType.SubPremiseNumberSuffix> uniqueSubPremiseNumberSuffixl = copy.getSubPremiseNumberSuffix();
                    uniqueSubPremiseNumberSuffixl.addAll(copySubPremiseNumberSuffix);
                }
            } else {
                copy.unsetSubPremiseNumberSuffix();
            }
            if (this.isSetBuildingName()) {
                List<BuildingNameType> sourceBuildingName;
                sourceBuildingName = (this.isSetBuildingName()?this.getBuildingName():null);
                @SuppressWarnings("unchecked")
                List<BuildingNameType> copyBuildingName = ((List<BuildingNameType> ) strategy.copy(LocatorUtils.property(locator, "buildingName", sourceBuildingName), sourceBuildingName));
                copy.unsetBuildingName();
                if (copyBuildingName!= null) {
                    List<BuildingNameType> uniqueBuildingNamel = copy.getBuildingName();
                    uniqueBuildingNamel.addAll(copyBuildingName);
                }
            } else {
                copy.unsetBuildingName();
            }
            if (this.isSetFirm()) {
                FirmType sourceFirm;
                sourceFirm = this.getFirm();
                FirmType copyFirm = ((FirmType) strategy.copy(LocatorUtils.property(locator, "firm", sourceFirm), sourceFirm));
                copy.setFirm(copyFirm);
            } else {
                copy.firm = null;
            }
            if (this.isSetMailStop()) {
                MailStopType sourceMailStop;
                sourceMailStop = this.getMailStop();
                MailStopType copyMailStop = ((MailStopType) strategy.copy(LocatorUtils.property(locator, "mailStop", sourceMailStop), sourceMailStop));
                copy.setMailStop(copyMailStop);
            } else {
                copy.mailStop = null;
            }
            if (this.isSetPostalCode()) {
                PostalCodeElement sourcePostalCode;
                sourcePostalCode = this.getPostalCode();
                PostalCodeElement copyPostalCode = ((PostalCodeElement) strategy.copy(LocatorUtils.property(locator, "postalCode", sourcePostalCode), sourcePostalCode));
                copy.setPostalCode(copyPostalCode);
            } else {
                copy.postalCode = null;
            }
            if (this.isSetSubPremise()) {
                SubPremiseType sourceSubPremise;
                sourceSubPremise = this.getSubPremise();
                SubPremiseType copySubPremise = ((SubPremiseType) strategy.copy(LocatorUtils.property(locator, "subPremise", sourceSubPremise), sourceSubPremise));
                copy.setSubPremise(copySubPremise);
            } else {
                copy.subPremise = null;
            }
            if (this.isSetAny()) {
                List<Object> sourceAny;
                sourceAny = (this.isSetAny()?this.getAny():null);
                @SuppressWarnings("unchecked")
                List<Object> copyAny = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "any", sourceAny), sourceAny));
                copy.unsetAny();
                if (copyAny!= null) {
                    List<Object> uniqueAnyl = copy.getAny();
                    uniqueAnyl.addAll(copyAny);
                }
            } else {
                copy.unsetAny();
            }
            if (this.isSetType()) {
                String sourceType;
                sourceType = this.getType();
                String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SubPremiseType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class SubPremiseLocation
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SubPremiseType.SubPremiseLocation)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SubPremiseType.SubPremiseLocation that = ((SubPremiseType.SubPremiseLocation) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SubPremiseType.SubPremiseLocation) {
                final SubPremiseType.SubPremiseLocation copy = ((SubPremiseType.SubPremiseLocation) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SubPremiseType.SubPremiseLocation();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="TypeOccurrence"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Before"/&gt;
     *             &lt;enumeration value="After"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class SubPremiseName
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "TypeOccurrence")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String typeOccurrence;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the typeOccurrence property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getTypeOccurrence() {
            return typeOccurrence;
        }

        /**
         * Sets the value of the typeOccurrence property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setTypeOccurrence(String value) {
            this.typeOccurrence = value;
        }

        public boolean isSetTypeOccurrence() {
            return (this.typeOccurrence!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theTypeOccurrence;
                theTypeOccurrence = this.getTypeOccurrence();
                strategy.appendField(locator, this, "typeOccurrence", buffer, theTypeOccurrence);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SubPremiseType.SubPremiseName)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SubPremiseType.SubPremiseName that = ((SubPremiseType.SubPremiseName) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsTypeOccurrence;
                lhsTypeOccurrence = this.getTypeOccurrence();
                String rhsTypeOccurrence;
                rhsTypeOccurrence = that.getTypeOccurrence();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "typeOccurrence", lhsTypeOccurrence), LocatorUtils.property(thatLocator, "typeOccurrence", rhsTypeOccurrence), lhsTypeOccurrence, rhsTypeOccurrence)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theTypeOccurrence;
                theTypeOccurrence = this.getTypeOccurrence();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "typeOccurrence", theTypeOccurrence), currentHashCode, theTypeOccurrence);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SubPremiseType.SubPremiseName) {
                final SubPremiseType.SubPremiseName copy = ((SubPremiseType.SubPremiseName) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetTypeOccurrence()) {
                    String sourceTypeOccurrence;
                    sourceTypeOccurrence = this.getTypeOccurrence();
                    String copyTypeOccurrence = ((String) strategy.copy(LocatorUtils.property(locator, "typeOccurrence", sourceTypeOccurrence), sourceTypeOccurrence));
                    copy.setTypeOccurrence(copyTypeOccurrence);
                } else {
                    copy.typeOccurrence = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SubPremiseType.SubPremiseName();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="Indicator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="IndicatorOccurrence"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Before"/&gt;
     *             &lt;enumeration value="After"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="NumberTypeOccurrence"&gt;
     *         &lt;simpleType&gt;
     *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
     *             &lt;enumeration value="Before"/&gt;
     *             &lt;enumeration value="After"/&gt;
     *           &lt;/restriction&gt;
     *         &lt;/simpleType&gt;
     *       &lt;/attribute&gt;
     *       &lt;attribute name="PremiseNumberSeparator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class SubPremiseNumber
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "Indicator")
        @XmlSchemaType(name = "anySimpleType")
        protected String indicator;
        @XmlAttribute(name = "IndicatorOccurrence")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String indicatorOccurrence;
        @XmlAttribute(name = "NumberTypeOccurrence")
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        protected String numberTypeOccurrence;
        @XmlAttribute(name = "PremiseNumberSeparator")
        @XmlSchemaType(name = "anySimpleType")
        protected String premiseNumberSeparator;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the indicator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getIndicator() {
            return indicator;
        }

        /**
         * Sets the value of the indicator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setIndicator(String value) {
            this.indicator = value;
        }

        public boolean isSetIndicator() {
            return (this.indicator!= null);
        }

        /**
         * Gets the value of the indicatorOccurrence property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getIndicatorOccurrence() {
            return indicatorOccurrence;
        }

        /**
         * Sets the value of the indicatorOccurrence property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setIndicatorOccurrence(String value) {
            this.indicatorOccurrence = value;
        }

        public boolean isSetIndicatorOccurrence() {
            return (this.indicatorOccurrence!= null);
        }

        /**
         * Gets the value of the numberTypeOccurrence property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNumberTypeOccurrence() {
            return numberTypeOccurrence;
        }

        /**
         * Sets the value of the numberTypeOccurrence property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNumberTypeOccurrence(String value) {
            this.numberTypeOccurrence = value;
        }

        public boolean isSetNumberTypeOccurrence() {
            return (this.numberTypeOccurrence!= null);
        }

        /**
         * Gets the value of the premiseNumberSeparator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getPremiseNumberSeparator() {
            return premiseNumberSeparator;
        }

        /**
         * Sets the value of the premiseNumberSeparator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setPremiseNumberSeparator(String value) {
            this.premiseNumberSeparator = value;
        }

        public boolean isSetPremiseNumberSeparator() {
            return (this.premiseNumberSeparator!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theIndicator;
                theIndicator = this.getIndicator();
                strategy.appendField(locator, this, "indicator", buffer, theIndicator);
            }
            {
                String theIndicatorOccurrence;
                theIndicatorOccurrence = this.getIndicatorOccurrence();
                strategy.appendField(locator, this, "indicatorOccurrence", buffer, theIndicatorOccurrence);
            }
            {
                String theNumberTypeOccurrence;
                theNumberTypeOccurrence = this.getNumberTypeOccurrence();
                strategy.appendField(locator, this, "numberTypeOccurrence", buffer, theNumberTypeOccurrence);
            }
            {
                String thePremiseNumberSeparator;
                thePremiseNumberSeparator = this.getPremiseNumberSeparator();
                strategy.appendField(locator, this, "premiseNumberSeparator", buffer, thePremiseNumberSeparator);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SubPremiseType.SubPremiseNumber)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SubPremiseType.SubPremiseNumber that = ((SubPremiseType.SubPremiseNumber) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsIndicator;
                lhsIndicator = this.getIndicator();
                String rhsIndicator;
                rhsIndicator = that.getIndicator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "indicator", lhsIndicator), LocatorUtils.property(thatLocator, "indicator", rhsIndicator), lhsIndicator, rhsIndicator)) {
                    return false;
                }
            }
            {
                String lhsIndicatorOccurrence;
                lhsIndicatorOccurrence = this.getIndicatorOccurrence();
                String rhsIndicatorOccurrence;
                rhsIndicatorOccurrence = that.getIndicatorOccurrence();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "indicatorOccurrence", lhsIndicatorOccurrence), LocatorUtils.property(thatLocator, "indicatorOccurrence", rhsIndicatorOccurrence), lhsIndicatorOccurrence, rhsIndicatorOccurrence)) {
                    return false;
                }
            }
            {
                String lhsNumberTypeOccurrence;
                lhsNumberTypeOccurrence = this.getNumberTypeOccurrence();
                String rhsNumberTypeOccurrence;
                rhsNumberTypeOccurrence = that.getNumberTypeOccurrence();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "numberTypeOccurrence", lhsNumberTypeOccurrence), LocatorUtils.property(thatLocator, "numberTypeOccurrence", rhsNumberTypeOccurrence), lhsNumberTypeOccurrence, rhsNumberTypeOccurrence)) {
                    return false;
                }
            }
            {
                String lhsPremiseNumberSeparator;
                lhsPremiseNumberSeparator = this.getPremiseNumberSeparator();
                String rhsPremiseNumberSeparator;
                rhsPremiseNumberSeparator = that.getPremiseNumberSeparator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "premiseNumberSeparator", lhsPremiseNumberSeparator), LocatorUtils.property(thatLocator, "premiseNumberSeparator", rhsPremiseNumberSeparator), lhsPremiseNumberSeparator, rhsPremiseNumberSeparator)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theIndicator;
                theIndicator = this.getIndicator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicator", theIndicator), currentHashCode, theIndicator);
            }
            {
                String theIndicatorOccurrence;
                theIndicatorOccurrence = this.getIndicatorOccurrence();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indicatorOccurrence", theIndicatorOccurrence), currentHashCode, theIndicatorOccurrence);
            }
            {
                String theNumberTypeOccurrence;
                theNumberTypeOccurrence = this.getNumberTypeOccurrence();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberTypeOccurrence", theNumberTypeOccurrence), currentHashCode, theNumberTypeOccurrence);
            }
            {
                String thePremiseNumberSeparator;
                thePremiseNumberSeparator = this.getPremiseNumberSeparator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "premiseNumberSeparator", thePremiseNumberSeparator), currentHashCode, thePremiseNumberSeparator);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SubPremiseType.SubPremiseNumber) {
                final SubPremiseType.SubPremiseNumber copy = ((SubPremiseType.SubPremiseNumber) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetIndicator()) {
                    String sourceIndicator;
                    sourceIndicator = this.getIndicator();
                    String copyIndicator = ((String) strategy.copy(LocatorUtils.property(locator, "indicator", sourceIndicator), sourceIndicator));
                    copy.setIndicator(copyIndicator);
                } else {
                    copy.indicator = null;
                }
                if (this.isSetIndicatorOccurrence()) {
                    String sourceIndicatorOccurrence;
                    sourceIndicatorOccurrence = this.getIndicatorOccurrence();
                    String copyIndicatorOccurrence = ((String) strategy.copy(LocatorUtils.property(locator, "indicatorOccurrence", sourceIndicatorOccurrence), sourceIndicatorOccurrence));
                    copy.setIndicatorOccurrence(copyIndicatorOccurrence);
                } else {
                    copy.indicatorOccurrence = null;
                }
                if (this.isSetNumberTypeOccurrence()) {
                    String sourceNumberTypeOccurrence;
                    sourceNumberTypeOccurrence = this.getNumberTypeOccurrence();
                    String copyNumberTypeOccurrence = ((String) strategy.copy(LocatorUtils.property(locator, "numberTypeOccurrence", sourceNumberTypeOccurrence), sourceNumberTypeOccurrence));
                    copy.setNumberTypeOccurrence(copyNumberTypeOccurrence);
                } else {
                    copy.numberTypeOccurrence = null;
                }
                if (this.isSetPremiseNumberSeparator()) {
                    String sourcePremiseNumberSeparator;
                    sourcePremiseNumberSeparator = this.getPremiseNumberSeparator();
                    String copyPremiseNumberSeparator = ((String) strategy.copy(LocatorUtils.property(locator, "premiseNumberSeparator", sourcePremiseNumberSeparator), sourcePremiseNumberSeparator));
                    copy.setPremiseNumberSeparator(copyPremiseNumberSeparator);
                } else {
                    copy.premiseNumberSeparator = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SubPremiseType.SubPremiseNumber();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="NumberPrefixSeparator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class SubPremiseNumberPrefix
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "NumberPrefixSeparator")
        @XmlSchemaType(name = "anySimpleType")
        protected String numberPrefixSeparator;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the numberPrefixSeparator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNumberPrefixSeparator() {
            return numberPrefixSeparator;
        }

        /**
         * Sets the value of the numberPrefixSeparator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNumberPrefixSeparator(String value) {
            this.numberPrefixSeparator = value;
        }

        public boolean isSetNumberPrefixSeparator() {
            return (this.numberPrefixSeparator!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theNumberPrefixSeparator;
                theNumberPrefixSeparator = this.getNumberPrefixSeparator();
                strategy.appendField(locator, this, "numberPrefixSeparator", buffer, theNumberPrefixSeparator);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SubPremiseType.SubPremiseNumberPrefix)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SubPremiseType.SubPremiseNumberPrefix that = ((SubPremiseType.SubPremiseNumberPrefix) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsNumberPrefixSeparator;
                lhsNumberPrefixSeparator = this.getNumberPrefixSeparator();
                String rhsNumberPrefixSeparator;
                rhsNumberPrefixSeparator = that.getNumberPrefixSeparator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "numberPrefixSeparator", lhsNumberPrefixSeparator), LocatorUtils.property(thatLocator, "numberPrefixSeparator", rhsNumberPrefixSeparator), lhsNumberPrefixSeparator, rhsNumberPrefixSeparator)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theNumberPrefixSeparator;
                theNumberPrefixSeparator = this.getNumberPrefixSeparator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberPrefixSeparator", theNumberPrefixSeparator), currentHashCode, theNumberPrefixSeparator);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SubPremiseType.SubPremiseNumberPrefix) {
                final SubPremiseType.SubPremiseNumberPrefix copy = ((SubPremiseType.SubPremiseNumberPrefix) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetNumberPrefixSeparator()) {
                    String sourceNumberPrefixSeparator;
                    sourceNumberPrefixSeparator = this.getNumberPrefixSeparator();
                    String copyNumberPrefixSeparator = ((String) strategy.copy(LocatorUtils.property(locator, "numberPrefixSeparator", sourceNumberPrefixSeparator), sourceNumberPrefixSeparator));
                    copy.setNumberPrefixSeparator(copyNumberPrefixSeparator);
                } else {
                    copy.numberPrefixSeparator = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SubPremiseType.SubPremiseNumberPrefix();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;attGroup ref="{urn:oasis:names:tc:ciq:xsdschema:xAL:2.0}grPostal"/&gt;
     *       &lt;attribute name="NumberSuffixSeparator" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;attribute name="Type" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" /&gt;
     *       &lt;anyAttribute namespace='##other'/&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "content"
    })
    public static class SubPremiseNumberSuffix
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected String content;
        @XmlAttribute(name = "NumberSuffixSeparator")
        @XmlSchemaType(name = "anySimpleType")
        protected String numberSuffixSeparator;
        @XmlAttribute(name = "Type")
        @XmlSchemaType(name = "anySimpleType")
        protected String type;
        @XmlAttribute(name = "Code")
        @XmlSchemaType(name = "anySimpleType")
        protected String code;
        @XmlAnyAttribute
        private Map<QName, String> otherAttributes = new HashMap<QName, String>();

        /**
         * Gets the value of the content property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getContent() {
            return content;
        }

        /**
         * Sets the value of the content property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setContent(String value) {
            this.content = value;
        }

        public boolean isSetContent() {
            return (this.content!= null);
        }

        /**
         * Gets the value of the numberSuffixSeparator property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getNumberSuffixSeparator() {
            return numberSuffixSeparator;
        }

        /**
         * Sets the value of the numberSuffixSeparator property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setNumberSuffixSeparator(String value) {
            this.numberSuffixSeparator = value;
        }

        public boolean isSetNumberSuffixSeparator() {
            return (this.numberSuffixSeparator!= null);
        }

        /**
         * Gets the value of the type property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getType() {
            return type;
        }

        /**
         * Sets the value of the type property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setType(String value) {
            this.type = value;
        }

        public boolean isSetType() {
            return (this.type!= null);
        }

        /**
         * Gets the value of the code property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getCode() {
            return code;
        }

        /**
         * Sets the value of the code property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setCode(String value) {
            this.code = value;
        }

        public boolean isSetCode() {
            return (this.code!= null);
        }

        /**
         * Gets a map that contains attributes that aren't bound to any typed property on this class.
         * 
         * <p>
         * the map is keyed by the name of the attribute and 
         * the value is the string value of the attribute.
         * 
         * the map returned by this method is live, and you can add new attribute
         * by updating the map directly. Because of this design, there's no setter.
         * 
         * 
         * @return
         *     always non-null
         */
        public Map<QName, String> getOtherAttributes() {
            return otherAttributes;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                String theContent;
                theContent = this.getContent();
                strategy.appendField(locator, this, "content", buffer, theContent);
            }
            {
                String theNumberSuffixSeparator;
                theNumberSuffixSeparator = this.getNumberSuffixSeparator();
                strategy.appendField(locator, this, "numberSuffixSeparator", buffer, theNumberSuffixSeparator);
            }
            {
                String theType;
                theType = this.getType();
                strategy.appendField(locator, this, "type", buffer, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                strategy.appendField(locator, this, "code", buffer, theCode);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof SubPremiseType.SubPremiseNumberSuffix)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final SubPremiseType.SubPremiseNumberSuffix that = ((SubPremiseType.SubPremiseNumberSuffix) object);
            {
                String lhsContent;
                lhsContent = this.getContent();
                String rhsContent;
                rhsContent = that.getContent();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                    return false;
                }
            }
            {
                String lhsNumberSuffixSeparator;
                lhsNumberSuffixSeparator = this.getNumberSuffixSeparator();
                String rhsNumberSuffixSeparator;
                rhsNumberSuffixSeparator = that.getNumberSuffixSeparator();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "numberSuffixSeparator", lhsNumberSuffixSeparator), LocatorUtils.property(thatLocator, "numberSuffixSeparator", rhsNumberSuffixSeparator), lhsNumberSuffixSeparator, rhsNumberSuffixSeparator)) {
                    return false;
                }
            }
            {
                String lhsType;
                lhsType = this.getType();
                String rhsType;
                rhsType = that.getType();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                    return false;
                }
            }
            {
                String lhsCode;
                lhsCode = this.getCode();
                String rhsCode;
                rhsCode = that.getCode();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                String theContent;
                theContent = this.getContent();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
            }
            {
                String theNumberSuffixSeparator;
                theNumberSuffixSeparator = this.getNumberSuffixSeparator();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberSuffixSeparator", theNumberSuffixSeparator), currentHashCode, theNumberSuffixSeparator);
            }
            {
                String theType;
                theType = this.getType();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
            }
            {
                String theCode;
                theCode = this.getCode();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SubPremiseType.SubPremiseNumberSuffix) {
                final SubPremiseType.SubPremiseNumberSuffix copy = ((SubPremiseType.SubPremiseNumberSuffix) draftCopy);
                if (this.isSetContent()) {
                    String sourceContent;
                    sourceContent = this.getContent();
                    String copyContent = ((String) strategy.copy(LocatorUtils.property(locator, "content", sourceContent), sourceContent));
                    copy.setContent(copyContent);
                } else {
                    copy.content = null;
                }
                if (this.isSetNumberSuffixSeparator()) {
                    String sourceNumberSuffixSeparator;
                    sourceNumberSuffixSeparator = this.getNumberSuffixSeparator();
                    String copyNumberSuffixSeparator = ((String) strategy.copy(LocatorUtils.property(locator, "numberSuffixSeparator", sourceNumberSuffixSeparator), sourceNumberSuffixSeparator));
                    copy.setNumberSuffixSeparator(copyNumberSuffixSeparator);
                } else {
                    copy.numberSuffixSeparator = null;
                }
                if (this.isSetType()) {
                    String sourceType;
                    sourceType = this.getType();
                    String copyType = ((String) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                    copy.setType(copyType);
                } else {
                    copy.type = null;
                }
                if (this.isSetCode()) {
                    String sourceCode;
                    sourceCode = this.getCode();
                    String copyCode = ((String) strategy.copy(LocatorUtils.property(locator, "code", sourceCode), sourceCode));
                    copy.setCode(copyCode);
                } else {
                    copy.code = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SubPremiseType.SubPremiseNumberSuffix();
        }

    }

}
