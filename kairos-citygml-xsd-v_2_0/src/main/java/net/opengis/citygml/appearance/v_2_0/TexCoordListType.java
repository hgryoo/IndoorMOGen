//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.appearance.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Texture parameterization using texture coordinates: Each gml:LinearRing that is part of the surface
 * 				requires a separate "textureCoordinates"-entry with 2 doubles per ring vertex. The "ring"- attribute provides the gml:id
 * 				of the target LinearRing. It is prohibited to link texture coordinates to any other object type than LinearRing. Thus,
 * 				surfaces not consisting of LinearRings cannot be textured this way. Use transformation matrices (see below) or
 * 				georeferenced textures instead. 
 * 
 * <p>Java class for TexCoordListType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TexCoordListType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/appearance/2.0}AbstractTextureParameterizationType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="textureCoordinates" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opengis.net/gml&gt;doubleList"&gt;
 *                 &lt;attribute name="ring" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/appearance/2.0}_GenericApplicationPropertyOfTexCoordList" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TexCoordListType", propOrder = {
    "textureCoordinates",
    "genericApplicationPropertyOfTexCoordList"
})
public class TexCoordListType
    extends AbstractTextureParameterizationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected List<TexCoordListType.TextureCoordinates> textureCoordinates;
    @XmlElement(name = "_GenericApplicationPropertyOfTexCoordList")
    protected List<Object> genericApplicationPropertyOfTexCoordList;

    /**
     * Gets the value of the textureCoordinates property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the textureCoordinates property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTextureCoordinates().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TexCoordListType.TextureCoordinates }
     * 
     * 
     */
    public List<TexCoordListType.TextureCoordinates> getTextureCoordinates() {
        if (textureCoordinates == null) {
            textureCoordinates = new ArrayList<TexCoordListType.TextureCoordinates>();
        }
        return this.textureCoordinates;
    }

    public boolean isSetTextureCoordinates() {
        return ((this.textureCoordinates!= null)&&(!this.textureCoordinates.isEmpty()));
    }

    public void unsetTextureCoordinates() {
        this.textureCoordinates = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfTexCoordList property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfTexCoordList property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfTexCoordList().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfTexCoordList() {
        if (genericApplicationPropertyOfTexCoordList == null) {
            genericApplicationPropertyOfTexCoordList = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfTexCoordList;
    }

    public boolean isSetGenericApplicationPropertyOfTexCoordList() {
        return ((this.genericApplicationPropertyOfTexCoordList!= null)&&(!this.genericApplicationPropertyOfTexCoordList.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfTexCoordList() {
        this.genericApplicationPropertyOfTexCoordList = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<TexCoordListType.TextureCoordinates> theTextureCoordinates;
            theTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
            strategy.appendField(locator, this, "textureCoordinates", buffer, theTextureCoordinates);
        }
        {
            List<Object> theGenericApplicationPropertyOfTexCoordList;
            theGenericApplicationPropertyOfTexCoordList = (this.isSetGenericApplicationPropertyOfTexCoordList()?this.getGenericApplicationPropertyOfTexCoordList():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfTexCoordList", buffer, theGenericApplicationPropertyOfTexCoordList);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TexCoordListType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TexCoordListType that = ((TexCoordListType) object);
        {
            List<TexCoordListType.TextureCoordinates> lhsTextureCoordinates;
            lhsTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
            List<TexCoordListType.TextureCoordinates> rhsTextureCoordinates;
            rhsTextureCoordinates = (that.isSetTextureCoordinates()?that.getTextureCoordinates():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textureCoordinates", lhsTextureCoordinates), LocatorUtils.property(thatLocator, "textureCoordinates", rhsTextureCoordinates), lhsTextureCoordinates, rhsTextureCoordinates)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfTexCoordList;
            lhsGenericApplicationPropertyOfTexCoordList = (this.isSetGenericApplicationPropertyOfTexCoordList()?this.getGenericApplicationPropertyOfTexCoordList():null);
            List<Object> rhsGenericApplicationPropertyOfTexCoordList;
            rhsGenericApplicationPropertyOfTexCoordList = (that.isSetGenericApplicationPropertyOfTexCoordList()?that.getGenericApplicationPropertyOfTexCoordList():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfTexCoordList", lhsGenericApplicationPropertyOfTexCoordList), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfTexCoordList", rhsGenericApplicationPropertyOfTexCoordList), lhsGenericApplicationPropertyOfTexCoordList, rhsGenericApplicationPropertyOfTexCoordList)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<TexCoordListType.TextureCoordinates> theTextureCoordinates;
            theTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textureCoordinates", theTextureCoordinates), currentHashCode, theTextureCoordinates);
        }
        {
            List<Object> theGenericApplicationPropertyOfTexCoordList;
            theGenericApplicationPropertyOfTexCoordList = (this.isSetGenericApplicationPropertyOfTexCoordList()?this.getGenericApplicationPropertyOfTexCoordList():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfTexCoordList", theGenericApplicationPropertyOfTexCoordList), currentHashCode, theGenericApplicationPropertyOfTexCoordList);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof TexCoordListType) {
            final TexCoordListType copy = ((TexCoordListType) draftCopy);
            if (this.isSetTextureCoordinates()) {
                List<TexCoordListType.TextureCoordinates> sourceTextureCoordinates;
                sourceTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
                @SuppressWarnings("unchecked")
                List<TexCoordListType.TextureCoordinates> copyTextureCoordinates = ((List<TexCoordListType.TextureCoordinates> ) strategy.copy(LocatorUtils.property(locator, "textureCoordinates", sourceTextureCoordinates), sourceTextureCoordinates));
                copy.unsetTextureCoordinates();
                if (copyTextureCoordinates!= null) {
                    List<TexCoordListType.TextureCoordinates> uniqueTextureCoordinatesl = copy.getTextureCoordinates();
                    uniqueTextureCoordinatesl.addAll(copyTextureCoordinates);
                }
            } else {
                copy.unsetTextureCoordinates();
            }
            if (this.isSetGenericApplicationPropertyOfTexCoordList()) {
                List<Object> sourceGenericApplicationPropertyOfTexCoordList;
                sourceGenericApplicationPropertyOfTexCoordList = (this.isSetGenericApplicationPropertyOfTexCoordList()?this.getGenericApplicationPropertyOfTexCoordList():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfTexCoordList = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfTexCoordList", sourceGenericApplicationPropertyOfTexCoordList), sourceGenericApplicationPropertyOfTexCoordList));
                copy.unsetGenericApplicationPropertyOfTexCoordList();
                if (copyGenericApplicationPropertyOfTexCoordList!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfTexCoordListl = copy.getGenericApplicationPropertyOfTexCoordList();
                    uniqueGenericApplicationPropertyOfTexCoordListl.addAll(copyGenericApplicationPropertyOfTexCoordList);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfTexCoordList();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TexCoordListType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opengis.net/gml&gt;doubleList"&gt;
     *       &lt;attribute name="ring" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class TextureCoordinates
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected List<Double> value;
        @XmlAttribute(name = "ring", required = true)
        @XmlSchemaType(name = "anyURI")
        protected String ring;

        /**
         * XML List based on XML Schema double type.  An element of this type contains a space-separated list of double values Gets the value of the value property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the value property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getValue().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Double }
         * 
         * 
         */
        public List<Double> getValue() {
            if (value == null) {
                value = new ArrayList<Double>();
            }
            return this.value;
        }

        public boolean isSetValue() {
            return ((this.value!= null)&&(!this.value.isEmpty()));
        }

        public void unsetValue() {
            this.value = null;
        }

        /**
         * Gets the value of the ring property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getRing() {
            return ring;
        }

        /**
         * Sets the value of the ring property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setRing(String value) {
            this.ring = value;
        }

        public boolean isSetRing() {
            return (this.ring!= null);
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Double> theValue;
                theValue = (this.isSetValue()?this.getValue():null);
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                String theRing;
                theRing = this.getRing();
                strategy.appendField(locator, this, "ring", buffer, theRing);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TexCoordListType.TextureCoordinates)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final TexCoordListType.TextureCoordinates that = ((TexCoordListType.TextureCoordinates) object);
            {
                List<Double> lhsValue;
                lhsValue = (this.isSetValue()?this.getValue():null);
                List<Double> rhsValue;
                rhsValue = (that.isSetValue()?that.getValue():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                String lhsRing;
                lhsRing = this.getRing();
                String rhsRing;
                rhsRing = that.getRing();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "ring", lhsRing), LocatorUtils.property(thatLocator, "ring", rhsRing), lhsRing, rhsRing)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Double> theValue;
                theValue = (this.isSetValue()?this.getValue():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                String theRing;
                theRing = this.getRing();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ring", theRing), currentHashCode, theRing);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof TexCoordListType.TextureCoordinates) {
                final TexCoordListType.TextureCoordinates copy = ((TexCoordListType.TextureCoordinates) draftCopy);
                if (this.isSetValue()) {
                    List<Double> sourceValue;
                    sourceValue = (this.isSetValue()?this.getValue():null);
                    @SuppressWarnings("unchecked")
                    List<Double> copyValue = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.unsetValue();
                    if (copyValue!= null) {
                        List<Double> uniqueValuel = copy.getValue();
                        uniqueValuel.addAll(copyValue);
                    }
                } else {
                    copy.unsetValue();
                }
                if (this.isSetRing()) {
                    String sourceRing;
                    sourceRing = this.getRing();
                    String copyRing = ((String) strategy.copy(LocatorUtils.property(locator, "ring", sourceRing), sourceRing));
                    copy.setRing(copyRing);
                } else {
                    copy.ring = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new TexCoordListType.TextureCoordinates();
        }

    }

}
