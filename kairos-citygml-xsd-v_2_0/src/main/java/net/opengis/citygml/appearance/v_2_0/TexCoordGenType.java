//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.appearance.v_2_0;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Texture parameterization using a transformation matrix. The transformation matrix "worldToTexture" can be
 * 				used to derive texture coordinates from an object's location. This 3x4 matrix T computes the coordinates (s,t) from a
 * 				homogeneous world position p as (s,t) = (s'/q', t'/q') with (s', t', q') = T*p. Thus, perspective projections can be
 * 				specified. The SRS can be specified using standard attributes. If an object is given in a different reference system, it
 * 				is transformed to the SRS before applying the transformation. A transformation matrix can be used for whole surfaces. It
 * 				is not required to specify it per LinearRing. 
 * 
 * <p>Java class for TexCoordGenType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TexCoordGenType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/appearance/2.0}AbstractTextureParameterizationType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="worldToTexture"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.opengis.net/citygml/2.0&gt;TransformationMatrix3x4Type"&gt;
 *                 &lt;attGroup ref="{http://www.opengis.net/gml}SRSReferenceGroup"/&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/appearance/2.0}_GenericApplicationPropertyOfTexCoordGen" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TexCoordGenType", propOrder = {
    "worldToTexture",
    "genericApplicationPropertyOfTexCoordGen"
})
public class TexCoordGenType
    extends AbstractTextureParameterizationType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected TexCoordGenType.WorldToTexture worldToTexture;
    @XmlElement(name = "_GenericApplicationPropertyOfTexCoordGen")
    protected List<Object> genericApplicationPropertyOfTexCoordGen;

    /**
     * Gets the value of the worldToTexture property.
     * 
     * @return
     *     possible object is
     *     {@link TexCoordGenType.WorldToTexture }
     *     
     */
    public TexCoordGenType.WorldToTexture getWorldToTexture() {
        return worldToTexture;
    }

    /**
     * Sets the value of the worldToTexture property.
     * 
     * @param value
     *     allowed object is
     *     {@link TexCoordGenType.WorldToTexture }
     *     
     */
    public void setWorldToTexture(TexCoordGenType.WorldToTexture value) {
        this.worldToTexture = value;
    }

    public boolean isSetWorldToTexture() {
        return (this.worldToTexture!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfTexCoordGen property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfTexCoordGen property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfTexCoordGen().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfTexCoordGen() {
        if (genericApplicationPropertyOfTexCoordGen == null) {
            genericApplicationPropertyOfTexCoordGen = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfTexCoordGen;
    }

    public boolean isSetGenericApplicationPropertyOfTexCoordGen() {
        return ((this.genericApplicationPropertyOfTexCoordGen!= null)&&(!this.genericApplicationPropertyOfTexCoordGen.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfTexCoordGen() {
        this.genericApplicationPropertyOfTexCoordGen = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            TexCoordGenType.WorldToTexture theWorldToTexture;
            theWorldToTexture = this.getWorldToTexture();
            strategy.appendField(locator, this, "worldToTexture", buffer, theWorldToTexture);
        }
        {
            List<Object> theGenericApplicationPropertyOfTexCoordGen;
            theGenericApplicationPropertyOfTexCoordGen = (this.isSetGenericApplicationPropertyOfTexCoordGen()?this.getGenericApplicationPropertyOfTexCoordGen():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfTexCoordGen", buffer, theGenericApplicationPropertyOfTexCoordGen);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TexCoordGenType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TexCoordGenType that = ((TexCoordGenType) object);
        {
            TexCoordGenType.WorldToTexture lhsWorldToTexture;
            lhsWorldToTexture = this.getWorldToTexture();
            TexCoordGenType.WorldToTexture rhsWorldToTexture;
            rhsWorldToTexture = that.getWorldToTexture();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "worldToTexture", lhsWorldToTexture), LocatorUtils.property(thatLocator, "worldToTexture", rhsWorldToTexture), lhsWorldToTexture, rhsWorldToTexture)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfTexCoordGen;
            lhsGenericApplicationPropertyOfTexCoordGen = (this.isSetGenericApplicationPropertyOfTexCoordGen()?this.getGenericApplicationPropertyOfTexCoordGen():null);
            List<Object> rhsGenericApplicationPropertyOfTexCoordGen;
            rhsGenericApplicationPropertyOfTexCoordGen = (that.isSetGenericApplicationPropertyOfTexCoordGen()?that.getGenericApplicationPropertyOfTexCoordGen():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfTexCoordGen", lhsGenericApplicationPropertyOfTexCoordGen), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfTexCoordGen", rhsGenericApplicationPropertyOfTexCoordGen), lhsGenericApplicationPropertyOfTexCoordGen, rhsGenericApplicationPropertyOfTexCoordGen)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TexCoordGenType.WorldToTexture theWorldToTexture;
            theWorldToTexture = this.getWorldToTexture();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "worldToTexture", theWorldToTexture), currentHashCode, theWorldToTexture);
        }
        {
            List<Object> theGenericApplicationPropertyOfTexCoordGen;
            theGenericApplicationPropertyOfTexCoordGen = (this.isSetGenericApplicationPropertyOfTexCoordGen()?this.getGenericApplicationPropertyOfTexCoordGen():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfTexCoordGen", theGenericApplicationPropertyOfTexCoordGen), currentHashCode, theGenericApplicationPropertyOfTexCoordGen);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof TexCoordGenType) {
            final TexCoordGenType copy = ((TexCoordGenType) draftCopy);
            if (this.isSetWorldToTexture()) {
                TexCoordGenType.WorldToTexture sourceWorldToTexture;
                sourceWorldToTexture = this.getWorldToTexture();
                TexCoordGenType.WorldToTexture copyWorldToTexture = ((TexCoordGenType.WorldToTexture) strategy.copy(LocatorUtils.property(locator, "worldToTexture", sourceWorldToTexture), sourceWorldToTexture));
                copy.setWorldToTexture(copyWorldToTexture);
            } else {
                copy.worldToTexture = null;
            }
            if (this.isSetGenericApplicationPropertyOfTexCoordGen()) {
                List<Object> sourceGenericApplicationPropertyOfTexCoordGen;
                sourceGenericApplicationPropertyOfTexCoordGen = (this.isSetGenericApplicationPropertyOfTexCoordGen()?this.getGenericApplicationPropertyOfTexCoordGen():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfTexCoordGen = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfTexCoordGen", sourceGenericApplicationPropertyOfTexCoordGen), sourceGenericApplicationPropertyOfTexCoordGen));
                copy.unsetGenericApplicationPropertyOfTexCoordGen();
                if (copyGenericApplicationPropertyOfTexCoordGen!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfTexCoordGenl = copy.getGenericApplicationPropertyOfTexCoordGen();
                    uniqueGenericApplicationPropertyOfTexCoordGenl.addAll(copyGenericApplicationPropertyOfTexCoordGen);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfTexCoordGen();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TexCoordGenType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.opengis.net/citygml/2.0&gt;TransformationMatrix3x4Type"&gt;
     *       &lt;attGroup ref="{http://www.opengis.net/gml}SRSReferenceGroup"/&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class WorldToTexture
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        @XmlValue
        protected List<Double> value;
        @XmlAttribute(name = "srsName")
        @XmlSchemaType(name = "anyURI")
        protected String srsName;
        @XmlAttribute(name = "srsDimension")
        @XmlSchemaType(name = "positiveInteger")
        protected BigInteger srsDimension;
        @XmlAttribute(name = "axisLabels")
        protected List<String> axisLabels;
        @XmlAttribute(name = "uomLabels")
        protected List<String> uomLabels;

        /**
         * Used for texture parameterization. The Transformation matrix is a 3 by 4 matrix, thus it must be a list
         * 				with 12 items. The order the matrix element are represented is row-major, i. e. the first 4 elements represent the first
         * 				row, the fifth to the eight element the second row,... Gets the value of the value property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the value property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getValue().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Double }
         * 
         * 
         */
        public List<Double> getValue() {
            if (value == null) {
                value = new ArrayList<Double>();
            }
            return this.value;
        }

        public boolean isSetValue() {
            return ((this.value!= null)&&(!this.value.isEmpty()));
        }

        public void unsetValue() {
            this.value = null;
        }

        /**
         * Gets the value of the srsName property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getSrsName() {
            return srsName;
        }

        /**
         * Sets the value of the srsName property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setSrsName(String value) {
            this.srsName = value;
        }

        public boolean isSetSrsName() {
            return (this.srsName!= null);
        }

        /**
         * Gets the value of the srsDimension property.
         * 
         * @return
         *     possible object is
         *     {@link BigInteger }
         *     
         */
        public BigInteger getSrsDimension() {
            return srsDimension;
        }

        /**
         * Sets the value of the srsDimension property.
         * 
         * @param value
         *     allowed object is
         *     {@link BigInteger }
         *     
         */
        public void setSrsDimension(BigInteger value) {
            this.srsDimension = value;
        }

        public boolean isSetSrsDimension() {
            return (this.srsDimension!= null);
        }

        /**
         * Gets the value of the axisLabels property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the axisLabels property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAxisLabels().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getAxisLabels() {
            if (axisLabels == null) {
                axisLabels = new ArrayList<String>();
            }
            return this.axisLabels;
        }

        public boolean isSetAxisLabels() {
            return ((this.axisLabels!= null)&&(!this.axisLabels.isEmpty()));
        }

        public void unsetAxisLabels() {
            this.axisLabels = null;
        }

        /**
         * Gets the value of the uomLabels property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the uomLabels property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getUomLabels().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link String }
         * 
         * 
         */
        public List<String> getUomLabels() {
            if (uomLabels == null) {
                uomLabels = new ArrayList<String>();
            }
            return this.uomLabels;
        }

        public boolean isSetUomLabels() {
            return ((this.uomLabels!= null)&&(!this.uomLabels.isEmpty()));
        }

        public void unsetUomLabels() {
            this.uomLabels = null;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Double> theValue;
                theValue = (this.isSetValue()?this.getValue():null);
                strategy.appendField(locator, this, "value", buffer, theValue);
            }
            {
                String theSrsName;
                theSrsName = this.getSrsName();
                strategy.appendField(locator, this, "srsName", buffer, theSrsName);
            }
            {
                BigInteger theSrsDimension;
                theSrsDimension = this.getSrsDimension();
                strategy.appendField(locator, this, "srsDimension", buffer, theSrsDimension);
            }
            {
                List<String> theAxisLabels;
                theAxisLabels = (this.isSetAxisLabels()?this.getAxisLabels():null);
                strategy.appendField(locator, this, "axisLabels", buffer, theAxisLabels);
            }
            {
                List<String> theUomLabels;
                theUomLabels = (this.isSetUomLabels()?this.getUomLabels():null);
                strategy.appendField(locator, this, "uomLabels", buffer, theUomLabels);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TexCoordGenType.WorldToTexture)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final TexCoordGenType.WorldToTexture that = ((TexCoordGenType.WorldToTexture) object);
            {
                List<Double> lhsValue;
                lhsValue = (this.isSetValue()?this.getValue():null);
                List<Double> rhsValue;
                rhsValue = (that.isSetValue()?that.getValue():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "value", lhsValue), LocatorUtils.property(thatLocator, "value", rhsValue), lhsValue, rhsValue)) {
                    return false;
                }
            }
            {
                String lhsSrsName;
                lhsSrsName = this.getSrsName();
                String rhsSrsName;
                rhsSrsName = that.getSrsName();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "srsName", lhsSrsName), LocatorUtils.property(thatLocator, "srsName", rhsSrsName), lhsSrsName, rhsSrsName)) {
                    return false;
                }
            }
            {
                BigInteger lhsSrsDimension;
                lhsSrsDimension = this.getSrsDimension();
                BigInteger rhsSrsDimension;
                rhsSrsDimension = that.getSrsDimension();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "srsDimension", lhsSrsDimension), LocatorUtils.property(thatLocator, "srsDimension", rhsSrsDimension), lhsSrsDimension, rhsSrsDimension)) {
                    return false;
                }
            }
            {
                List<String> lhsAxisLabels;
                lhsAxisLabels = (this.isSetAxisLabels()?this.getAxisLabels():null);
                List<String> rhsAxisLabels;
                rhsAxisLabels = (that.isSetAxisLabels()?that.getAxisLabels():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "axisLabels", lhsAxisLabels), LocatorUtils.property(thatLocator, "axisLabels", rhsAxisLabels), lhsAxisLabels, rhsAxisLabels)) {
                    return false;
                }
            }
            {
                List<String> lhsUomLabels;
                lhsUomLabels = (this.isSetUomLabels()?this.getUomLabels():null);
                List<String> rhsUomLabels;
                rhsUomLabels = (that.isSetUomLabels()?that.getUomLabels():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "uomLabels", lhsUomLabels), LocatorUtils.property(thatLocator, "uomLabels", rhsUomLabels), lhsUomLabels, rhsUomLabels)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Double> theValue;
                theValue = (this.isSetValue()?this.getValue():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "value", theValue), currentHashCode, theValue);
            }
            {
                String theSrsName;
                theSrsName = this.getSrsName();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "srsName", theSrsName), currentHashCode, theSrsName);
            }
            {
                BigInteger theSrsDimension;
                theSrsDimension = this.getSrsDimension();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "srsDimension", theSrsDimension), currentHashCode, theSrsDimension);
            }
            {
                List<String> theAxisLabels;
                theAxisLabels = (this.isSetAxisLabels()?this.getAxisLabels():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "axisLabels", theAxisLabels), currentHashCode, theAxisLabels);
            }
            {
                List<String> theUomLabels;
                theUomLabels = (this.isSetUomLabels()?this.getUomLabels():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uomLabels", theUomLabels), currentHashCode, theUomLabels);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof TexCoordGenType.WorldToTexture) {
                final TexCoordGenType.WorldToTexture copy = ((TexCoordGenType.WorldToTexture) draftCopy);
                if (this.isSetValue()) {
                    List<Double> sourceValue;
                    sourceValue = (this.isSetValue()?this.getValue():null);
                    @SuppressWarnings("unchecked")
                    List<Double> copyValue = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue));
                    copy.unsetValue();
                    if (copyValue!= null) {
                        List<Double> uniqueValuel = copy.getValue();
                        uniqueValuel.addAll(copyValue);
                    }
                } else {
                    copy.unsetValue();
                }
                if (this.isSetSrsName()) {
                    String sourceSrsName;
                    sourceSrsName = this.getSrsName();
                    String copySrsName = ((String) strategy.copy(LocatorUtils.property(locator, "srsName", sourceSrsName), sourceSrsName));
                    copy.setSrsName(copySrsName);
                } else {
                    copy.srsName = null;
                }
                if (this.isSetSrsDimension()) {
                    BigInteger sourceSrsDimension;
                    sourceSrsDimension = this.getSrsDimension();
                    BigInteger copySrsDimension = ((BigInteger) strategy.copy(LocatorUtils.property(locator, "srsDimension", sourceSrsDimension), sourceSrsDimension));
                    copy.setSrsDimension(copySrsDimension);
                } else {
                    copy.srsDimension = null;
                }
                if (this.isSetAxisLabels()) {
                    List<String> sourceAxisLabels;
                    sourceAxisLabels = (this.isSetAxisLabels()?this.getAxisLabels():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyAxisLabels = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "axisLabels", sourceAxisLabels), sourceAxisLabels));
                    copy.unsetAxisLabels();
                    if (copyAxisLabels!= null) {
                        List<String> uniqueAxisLabelsl = copy.getAxisLabels();
                        uniqueAxisLabelsl.addAll(copyAxisLabels);
                    }
                } else {
                    copy.unsetAxisLabels();
                }
                if (this.isSetUomLabels()) {
                    List<String> sourceUomLabels;
                    sourceUomLabels = (this.isSetUomLabels()?this.getUomLabels():null);
                    @SuppressWarnings("unchecked")
                    List<String> copyUomLabels = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "uomLabels", sourceUomLabels), sourceUomLabels));
                    copy.unsetUomLabels();
                    if (copyUomLabels!= null) {
                        List<String> uniqueUomLabelsl = copy.getUomLabels();
                        uniqueUomLabelsl.addAll(copyUomLabels);
                    }
                } else {
                    copy.unsetUomLabels();
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new TexCoordGenType.WorldToTexture();
        }

    }

}
