//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.appearance.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.AbstractGMLType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Base class for augmenting a link "texture->surface" with texture parameterization. Subclasses of this
 * 				class define concrete parameterizations. Currently, texture coordinates and texture coordinate generation using a
 * 				transformation matrix are available. 
 * 
 * <p>Java class for AbstractTextureParameterizationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractTextureParameterizationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractGMLType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/appearance/2.0}_GenericApplicationPropertyOfTextureParameterization" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractTextureParameterizationType", propOrder = {
    "genericApplicationPropertyOfTextureParameterization"
})
@XmlSeeAlso({
    TexCoordListType.class,
    TexCoordGenType.class
})
public abstract class AbstractTextureParameterizationType
    extends AbstractGMLType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "_GenericApplicationPropertyOfTextureParameterization")
    protected List<Object> genericApplicationPropertyOfTextureParameterization;

    /**
     * Gets the value of the genericApplicationPropertyOfTextureParameterization property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfTextureParameterization property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfTextureParameterization().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfTextureParameterization() {
        if (genericApplicationPropertyOfTextureParameterization == null) {
            genericApplicationPropertyOfTextureParameterization = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfTextureParameterization;
    }

    public boolean isSetGenericApplicationPropertyOfTextureParameterization() {
        return ((this.genericApplicationPropertyOfTextureParameterization!= null)&&(!this.genericApplicationPropertyOfTextureParameterization.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfTextureParameterization() {
        this.genericApplicationPropertyOfTextureParameterization = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Object> theGenericApplicationPropertyOfTextureParameterization;
            theGenericApplicationPropertyOfTextureParameterization = (this.isSetGenericApplicationPropertyOfTextureParameterization()?this.getGenericApplicationPropertyOfTextureParameterization():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfTextureParameterization", buffer, theGenericApplicationPropertyOfTextureParameterization);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractTextureParameterizationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractTextureParameterizationType that = ((AbstractTextureParameterizationType) object);
        {
            List<Object> lhsGenericApplicationPropertyOfTextureParameterization;
            lhsGenericApplicationPropertyOfTextureParameterization = (this.isSetGenericApplicationPropertyOfTextureParameterization()?this.getGenericApplicationPropertyOfTextureParameterization():null);
            List<Object> rhsGenericApplicationPropertyOfTextureParameterization;
            rhsGenericApplicationPropertyOfTextureParameterization = (that.isSetGenericApplicationPropertyOfTextureParameterization()?that.getGenericApplicationPropertyOfTextureParameterization():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfTextureParameterization", lhsGenericApplicationPropertyOfTextureParameterization), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfTextureParameterization", rhsGenericApplicationPropertyOfTextureParameterization), lhsGenericApplicationPropertyOfTextureParameterization, rhsGenericApplicationPropertyOfTextureParameterization)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Object> theGenericApplicationPropertyOfTextureParameterization;
            theGenericApplicationPropertyOfTextureParameterization = (this.isSetGenericApplicationPropertyOfTextureParameterization()?this.getGenericApplicationPropertyOfTextureParameterization():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfTextureParameterization", theGenericApplicationPropertyOfTextureParameterization), currentHashCode, theGenericApplicationPropertyOfTextureParameterization);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractTextureParameterizationType) {
            final AbstractTextureParameterizationType copy = ((AbstractTextureParameterizationType) target);
            if (this.isSetGenericApplicationPropertyOfTextureParameterization()) {
                List<Object> sourceGenericApplicationPropertyOfTextureParameterization;
                sourceGenericApplicationPropertyOfTextureParameterization = (this.isSetGenericApplicationPropertyOfTextureParameterization()?this.getGenericApplicationPropertyOfTextureParameterization():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfTextureParameterization = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfTextureParameterization", sourceGenericApplicationPropertyOfTextureParameterization), sourceGenericApplicationPropertyOfTextureParameterization));
                copy.unsetGenericApplicationPropertyOfTextureParameterization();
                if (copyGenericApplicationPropertyOfTextureParameterization!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfTextureParameterizationl = copy.getGenericApplicationPropertyOfTextureParameterization();
                    uniqueGenericApplicationPropertyOfTextureParameterizationl.addAll(copyGenericApplicationPropertyOfTextureParameterization);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfTextureParameterization();
            }
        }
        return target;
    }

}
