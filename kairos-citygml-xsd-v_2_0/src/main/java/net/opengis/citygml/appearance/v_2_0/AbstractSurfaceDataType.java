//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.appearance.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.AbstractFeatureType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Base class for textures and material. Contains only isFront-flag.
 * 
 * <p>Java class for AbstractSurfaceDataType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractSurfaceDataType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="isFront" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/appearance/2.0}_GenericApplicationPropertyOfSurfaceData" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractSurfaceDataType", propOrder = {
    "isFront",
    "genericApplicationPropertyOfSurfaceData"
})
@XmlSeeAlso({
    AbstractTextureType.class,
    X3DMaterialType.class
})
public abstract class AbstractSurfaceDataType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(defaultValue = "true")
    protected Boolean isFront;
    @XmlElement(name = "_GenericApplicationPropertyOfSurfaceData")
    protected List<Object> genericApplicationPropertyOfSurfaceData;

    /**
     * Gets the value of the isFront property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsFront() {
        return isFront;
    }

    /**
     * Sets the value of the isFront property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsFront(Boolean value) {
        this.isFront = value;
    }

    public boolean isSetIsFront() {
        return (this.isFront!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfSurfaceData property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfSurfaceData property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfSurfaceData().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfSurfaceData() {
        if (genericApplicationPropertyOfSurfaceData == null) {
            genericApplicationPropertyOfSurfaceData = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfSurfaceData;
    }

    public boolean isSetGenericApplicationPropertyOfSurfaceData() {
        return ((this.genericApplicationPropertyOfSurfaceData!= null)&&(!this.genericApplicationPropertyOfSurfaceData.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfSurfaceData() {
        this.genericApplicationPropertyOfSurfaceData = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Boolean theIsFront;
            theIsFront = this.isIsFront();
            strategy.appendField(locator, this, "isFront", buffer, theIsFront);
        }
        {
            List<Object> theGenericApplicationPropertyOfSurfaceData;
            theGenericApplicationPropertyOfSurfaceData = (this.isSetGenericApplicationPropertyOfSurfaceData()?this.getGenericApplicationPropertyOfSurfaceData():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfSurfaceData", buffer, theGenericApplicationPropertyOfSurfaceData);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractSurfaceDataType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractSurfaceDataType that = ((AbstractSurfaceDataType) object);
        {
            Boolean lhsIsFront;
            lhsIsFront = this.isIsFront();
            Boolean rhsIsFront;
            rhsIsFront = that.isIsFront();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isFront", lhsIsFront), LocatorUtils.property(thatLocator, "isFront", rhsIsFront), lhsIsFront, rhsIsFront)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfSurfaceData;
            lhsGenericApplicationPropertyOfSurfaceData = (this.isSetGenericApplicationPropertyOfSurfaceData()?this.getGenericApplicationPropertyOfSurfaceData():null);
            List<Object> rhsGenericApplicationPropertyOfSurfaceData;
            rhsGenericApplicationPropertyOfSurfaceData = (that.isSetGenericApplicationPropertyOfSurfaceData()?that.getGenericApplicationPropertyOfSurfaceData():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfSurfaceData", lhsGenericApplicationPropertyOfSurfaceData), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfSurfaceData", rhsGenericApplicationPropertyOfSurfaceData), lhsGenericApplicationPropertyOfSurfaceData, rhsGenericApplicationPropertyOfSurfaceData)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Boolean theIsFront;
            theIsFront = this.isIsFront();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isFront", theIsFront), currentHashCode, theIsFront);
        }
        {
            List<Object> theGenericApplicationPropertyOfSurfaceData;
            theGenericApplicationPropertyOfSurfaceData = (this.isSetGenericApplicationPropertyOfSurfaceData()?this.getGenericApplicationPropertyOfSurfaceData():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfSurfaceData", theGenericApplicationPropertyOfSurfaceData), currentHashCode, theGenericApplicationPropertyOfSurfaceData);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractSurfaceDataType) {
            final AbstractSurfaceDataType copy = ((AbstractSurfaceDataType) target);
            if (this.isSetIsFront()) {
                Boolean sourceIsFront;
                sourceIsFront = this.isIsFront();
                Boolean copyIsFront = ((Boolean) strategy.copy(LocatorUtils.property(locator, "isFront", sourceIsFront), sourceIsFront));
                copy.setIsFront(copyIsFront);
            } else {
                copy.isFront = null;
            }
            if (this.isSetGenericApplicationPropertyOfSurfaceData()) {
                List<Object> sourceGenericApplicationPropertyOfSurfaceData;
                sourceGenericApplicationPropertyOfSurfaceData = (this.isSetGenericApplicationPropertyOfSurfaceData()?this.getGenericApplicationPropertyOfSurfaceData():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfSurfaceData = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfSurfaceData", sourceGenericApplicationPropertyOfSurfaceData), sourceGenericApplicationPropertyOfSurfaceData));
                copy.unsetGenericApplicationPropertyOfSurfaceData();
                if (copyGenericApplicationPropertyOfSurfaceData!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfSurfaceDatal = copy.getGenericApplicationPropertyOfSurfaceData();
                    uniqueGenericApplicationPropertyOfSurfaceDatal.addAll(copyGenericApplicationPropertyOfSurfaceData);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfSurfaceData();
            }
        }
        return target;
    }

}
