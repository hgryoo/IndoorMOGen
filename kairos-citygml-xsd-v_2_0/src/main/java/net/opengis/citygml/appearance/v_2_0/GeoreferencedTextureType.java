//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.appearance.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.PointPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Specialization for georeferenced textures, i.e. textures using a planimetric projection. Such textures
 * 				contain an implicit parameterization (either stored within the image file, in an acompanying world file, or using the
 * 				"referencePoint" and "orientation"-elements). A georeference provided by "referencePoint" and "orientation" always takes
 * 				precedence. The search order for an external georeference is determined by the boolean flag preferWorldFile. If this flag
 * 				is set to true (its default value), a world file is looked for first and only if it is not found the georeference from the
 * 				image data is used. If preferWorldFile is false, the world file is used only if no georeference from the image data is
 * 				available. The "boundedBy"-property should contain the bounding box of the projected image data. Since a georeferenced
 * 				texture has a unique parameterization, "target" only provides links to surface geometry without any additional texture
 * 				parameterization. Only gml:MultiSurface or decendants of gml:AbstractSurfaceType are valid targets.
 * 
 * <p>Java class for GeoreferencedTextureType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GeoreferencedTextureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/appearance/2.0}AbstractTextureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="preferWorldFile" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/&gt;
 *         &lt;element name="referencePoint" type="{http://www.opengis.net/gml}PointPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="orientation" type="{http://www.opengis.net/citygml/2.0}TransformationMatrix2x2Type" minOccurs="0"/&gt;
 *         &lt;element name="target" type="{http://www.w3.org/2001/XMLSchema}anyURI" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/appearance/2.0}_GenericApplicationPropertyOfGeoreferencedTexture" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GeoreferencedTextureType", propOrder = {
    "preferWorldFile",
    "referencePoint",
    "orientation",
    "target",
    "genericApplicationPropertyOfGeoreferencedTexture"
})
public class GeoreferencedTextureType
    extends AbstractTextureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(defaultValue = "true")
    protected Boolean preferWorldFile;
    protected PointPropertyType referencePoint;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> orientation;
    @XmlSchemaType(name = "anyURI")
    protected List<String> target;
    @XmlElement(name = "_GenericApplicationPropertyOfGeoreferencedTexture")
    protected List<Object> genericApplicationPropertyOfGeoreferencedTexture;

    /**
     * Gets the value of the preferWorldFile property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isPreferWorldFile() {
        return preferWorldFile;
    }

    /**
     * Sets the value of the preferWorldFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setPreferWorldFile(Boolean value) {
        this.preferWorldFile = value;
    }

    public boolean isSetPreferWorldFile() {
        return (this.preferWorldFile!= null);
    }

    /**
     * Gets the value of the referencePoint property.
     * 
     * @return
     *     possible object is
     *     {@link PointPropertyType }
     *     
     */
    public PointPropertyType getReferencePoint() {
        return referencePoint;
    }

    /**
     * Sets the value of the referencePoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointPropertyType }
     *     
     */
    public void setReferencePoint(PointPropertyType value) {
        this.referencePoint = value;
    }

    public boolean isSetReferencePoint() {
        return (this.referencePoint!= null);
    }

    /**
     * Gets the value of the orientation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the orientation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOrientation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getOrientation() {
        if (orientation == null) {
            orientation = new ArrayList<Double>();
        }
        return this.orientation;
    }

    public boolean isSetOrientation() {
        return ((this.orientation!= null)&&(!this.orientation.isEmpty()));
    }

    public void unsetOrientation() {
        this.orientation = null;
    }

    /**
     * Gets the value of the target property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the target property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTarget().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getTarget() {
        if (target == null) {
            target = new ArrayList<String>();
        }
        return this.target;
    }

    public boolean isSetTarget() {
        return ((this.target!= null)&&(!this.target.isEmpty()));
    }

    public void unsetTarget() {
        this.target = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfGeoreferencedTexture property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfGeoreferencedTexture property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfGeoreferencedTexture().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfGeoreferencedTexture() {
        if (genericApplicationPropertyOfGeoreferencedTexture == null) {
            genericApplicationPropertyOfGeoreferencedTexture = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfGeoreferencedTexture;
    }

    public boolean isSetGenericApplicationPropertyOfGeoreferencedTexture() {
        return ((this.genericApplicationPropertyOfGeoreferencedTexture!= null)&&(!this.genericApplicationPropertyOfGeoreferencedTexture.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfGeoreferencedTexture() {
        this.genericApplicationPropertyOfGeoreferencedTexture = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Boolean thePreferWorldFile;
            thePreferWorldFile = this.isPreferWorldFile();
            strategy.appendField(locator, this, "preferWorldFile", buffer, thePreferWorldFile);
        }
        {
            PointPropertyType theReferencePoint;
            theReferencePoint = this.getReferencePoint();
            strategy.appendField(locator, this, "referencePoint", buffer, theReferencePoint);
        }
        {
            List<Double> theOrientation;
            theOrientation = (this.isSetOrientation()?this.getOrientation():null);
            strategy.appendField(locator, this, "orientation", buffer, theOrientation);
        }
        {
            List<String> theTarget;
            theTarget = (this.isSetTarget()?this.getTarget():null);
            strategy.appendField(locator, this, "target", buffer, theTarget);
        }
        {
            List<Object> theGenericApplicationPropertyOfGeoreferencedTexture;
            theGenericApplicationPropertyOfGeoreferencedTexture = (this.isSetGenericApplicationPropertyOfGeoreferencedTexture()?this.getGenericApplicationPropertyOfGeoreferencedTexture():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfGeoreferencedTexture", buffer, theGenericApplicationPropertyOfGeoreferencedTexture);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GeoreferencedTextureType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final GeoreferencedTextureType that = ((GeoreferencedTextureType) object);
        {
            Boolean lhsPreferWorldFile;
            lhsPreferWorldFile = this.isPreferWorldFile();
            Boolean rhsPreferWorldFile;
            rhsPreferWorldFile = that.isPreferWorldFile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preferWorldFile", lhsPreferWorldFile), LocatorUtils.property(thatLocator, "preferWorldFile", rhsPreferWorldFile), lhsPreferWorldFile, rhsPreferWorldFile)) {
                return false;
            }
        }
        {
            PointPropertyType lhsReferencePoint;
            lhsReferencePoint = this.getReferencePoint();
            PointPropertyType rhsReferencePoint;
            rhsReferencePoint = that.getReferencePoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referencePoint", lhsReferencePoint), LocatorUtils.property(thatLocator, "referencePoint", rhsReferencePoint), lhsReferencePoint, rhsReferencePoint)) {
                return false;
            }
        }
        {
            List<Double> lhsOrientation;
            lhsOrientation = (this.isSetOrientation()?this.getOrientation():null);
            List<Double> rhsOrientation;
            rhsOrientation = (that.isSetOrientation()?that.getOrientation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orientation", lhsOrientation), LocatorUtils.property(thatLocator, "orientation", rhsOrientation), lhsOrientation, rhsOrientation)) {
                return false;
            }
        }
        {
            List<String> lhsTarget;
            lhsTarget = (this.isSetTarget()?this.getTarget():null);
            List<String> rhsTarget;
            rhsTarget = (that.isSetTarget()?that.getTarget():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "target", lhsTarget), LocatorUtils.property(thatLocator, "target", rhsTarget), lhsTarget, rhsTarget)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfGeoreferencedTexture;
            lhsGenericApplicationPropertyOfGeoreferencedTexture = (this.isSetGenericApplicationPropertyOfGeoreferencedTexture()?this.getGenericApplicationPropertyOfGeoreferencedTexture():null);
            List<Object> rhsGenericApplicationPropertyOfGeoreferencedTexture;
            rhsGenericApplicationPropertyOfGeoreferencedTexture = (that.isSetGenericApplicationPropertyOfGeoreferencedTexture()?that.getGenericApplicationPropertyOfGeoreferencedTexture():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfGeoreferencedTexture", lhsGenericApplicationPropertyOfGeoreferencedTexture), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfGeoreferencedTexture", rhsGenericApplicationPropertyOfGeoreferencedTexture), lhsGenericApplicationPropertyOfGeoreferencedTexture, rhsGenericApplicationPropertyOfGeoreferencedTexture)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Boolean thePreferWorldFile;
            thePreferWorldFile = this.isPreferWorldFile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preferWorldFile", thePreferWorldFile), currentHashCode, thePreferWorldFile);
        }
        {
            PointPropertyType theReferencePoint;
            theReferencePoint = this.getReferencePoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referencePoint", theReferencePoint), currentHashCode, theReferencePoint);
        }
        {
            List<Double> theOrientation;
            theOrientation = (this.isSetOrientation()?this.getOrientation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orientation", theOrientation), currentHashCode, theOrientation);
        }
        {
            List<String> theTarget;
            theTarget = (this.isSetTarget()?this.getTarget():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "target", theTarget), currentHashCode, theTarget);
        }
        {
            List<Object> theGenericApplicationPropertyOfGeoreferencedTexture;
            theGenericApplicationPropertyOfGeoreferencedTexture = (this.isSetGenericApplicationPropertyOfGeoreferencedTexture()?this.getGenericApplicationPropertyOfGeoreferencedTexture():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfGeoreferencedTexture", theGenericApplicationPropertyOfGeoreferencedTexture), currentHashCode, theGenericApplicationPropertyOfGeoreferencedTexture);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof GeoreferencedTextureType) {
            final GeoreferencedTextureType copy = ((GeoreferencedTextureType) draftCopy);
            if (this.isSetPreferWorldFile()) {
                Boolean sourcePreferWorldFile;
                sourcePreferWorldFile = this.isPreferWorldFile();
                Boolean copyPreferWorldFile = ((Boolean) strategy.copy(LocatorUtils.property(locator, "preferWorldFile", sourcePreferWorldFile), sourcePreferWorldFile));
                copy.setPreferWorldFile(copyPreferWorldFile);
            } else {
                copy.preferWorldFile = null;
            }
            if (this.isSetReferencePoint()) {
                PointPropertyType sourceReferencePoint;
                sourceReferencePoint = this.getReferencePoint();
                PointPropertyType copyReferencePoint = ((PointPropertyType) strategy.copy(LocatorUtils.property(locator, "referencePoint", sourceReferencePoint), sourceReferencePoint));
                copy.setReferencePoint(copyReferencePoint);
            } else {
                copy.referencePoint = null;
            }
            if (this.isSetOrientation()) {
                List<Double> sourceOrientation;
                sourceOrientation = (this.isSetOrientation()?this.getOrientation():null);
                @SuppressWarnings("unchecked")
                List<Double> copyOrientation = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "orientation", sourceOrientation), sourceOrientation));
                copy.unsetOrientation();
                if (copyOrientation!= null) {
                    List<Double> uniqueOrientationl = copy.getOrientation();
                    uniqueOrientationl.addAll(copyOrientation);
                }
            } else {
                copy.unsetOrientation();
            }
            if (this.isSetTarget()) {
                List<String> sourceTarget;
                sourceTarget = (this.isSetTarget()?this.getTarget():null);
                @SuppressWarnings("unchecked")
                List<String> copyTarget = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "target", sourceTarget), sourceTarget));
                copy.unsetTarget();
                if (copyTarget!= null) {
                    List<String> uniqueTargetl = copy.getTarget();
                    uniqueTargetl.addAll(copyTarget);
                }
            } else {
                copy.unsetTarget();
            }
            if (this.isSetGenericApplicationPropertyOfGeoreferencedTexture()) {
                List<Object> sourceGenericApplicationPropertyOfGeoreferencedTexture;
                sourceGenericApplicationPropertyOfGeoreferencedTexture = (this.isSetGenericApplicationPropertyOfGeoreferencedTexture()?this.getGenericApplicationPropertyOfGeoreferencedTexture():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfGeoreferencedTexture = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfGeoreferencedTexture", sourceGenericApplicationPropertyOfGeoreferencedTexture), sourceGenericApplicationPropertyOfGeoreferencedTexture));
                copy.unsetGenericApplicationPropertyOfGeoreferencedTexture();
                if (copyGenericApplicationPropertyOfGeoreferencedTexture!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfGeoreferencedTexturel = copy.getGenericApplicationPropertyOfGeoreferencedTexture();
                    uniqueGenericApplicationPropertyOfGeoreferencedTexturel.addAll(copyGenericApplicationPropertyOfGeoreferencedTexture);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfGeoreferencedTexture();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GeoreferencedTextureType();
    }

}
