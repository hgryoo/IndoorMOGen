//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.appearance.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.CodeType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Base class for textures. "imageURI" can contain any valid URI from references to a local file to
 * 				preformatted web service requests. The linking to geometry and texture parameterization is provided by derived
 * 				classes.
 * 
 * <p>Java class for AbstractTextureType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractTextureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/appearance/2.0}AbstractSurfaceDataType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="imageURI" type="{http://www.w3.org/2001/XMLSchema}anyURI"/&gt;
 *         &lt;element name="mimeType" type="{http://www.opengis.net/gml}CodeType" minOccurs="0"/&gt;
 *         &lt;element name="textureType" type="{http://www.opengis.net/citygml/appearance/2.0}TextureTypeType" minOccurs="0"/&gt;
 *         &lt;element name="wrapMode" type="{http://www.opengis.net/citygml/appearance/2.0}WrapModeType" minOccurs="0"/&gt;
 *         &lt;element name="borderColor" type="{http://www.opengis.net/citygml/appearance/2.0}ColorPlusOpacity" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/appearance/2.0}_GenericApplicationPropertyOfTexture" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractTextureType", propOrder = {
    "imageURI",
    "mimeType",
    "textureType",
    "wrapMode",
    "borderColor",
    "genericApplicationPropertyOfTexture"
})
@XmlSeeAlso({
    ParameterizedTextureType.class,
    GeoreferencedTextureType.class
})
public abstract class AbstractTextureType
    extends AbstractSurfaceDataType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "anyURI")
    protected String imageURI;
    protected CodeType mimeType;
    @XmlSchemaType(name = "string")
    protected TextureTypeType textureType;
    @XmlSchemaType(name = "string")
    protected WrapModeType wrapMode;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> borderColor;
    @XmlElement(name = "_GenericApplicationPropertyOfTexture")
    protected List<Object> genericApplicationPropertyOfTexture;

    /**
     * Gets the value of the imageURI property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getImageURI() {
        return imageURI;
    }

    /**
     * Sets the value of the imageURI property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setImageURI(String value) {
        this.imageURI = value;
    }

    public boolean isSetImageURI() {
        return (this.imageURI!= null);
    }

    /**
     * Gets the value of the mimeType property.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getMimeType() {
        return mimeType;
    }

    /**
     * Sets the value of the mimeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setMimeType(CodeType value) {
        this.mimeType = value;
    }

    public boolean isSetMimeType() {
        return (this.mimeType!= null);
    }

    /**
     * Gets the value of the textureType property.
     * 
     * @return
     *     possible object is
     *     {@link TextureTypeType }
     *     
     */
    public TextureTypeType getTextureType() {
        return textureType;
    }

    /**
     * Sets the value of the textureType property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextureTypeType }
     *     
     */
    public void setTextureType(TextureTypeType value) {
        this.textureType = value;
    }

    public boolean isSetTextureType() {
        return (this.textureType!= null);
    }

    /**
     * Gets the value of the wrapMode property.
     * 
     * @return
     *     possible object is
     *     {@link WrapModeType }
     *     
     */
    public WrapModeType getWrapMode() {
        return wrapMode;
    }

    /**
     * Sets the value of the wrapMode property.
     * 
     * @param value
     *     allowed object is
     *     {@link WrapModeType }
     *     
     */
    public void setWrapMode(WrapModeType value) {
        this.wrapMode = value;
    }

    public boolean isSetWrapMode() {
        return (this.wrapMode!= null);
    }

    /**
     * Gets the value of the borderColor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the borderColor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBorderColor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getBorderColor() {
        if (borderColor == null) {
            borderColor = new ArrayList<Double>();
        }
        return this.borderColor;
    }

    public boolean isSetBorderColor() {
        return ((this.borderColor!= null)&&(!this.borderColor.isEmpty()));
    }

    public void unsetBorderColor() {
        this.borderColor = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfTexture property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfTexture property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfTexture().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfTexture() {
        if (genericApplicationPropertyOfTexture == null) {
            genericApplicationPropertyOfTexture = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfTexture;
    }

    public boolean isSetGenericApplicationPropertyOfTexture() {
        return ((this.genericApplicationPropertyOfTexture!= null)&&(!this.genericApplicationPropertyOfTexture.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfTexture() {
        this.genericApplicationPropertyOfTexture = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theImageURI;
            theImageURI = this.getImageURI();
            strategy.appendField(locator, this, "imageURI", buffer, theImageURI);
        }
        {
            CodeType theMimeType;
            theMimeType = this.getMimeType();
            strategy.appendField(locator, this, "mimeType", buffer, theMimeType);
        }
        {
            TextureTypeType theTextureType;
            theTextureType = this.getTextureType();
            strategy.appendField(locator, this, "textureType", buffer, theTextureType);
        }
        {
            WrapModeType theWrapMode;
            theWrapMode = this.getWrapMode();
            strategy.appendField(locator, this, "wrapMode", buffer, theWrapMode);
        }
        {
            List<Double> theBorderColor;
            theBorderColor = (this.isSetBorderColor()?this.getBorderColor():null);
            strategy.appendField(locator, this, "borderColor", buffer, theBorderColor);
        }
        {
            List<Object> theGenericApplicationPropertyOfTexture;
            theGenericApplicationPropertyOfTexture = (this.isSetGenericApplicationPropertyOfTexture()?this.getGenericApplicationPropertyOfTexture():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfTexture", buffer, theGenericApplicationPropertyOfTexture);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractTextureType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractTextureType that = ((AbstractTextureType) object);
        {
            String lhsImageURI;
            lhsImageURI = this.getImageURI();
            String rhsImageURI;
            rhsImageURI = that.getImageURI();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imageURI", lhsImageURI), LocatorUtils.property(thatLocator, "imageURI", rhsImageURI), lhsImageURI, rhsImageURI)) {
                return false;
            }
        }
        {
            CodeType lhsMimeType;
            lhsMimeType = this.getMimeType();
            CodeType rhsMimeType;
            rhsMimeType = that.getMimeType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mimeType", lhsMimeType), LocatorUtils.property(thatLocator, "mimeType", rhsMimeType), lhsMimeType, rhsMimeType)) {
                return false;
            }
        }
        {
            TextureTypeType lhsTextureType;
            lhsTextureType = this.getTextureType();
            TextureTypeType rhsTextureType;
            rhsTextureType = that.getTextureType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textureType", lhsTextureType), LocatorUtils.property(thatLocator, "textureType", rhsTextureType), lhsTextureType, rhsTextureType)) {
                return false;
            }
        }
        {
            WrapModeType lhsWrapMode;
            lhsWrapMode = this.getWrapMode();
            WrapModeType rhsWrapMode;
            rhsWrapMode = that.getWrapMode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "wrapMode", lhsWrapMode), LocatorUtils.property(thatLocator, "wrapMode", rhsWrapMode), lhsWrapMode, rhsWrapMode)) {
                return false;
            }
        }
        {
            List<Double> lhsBorderColor;
            lhsBorderColor = (this.isSetBorderColor()?this.getBorderColor():null);
            List<Double> rhsBorderColor;
            rhsBorderColor = (that.isSetBorderColor()?that.getBorderColor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "borderColor", lhsBorderColor), LocatorUtils.property(thatLocator, "borderColor", rhsBorderColor), lhsBorderColor, rhsBorderColor)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfTexture;
            lhsGenericApplicationPropertyOfTexture = (this.isSetGenericApplicationPropertyOfTexture()?this.getGenericApplicationPropertyOfTexture():null);
            List<Object> rhsGenericApplicationPropertyOfTexture;
            rhsGenericApplicationPropertyOfTexture = (that.isSetGenericApplicationPropertyOfTexture()?that.getGenericApplicationPropertyOfTexture():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfTexture", lhsGenericApplicationPropertyOfTexture), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfTexture", rhsGenericApplicationPropertyOfTexture), lhsGenericApplicationPropertyOfTexture, rhsGenericApplicationPropertyOfTexture)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theImageURI;
            theImageURI = this.getImageURI();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imageURI", theImageURI), currentHashCode, theImageURI);
        }
        {
            CodeType theMimeType;
            theMimeType = this.getMimeType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mimeType", theMimeType), currentHashCode, theMimeType);
        }
        {
            TextureTypeType theTextureType;
            theTextureType = this.getTextureType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textureType", theTextureType), currentHashCode, theTextureType);
        }
        {
            WrapModeType theWrapMode;
            theWrapMode = this.getWrapMode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "wrapMode", theWrapMode), currentHashCode, theWrapMode);
        }
        {
            List<Double> theBorderColor;
            theBorderColor = (this.isSetBorderColor()?this.getBorderColor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "borderColor", theBorderColor), currentHashCode, theBorderColor);
        }
        {
            List<Object> theGenericApplicationPropertyOfTexture;
            theGenericApplicationPropertyOfTexture = (this.isSetGenericApplicationPropertyOfTexture()?this.getGenericApplicationPropertyOfTexture():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfTexture", theGenericApplicationPropertyOfTexture), currentHashCode, theGenericApplicationPropertyOfTexture);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractTextureType) {
            final AbstractTextureType copy = ((AbstractTextureType) target);
            if (this.isSetImageURI()) {
                String sourceImageURI;
                sourceImageURI = this.getImageURI();
                String copyImageURI = ((String) strategy.copy(LocatorUtils.property(locator, "imageURI", sourceImageURI), sourceImageURI));
                copy.setImageURI(copyImageURI);
            } else {
                copy.imageURI = null;
            }
            if (this.isSetMimeType()) {
                CodeType sourceMimeType;
                sourceMimeType = this.getMimeType();
                CodeType copyMimeType = ((CodeType) strategy.copy(LocatorUtils.property(locator, "mimeType", sourceMimeType), sourceMimeType));
                copy.setMimeType(copyMimeType);
            } else {
                copy.mimeType = null;
            }
            if (this.isSetTextureType()) {
                TextureTypeType sourceTextureType;
                sourceTextureType = this.getTextureType();
                TextureTypeType copyTextureType = ((TextureTypeType) strategy.copy(LocatorUtils.property(locator, "textureType", sourceTextureType), sourceTextureType));
                copy.setTextureType(copyTextureType);
            } else {
                copy.textureType = null;
            }
            if (this.isSetWrapMode()) {
                WrapModeType sourceWrapMode;
                sourceWrapMode = this.getWrapMode();
                WrapModeType copyWrapMode = ((WrapModeType) strategy.copy(LocatorUtils.property(locator, "wrapMode", sourceWrapMode), sourceWrapMode));
                copy.setWrapMode(copyWrapMode);
            } else {
                copy.wrapMode = null;
            }
            if (this.isSetBorderColor()) {
                List<Double> sourceBorderColor;
                sourceBorderColor = (this.isSetBorderColor()?this.getBorderColor():null);
                @SuppressWarnings("unchecked")
                List<Double> copyBorderColor = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "borderColor", sourceBorderColor), sourceBorderColor));
                copy.unsetBorderColor();
                if (copyBorderColor!= null) {
                    List<Double> uniqueBorderColorl = copy.getBorderColor();
                    uniqueBorderColorl.addAll(copyBorderColor);
                }
            } else {
                copy.unsetBorderColor();
            }
            if (this.isSetGenericApplicationPropertyOfTexture()) {
                List<Object> sourceGenericApplicationPropertyOfTexture;
                sourceGenericApplicationPropertyOfTexture = (this.isSetGenericApplicationPropertyOfTexture()?this.getGenericApplicationPropertyOfTexture():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfTexture = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfTexture", sourceGenericApplicationPropertyOfTexture), sourceGenericApplicationPropertyOfTexture));
                copy.unsetGenericApplicationPropertyOfTexture();
                if (copyGenericApplicationPropertyOfTexture!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfTexturel = copy.getGenericApplicationPropertyOfTexture();
                    uniqueGenericApplicationPropertyOfTexturel.addAll(copyGenericApplicationPropertyOfTexture);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfTexture();
            }
        }
        return target;
    }

}
