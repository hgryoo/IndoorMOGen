//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.AbstractGMLType;
import net.opengis.gml.v_3_1_1.CodeType;
import net.opengis.gml.v_3_1_1.GeometryPropertyType;
import net.opengis.gml.v_3_1_1.PointPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 *  Type for the implicit representation of a geometry. An implicit geometry is a geometric object, where the
 * 				shape is stored only once as a prototypical geometry, e.g. a tree or other vegetation object, a traffic light or a traffic
 * 				sign. This prototypic geometry object is re-used or referenced many times, wherever the corresponding feature occurs in
 * 				the 3D city model. Each occurrence is represented by a link to the prototypic shape geometry (in a local cartesian
 * 				coordinate system), by a transforma-tion matrix that is multiplied with each 3D coordinate tuple of the prototype, and by
 * 				an anchor point denoting the base point of the object in the world coordinate reference system. In order to determine the
 * 				absolute coordinates of an implicit geometry, the anchor point coordinates have to be added to the matrix multiplication
 * 				results. The transformation matrix accounts for the intended rotation, scaling, and local translation of the prototype. It
 * 				is a 4x4 matrix that is multiplied with the prototype coordinates using homogeneous coordinates, i.e. (x,y,z,1). This way
 * 				even a projection might be modelled by the transformation matrix. The concept of implicit geometries is an enhancement of
 * 				the geometry model of GML3. 
 * 
 * <p>Java class for ImplicitGeometryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ImplicitGeometryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractGMLType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="mimeType" type="{http://www.opengis.net/gml}CodeType" minOccurs="0"/&gt;
 *         &lt;element name="transformationMatrix" type="{http://www.opengis.net/citygml/2.0}TransformationMatrix4x4Type" minOccurs="0"/&gt;
 *         &lt;element name="libraryObject" type="{http://www.w3.org/2001/XMLSchema}anyURI" minOccurs="0"/&gt;
 *         &lt;element name="relativeGMLGeometry" type="{http://www.opengis.net/gml}GeometryPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="referencePoint" type="{http://www.opengis.net/gml}PointPropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImplicitGeometryType", propOrder = {
    "mimeType",
    "transformationMatrix",
    "libraryObject",
    "relativeGMLGeometry",
    "referencePoint"
})
public class ImplicitGeometryType
    extends AbstractGMLType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CodeType mimeType;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> transformationMatrix;
    @XmlSchemaType(name = "anyURI")
    protected String libraryObject;
    protected GeometryPropertyType relativeGMLGeometry;
    @XmlElement(required = true)
    protected PointPropertyType referencePoint;

    /**
     * Gets the value of the mimeType property.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getMimeType() {
        return mimeType;
    }

    /**
     * Sets the value of the mimeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setMimeType(CodeType value) {
        this.mimeType = value;
    }

    public boolean isSetMimeType() {
        return (this.mimeType!= null);
    }

    /**
     * Gets the value of the transformationMatrix property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transformationMatrix property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTransformationMatrix().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getTransformationMatrix() {
        if (transformationMatrix == null) {
            transformationMatrix = new ArrayList<Double>();
        }
        return this.transformationMatrix;
    }

    public boolean isSetTransformationMatrix() {
        return ((this.transformationMatrix!= null)&&(!this.transformationMatrix.isEmpty()));
    }

    public void unsetTransformationMatrix() {
        this.transformationMatrix = null;
    }

    /**
     * Gets the value of the libraryObject property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLibraryObject() {
        return libraryObject;
    }

    /**
     * Sets the value of the libraryObject property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLibraryObject(String value) {
        this.libraryObject = value;
    }

    public boolean isSetLibraryObject() {
        return (this.libraryObject!= null);
    }

    /**
     * Gets the value of the relativeGMLGeometry property.
     * 
     * @return
     *     possible object is
     *     {@link GeometryPropertyType }
     *     
     */
    public GeometryPropertyType getRelativeGMLGeometry() {
        return relativeGMLGeometry;
    }

    /**
     * Sets the value of the relativeGMLGeometry property.
     * 
     * @param value
     *     allowed object is
     *     {@link GeometryPropertyType }
     *     
     */
    public void setRelativeGMLGeometry(GeometryPropertyType value) {
        this.relativeGMLGeometry = value;
    }

    public boolean isSetRelativeGMLGeometry() {
        return (this.relativeGMLGeometry!= null);
    }

    /**
     * Gets the value of the referencePoint property.
     * 
     * @return
     *     possible object is
     *     {@link PointPropertyType }
     *     
     */
    public PointPropertyType getReferencePoint() {
        return referencePoint;
    }

    /**
     * Sets the value of the referencePoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link PointPropertyType }
     *     
     */
    public void setReferencePoint(PointPropertyType value) {
        this.referencePoint = value;
    }

    public boolean isSetReferencePoint() {
        return (this.referencePoint!= null);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeType theMimeType;
            theMimeType = this.getMimeType();
            strategy.appendField(locator, this, "mimeType", buffer, theMimeType);
        }
        {
            List<Double> theTransformationMatrix;
            theTransformationMatrix = (this.isSetTransformationMatrix()?this.getTransformationMatrix():null);
            strategy.appendField(locator, this, "transformationMatrix", buffer, theTransformationMatrix);
        }
        {
            String theLibraryObject;
            theLibraryObject = this.getLibraryObject();
            strategy.appendField(locator, this, "libraryObject", buffer, theLibraryObject);
        }
        {
            GeometryPropertyType theRelativeGMLGeometry;
            theRelativeGMLGeometry = this.getRelativeGMLGeometry();
            strategy.appendField(locator, this, "relativeGMLGeometry", buffer, theRelativeGMLGeometry);
        }
        {
            PointPropertyType theReferencePoint;
            theReferencePoint = this.getReferencePoint();
            strategy.appendField(locator, this, "referencePoint", buffer, theReferencePoint);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImplicitGeometryType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImplicitGeometryType that = ((ImplicitGeometryType) object);
        {
            CodeType lhsMimeType;
            lhsMimeType = this.getMimeType();
            CodeType rhsMimeType;
            rhsMimeType = that.getMimeType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mimeType", lhsMimeType), LocatorUtils.property(thatLocator, "mimeType", rhsMimeType), lhsMimeType, rhsMimeType)) {
                return false;
            }
        }
        {
            List<Double> lhsTransformationMatrix;
            lhsTransformationMatrix = (this.isSetTransformationMatrix()?this.getTransformationMatrix():null);
            List<Double> rhsTransformationMatrix;
            rhsTransformationMatrix = (that.isSetTransformationMatrix()?that.getTransformationMatrix():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transformationMatrix", lhsTransformationMatrix), LocatorUtils.property(thatLocator, "transformationMatrix", rhsTransformationMatrix), lhsTransformationMatrix, rhsTransformationMatrix)) {
                return false;
            }
        }
        {
            String lhsLibraryObject;
            lhsLibraryObject = this.getLibraryObject();
            String rhsLibraryObject;
            rhsLibraryObject = that.getLibraryObject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "libraryObject", lhsLibraryObject), LocatorUtils.property(thatLocator, "libraryObject", rhsLibraryObject), lhsLibraryObject, rhsLibraryObject)) {
                return false;
            }
        }
        {
            GeometryPropertyType lhsRelativeGMLGeometry;
            lhsRelativeGMLGeometry = this.getRelativeGMLGeometry();
            GeometryPropertyType rhsRelativeGMLGeometry;
            rhsRelativeGMLGeometry = that.getRelativeGMLGeometry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relativeGMLGeometry", lhsRelativeGMLGeometry), LocatorUtils.property(thatLocator, "relativeGMLGeometry", rhsRelativeGMLGeometry), lhsRelativeGMLGeometry, rhsRelativeGMLGeometry)) {
                return false;
            }
        }
        {
            PointPropertyType lhsReferencePoint;
            lhsReferencePoint = this.getReferencePoint();
            PointPropertyType rhsReferencePoint;
            rhsReferencePoint = that.getReferencePoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referencePoint", lhsReferencePoint), LocatorUtils.property(thatLocator, "referencePoint", rhsReferencePoint), lhsReferencePoint, rhsReferencePoint)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeType theMimeType;
            theMimeType = this.getMimeType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mimeType", theMimeType), currentHashCode, theMimeType);
        }
        {
            List<Double> theTransformationMatrix;
            theTransformationMatrix = (this.isSetTransformationMatrix()?this.getTransformationMatrix():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transformationMatrix", theTransformationMatrix), currentHashCode, theTransformationMatrix);
        }
        {
            String theLibraryObject;
            theLibraryObject = this.getLibraryObject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "libraryObject", theLibraryObject), currentHashCode, theLibraryObject);
        }
        {
            GeometryPropertyType theRelativeGMLGeometry;
            theRelativeGMLGeometry = this.getRelativeGMLGeometry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relativeGMLGeometry", theRelativeGMLGeometry), currentHashCode, theRelativeGMLGeometry);
        }
        {
            PointPropertyType theReferencePoint;
            theReferencePoint = this.getReferencePoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referencePoint", theReferencePoint), currentHashCode, theReferencePoint);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ImplicitGeometryType) {
            final ImplicitGeometryType copy = ((ImplicitGeometryType) draftCopy);
            if (this.isSetMimeType()) {
                CodeType sourceMimeType;
                sourceMimeType = this.getMimeType();
                CodeType copyMimeType = ((CodeType) strategy.copy(LocatorUtils.property(locator, "mimeType", sourceMimeType), sourceMimeType));
                copy.setMimeType(copyMimeType);
            } else {
                copy.mimeType = null;
            }
            if (this.isSetTransformationMatrix()) {
                List<Double> sourceTransformationMatrix;
                sourceTransformationMatrix = (this.isSetTransformationMatrix()?this.getTransformationMatrix():null);
                @SuppressWarnings("unchecked")
                List<Double> copyTransformationMatrix = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "transformationMatrix", sourceTransformationMatrix), sourceTransformationMatrix));
                copy.unsetTransformationMatrix();
                if (copyTransformationMatrix!= null) {
                    List<Double> uniqueTransformationMatrixl = copy.getTransformationMatrix();
                    uniqueTransformationMatrixl.addAll(copyTransformationMatrix);
                }
            } else {
                copy.unsetTransformationMatrix();
            }
            if (this.isSetLibraryObject()) {
                String sourceLibraryObject;
                sourceLibraryObject = this.getLibraryObject();
                String copyLibraryObject = ((String) strategy.copy(LocatorUtils.property(locator, "libraryObject", sourceLibraryObject), sourceLibraryObject));
                copy.setLibraryObject(copyLibraryObject);
            } else {
                copy.libraryObject = null;
            }
            if (this.isSetRelativeGMLGeometry()) {
                GeometryPropertyType sourceRelativeGMLGeometry;
                sourceRelativeGMLGeometry = this.getRelativeGMLGeometry();
                GeometryPropertyType copyRelativeGMLGeometry = ((GeometryPropertyType) strategy.copy(LocatorUtils.property(locator, "relativeGMLGeometry", sourceRelativeGMLGeometry), sourceRelativeGMLGeometry));
                copy.setRelativeGMLGeometry(copyRelativeGMLGeometry);
            } else {
                copy.relativeGMLGeometry = null;
            }
            if (this.isSetReferencePoint()) {
                PointPropertyType sourceReferencePoint;
                sourceReferencePoint = this.getReferencePoint();
                PointPropertyType copyReferencePoint = ((PointPropertyType) strategy.copy(LocatorUtils.property(locator, "referencePoint", sourceReferencePoint), sourceReferencePoint));
                copy.setReferencePoint(copyReferencePoint);
            } else {
                copy.referencePoint = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ImplicitGeometryType();
    }

}
