//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.AbstractFeatureType;
import net.opengis.gml.v_3_1_1.MultiPointPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type for addresses. It references the xAL address standard issued by the OASIS consortium. Please note,
 * 				that addresses are modelled as GML features. Every address can be assigned zero or more 2D or 3D point geometries (one
 * 				gml:MultiPoint geometry) locating the entrance(s). 
 * 
 * <p>Java class for AddressType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AddressType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractFeatureType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="xalAddress" type="{http://www.opengis.net/citygml/2.0}xalAddressPropertyType"/&gt;
 *         &lt;element name="multiPoint" type="{http://www.opengis.net/gml}MultiPointPropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/2.0}_GenericApplicationPropertyOfAddress" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AddressType", propOrder = {
    "xalAddress",
    "multiPoint",
    "genericApplicationPropertyOfAddress"
})
public class AddressType
    extends AbstractFeatureType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected XalAddressPropertyType xalAddress;
    protected MultiPointPropertyType multiPoint;
    @XmlElement(name = "_GenericApplicationPropertyOfAddress")
    protected List<Object> genericApplicationPropertyOfAddress;

    /**
     * Gets the value of the xalAddress property.
     * 
     * @return
     *     possible object is
     *     {@link XalAddressPropertyType }
     *     
     */
    public XalAddressPropertyType getXalAddress() {
        return xalAddress;
    }

    /**
     * Sets the value of the xalAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link XalAddressPropertyType }
     *     
     */
    public void setXalAddress(XalAddressPropertyType value) {
        this.xalAddress = value;
    }

    public boolean isSetXalAddress() {
        return (this.xalAddress!= null);
    }

    /**
     * Gets the value of the multiPoint property.
     * 
     * @return
     *     possible object is
     *     {@link MultiPointPropertyType }
     *     
     */
    public MultiPointPropertyType getMultiPoint() {
        return multiPoint;
    }

    /**
     * Sets the value of the multiPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiPointPropertyType }
     *     
     */
    public void setMultiPoint(MultiPointPropertyType value) {
        this.multiPoint = value;
    }

    public boolean isSetMultiPoint() {
        return (this.multiPoint!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfAddress property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfAddress property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfAddress() {
        if (genericApplicationPropertyOfAddress == null) {
            genericApplicationPropertyOfAddress = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfAddress;
    }

    public boolean isSetGenericApplicationPropertyOfAddress() {
        return ((this.genericApplicationPropertyOfAddress!= null)&&(!this.genericApplicationPropertyOfAddress.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfAddress() {
        this.genericApplicationPropertyOfAddress = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            XalAddressPropertyType theXalAddress;
            theXalAddress = this.getXalAddress();
            strategy.appendField(locator, this, "xalAddress", buffer, theXalAddress);
        }
        {
            MultiPointPropertyType theMultiPoint;
            theMultiPoint = this.getMultiPoint();
            strategy.appendField(locator, this, "multiPoint", buffer, theMultiPoint);
        }
        {
            List<Object> theGenericApplicationPropertyOfAddress;
            theGenericApplicationPropertyOfAddress = (this.isSetGenericApplicationPropertyOfAddress()?this.getGenericApplicationPropertyOfAddress():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfAddress", buffer, theGenericApplicationPropertyOfAddress);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AddressType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AddressType that = ((AddressType) object);
        {
            XalAddressPropertyType lhsXalAddress;
            lhsXalAddress = this.getXalAddress();
            XalAddressPropertyType rhsXalAddress;
            rhsXalAddress = that.getXalAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "xalAddress", lhsXalAddress), LocatorUtils.property(thatLocator, "xalAddress", rhsXalAddress), lhsXalAddress, rhsXalAddress)) {
                return false;
            }
        }
        {
            MultiPointPropertyType lhsMultiPoint;
            lhsMultiPoint = this.getMultiPoint();
            MultiPointPropertyType rhsMultiPoint;
            rhsMultiPoint = that.getMultiPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multiPoint", lhsMultiPoint), LocatorUtils.property(thatLocator, "multiPoint", rhsMultiPoint), lhsMultiPoint, rhsMultiPoint)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfAddress;
            lhsGenericApplicationPropertyOfAddress = (this.isSetGenericApplicationPropertyOfAddress()?this.getGenericApplicationPropertyOfAddress():null);
            List<Object> rhsGenericApplicationPropertyOfAddress;
            rhsGenericApplicationPropertyOfAddress = (that.isSetGenericApplicationPropertyOfAddress()?that.getGenericApplicationPropertyOfAddress():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfAddress", lhsGenericApplicationPropertyOfAddress), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfAddress", rhsGenericApplicationPropertyOfAddress), lhsGenericApplicationPropertyOfAddress, rhsGenericApplicationPropertyOfAddress)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            XalAddressPropertyType theXalAddress;
            theXalAddress = this.getXalAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "xalAddress", theXalAddress), currentHashCode, theXalAddress);
        }
        {
            MultiPointPropertyType theMultiPoint;
            theMultiPoint = this.getMultiPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multiPoint", theMultiPoint), currentHashCode, theMultiPoint);
        }
        {
            List<Object> theGenericApplicationPropertyOfAddress;
            theGenericApplicationPropertyOfAddress = (this.isSetGenericApplicationPropertyOfAddress()?this.getGenericApplicationPropertyOfAddress():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfAddress", theGenericApplicationPropertyOfAddress), currentHashCode, theGenericApplicationPropertyOfAddress);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof AddressType) {
            final AddressType copy = ((AddressType) draftCopy);
            if (this.isSetXalAddress()) {
                XalAddressPropertyType sourceXalAddress;
                sourceXalAddress = this.getXalAddress();
                XalAddressPropertyType copyXalAddress = ((XalAddressPropertyType) strategy.copy(LocatorUtils.property(locator, "xalAddress", sourceXalAddress), sourceXalAddress));
                copy.setXalAddress(copyXalAddress);
            } else {
                copy.xalAddress = null;
            }
            if (this.isSetMultiPoint()) {
                MultiPointPropertyType sourceMultiPoint;
                sourceMultiPoint = this.getMultiPoint();
                MultiPointPropertyType copyMultiPoint = ((MultiPointPropertyType) strategy.copy(LocatorUtils.property(locator, "multiPoint", sourceMultiPoint), sourceMultiPoint));
                copy.setMultiPoint(copyMultiPoint);
            } else {
                copy.multiPoint = null;
            }
            if (this.isSetGenericApplicationPropertyOfAddress()) {
                List<Object> sourceGenericApplicationPropertyOfAddress;
                sourceGenericApplicationPropertyOfAddress = (this.isSetGenericApplicationPropertyOfAddress()?this.getGenericApplicationPropertyOfAddress():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfAddress = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfAddress", sourceGenericApplicationPropertyOfAddress), sourceGenericApplicationPropertyOfAddress));
                copy.unsetGenericApplicationPropertyOfAddress();
                if (copyGenericApplicationPropertyOfAddress!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfAddressl = copy.getGenericApplicationPropertyOfAddress();
                    uniqueGenericApplicationPropertyOfAddressl.addAll(copyGenericApplicationPropertyOfAddress);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfAddress();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AddressType();
    }

}
