//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.AbstractFeatureCollectionType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the "root" element of any city model file. It is a collection whose members are restricted
 * 				to be features of a city model. All features are included as cityObjectMember. 
 * 
 * <p>Java class for CityModelType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CityModelType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractFeatureCollectionType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/2.0}_GenericApplicationPropertyOfCityModel" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CityModelType", propOrder = {
    "genericApplicationPropertyOfCityModel"
})
public class CityModelType
    extends AbstractFeatureCollectionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "_GenericApplicationPropertyOfCityModel")
    protected List<Object> genericApplicationPropertyOfCityModel;

    /**
     * Gets the value of the genericApplicationPropertyOfCityModel property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfCityModel property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfCityModel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfCityModel() {
        if (genericApplicationPropertyOfCityModel == null) {
            genericApplicationPropertyOfCityModel = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfCityModel;
    }

    public boolean isSetGenericApplicationPropertyOfCityModel() {
        return ((this.genericApplicationPropertyOfCityModel!= null)&&(!this.genericApplicationPropertyOfCityModel.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfCityModel() {
        this.genericApplicationPropertyOfCityModel = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Object> theGenericApplicationPropertyOfCityModel;
            theGenericApplicationPropertyOfCityModel = (this.isSetGenericApplicationPropertyOfCityModel()?this.getGenericApplicationPropertyOfCityModel():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfCityModel", buffer, theGenericApplicationPropertyOfCityModel);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CityModelType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CityModelType that = ((CityModelType) object);
        {
            List<Object> lhsGenericApplicationPropertyOfCityModel;
            lhsGenericApplicationPropertyOfCityModel = (this.isSetGenericApplicationPropertyOfCityModel()?this.getGenericApplicationPropertyOfCityModel():null);
            List<Object> rhsGenericApplicationPropertyOfCityModel;
            rhsGenericApplicationPropertyOfCityModel = (that.isSetGenericApplicationPropertyOfCityModel()?that.getGenericApplicationPropertyOfCityModel():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfCityModel", lhsGenericApplicationPropertyOfCityModel), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfCityModel", rhsGenericApplicationPropertyOfCityModel), lhsGenericApplicationPropertyOfCityModel, rhsGenericApplicationPropertyOfCityModel)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Object> theGenericApplicationPropertyOfCityModel;
            theGenericApplicationPropertyOfCityModel = (this.isSetGenericApplicationPropertyOfCityModel()?this.getGenericApplicationPropertyOfCityModel():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfCityModel", theGenericApplicationPropertyOfCityModel), currentHashCode, theGenericApplicationPropertyOfCityModel);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof CityModelType) {
            final CityModelType copy = ((CityModelType) draftCopy);
            if (this.isSetGenericApplicationPropertyOfCityModel()) {
                List<Object> sourceGenericApplicationPropertyOfCityModel;
                sourceGenericApplicationPropertyOfCityModel = (this.isSetGenericApplicationPropertyOfCityModel()?this.getGenericApplicationPropertyOfCityModel():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfCityModel = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfCityModel", sourceGenericApplicationPropertyOfCityModel), sourceGenericApplicationPropertyOfCityModel));
                copy.unsetGenericApplicationPropertyOfCityModel();
                if (copyGenericApplicationPropertyOfCityModel!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfCityModell = copy.getGenericApplicationPropertyOfCityModel();
                    uniqueGenericApplicationPropertyOfCityModell.addAll(copyGenericApplicationPropertyOfCityModel);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfCityModel();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CityModelType();
    }

}
