//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.building.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.citygml.v_2_0.AddressPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 *  Type for doors in boundary surfaces. Used in LOD3 and LOD4 only . As subclass of _CityObject, a Door
 * 				inherits all attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for DoorType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DoorType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/building/2.0}AbstractOpeningType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="address" type="{http://www.opengis.net/citygml/2.0}AddressPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/building/2.0}_GenericApplicationPropertyOfDoor" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DoorType", propOrder = {
    "address",
    "genericApplicationPropertyOfDoor"
})
public class DoorType
    extends AbstractOpeningType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<AddressPropertyType> address;
    @XmlElement(name = "_GenericApplicationPropertyOfDoor")
    protected List<Object> genericApplicationPropertyOfDoor;

    /**
     * Gets the value of the address property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the address property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AddressPropertyType }
     * 
     * 
     */
    public List<AddressPropertyType> getAddress() {
        if (address == null) {
            address = new ArrayList<AddressPropertyType>();
        }
        return this.address;
    }

    public boolean isSetAddress() {
        return ((this.address!= null)&&(!this.address.isEmpty()));
    }

    public void unsetAddress() {
        this.address = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfDoor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfDoor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfDoor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfDoor() {
        if (genericApplicationPropertyOfDoor == null) {
            genericApplicationPropertyOfDoor = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfDoor;
    }

    public boolean isSetGenericApplicationPropertyOfDoor() {
        return ((this.genericApplicationPropertyOfDoor!= null)&&(!this.genericApplicationPropertyOfDoor.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfDoor() {
        this.genericApplicationPropertyOfDoor = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<AddressPropertyType> theAddress;
            theAddress = (this.isSetAddress()?this.getAddress():null);
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            List<Object> theGenericApplicationPropertyOfDoor;
            theGenericApplicationPropertyOfDoor = (this.isSetGenericApplicationPropertyOfDoor()?this.getGenericApplicationPropertyOfDoor():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfDoor", buffer, theGenericApplicationPropertyOfDoor);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DoorType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DoorType that = ((DoorType) object);
        {
            List<AddressPropertyType> lhsAddress;
            lhsAddress = (this.isSetAddress()?this.getAddress():null);
            List<AddressPropertyType> rhsAddress;
            rhsAddress = (that.isSetAddress()?that.getAddress():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfDoor;
            lhsGenericApplicationPropertyOfDoor = (this.isSetGenericApplicationPropertyOfDoor()?this.getGenericApplicationPropertyOfDoor():null);
            List<Object> rhsGenericApplicationPropertyOfDoor;
            rhsGenericApplicationPropertyOfDoor = (that.isSetGenericApplicationPropertyOfDoor()?that.getGenericApplicationPropertyOfDoor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfDoor", lhsGenericApplicationPropertyOfDoor), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfDoor", rhsGenericApplicationPropertyOfDoor), lhsGenericApplicationPropertyOfDoor, rhsGenericApplicationPropertyOfDoor)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<AddressPropertyType> theAddress;
            theAddress = (this.isSetAddress()?this.getAddress():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            List<Object> theGenericApplicationPropertyOfDoor;
            theGenericApplicationPropertyOfDoor = (this.isSetGenericApplicationPropertyOfDoor()?this.getGenericApplicationPropertyOfDoor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfDoor", theGenericApplicationPropertyOfDoor), currentHashCode, theGenericApplicationPropertyOfDoor);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof DoorType) {
            final DoorType copy = ((DoorType) draftCopy);
            if (this.isSetAddress()) {
                List<AddressPropertyType> sourceAddress;
                sourceAddress = (this.isSetAddress()?this.getAddress():null);
                @SuppressWarnings("unchecked")
                List<AddressPropertyType> copyAddress = ((List<AddressPropertyType> ) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.unsetAddress();
                if (copyAddress!= null) {
                    List<AddressPropertyType> uniqueAddressl = copy.getAddress();
                    uniqueAddressl.addAll(copyAddress);
                }
            } else {
                copy.unsetAddress();
            }
            if (this.isSetGenericApplicationPropertyOfDoor()) {
                List<Object> sourceGenericApplicationPropertyOfDoor;
                sourceGenericApplicationPropertyOfDoor = (this.isSetGenericApplicationPropertyOfDoor()?this.getGenericApplicationPropertyOfDoor():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfDoor = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfDoor", sourceGenericApplicationPropertyOfDoor), sourceGenericApplicationPropertyOfDoor));
                copy.unsetGenericApplicationPropertyOfDoor();
                if (copyGenericApplicationPropertyOfDoor!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfDoorl = copy.getGenericApplicationPropertyOfDoor();
                    uniqueGenericApplicationPropertyOfDoorl.addAll(copyGenericApplicationPropertyOfDoor);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfDoor();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DoorType();
    }

}
