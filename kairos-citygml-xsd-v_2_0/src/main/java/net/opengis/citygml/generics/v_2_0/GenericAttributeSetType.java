//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.generics.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Set of generic attributes with an optional codeSpace. If the codeSpace attribute is present, then its
 * 				value should identify an authority for the set, such as the organisation or community who defined its content. The generic
 * 				attribute set may contain arbitrary generic attributes.
 * 
 * <p>Java class for GenericAttributeSetType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GenericAttributeSetType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/generics/2.0}AbstractGenericAttributeType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/generics/2.0}_genericAttribute" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="codeSpace" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GenericAttributeSetType", propOrder = {
    "genericAttribute"
})
public class GenericAttributeSetType
    extends AbstractGenericAttributeType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElementRef(name = "_genericAttribute", namespace = "http://www.opengis.net/citygml/generics/2.0", type = JAXBElement.class)
    protected List<JAXBElement<? extends AbstractGenericAttributeType>> genericAttribute;
    @XmlAttribute(name = "codeSpace")
    @XmlSchemaType(name = "anyURI")
    protected String codeSpace;

    /**
     * Gets the value of the genericAttribute property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericAttribute property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericAttribute().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link AbstractGenericAttributeType }{@code >}
     * {@link JAXBElement }{@code <}{@link StringAttributeType }{@code >}
     * {@link JAXBElement }{@code <}{@link DoubleAttributeType }{@code >}
     * {@link JAXBElement }{@code <}{@link GenericAttributeSetType }{@code >}
     * {@link JAXBElement }{@code <}{@link MeasureAttributeType }{@code >}
     * {@link JAXBElement }{@code <}{@link DateAttributeType }{@code >}
     * {@link JAXBElement }{@code <}{@link UriAttributeType }{@code >}
     * {@link JAXBElement }{@code <}{@link IntAttributeType }{@code >}
     * 
     * 
     */
    public List<JAXBElement<? extends AbstractGenericAttributeType>> getGenericAttribute() {
        if (genericAttribute == null) {
            genericAttribute = new ArrayList<JAXBElement<? extends AbstractGenericAttributeType>>();
        }
        return this.genericAttribute;
    }

    public boolean isSetGenericAttribute() {
        return ((this.genericAttribute!= null)&&(!this.genericAttribute.isEmpty()));
    }

    public void unsetGenericAttribute() {
        this.genericAttribute = null;
    }

    /**
     * Gets the value of the codeSpace property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCodeSpace() {
        return codeSpace;
    }

    /**
     * Sets the value of the codeSpace property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCodeSpace(String value) {
        this.codeSpace = value;
    }

    public boolean isSetCodeSpace() {
        return (this.codeSpace!= null);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<JAXBElement<? extends AbstractGenericAttributeType>> theGenericAttribute;
            theGenericAttribute = (this.isSetGenericAttribute()?this.getGenericAttribute():null);
            strategy.appendField(locator, this, "genericAttribute", buffer, theGenericAttribute);
        }
        {
            String theCodeSpace;
            theCodeSpace = this.getCodeSpace();
            strategy.appendField(locator, this, "codeSpace", buffer, theCodeSpace);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GenericAttributeSetType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final GenericAttributeSetType that = ((GenericAttributeSetType) object);
        {
            List<JAXBElement<? extends AbstractGenericAttributeType>> lhsGenericAttribute;
            lhsGenericAttribute = (this.isSetGenericAttribute()?this.getGenericAttribute():null);
            List<JAXBElement<? extends AbstractGenericAttributeType>> rhsGenericAttribute;
            rhsGenericAttribute = (that.isSetGenericAttribute()?that.getGenericAttribute():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericAttribute", lhsGenericAttribute), LocatorUtils.property(thatLocator, "genericAttribute", rhsGenericAttribute), lhsGenericAttribute, rhsGenericAttribute)) {
                return false;
            }
        }
        {
            String lhsCodeSpace;
            lhsCodeSpace = this.getCodeSpace();
            String rhsCodeSpace;
            rhsCodeSpace = that.getCodeSpace();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codeSpace", lhsCodeSpace), LocatorUtils.property(thatLocator, "codeSpace", rhsCodeSpace), lhsCodeSpace, rhsCodeSpace)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<JAXBElement<? extends AbstractGenericAttributeType>> theGenericAttribute;
            theGenericAttribute = (this.isSetGenericAttribute()?this.getGenericAttribute():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericAttribute", theGenericAttribute), currentHashCode, theGenericAttribute);
        }
        {
            String theCodeSpace;
            theCodeSpace = this.getCodeSpace();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codeSpace", theCodeSpace), currentHashCode, theCodeSpace);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof GenericAttributeSetType) {
            final GenericAttributeSetType copy = ((GenericAttributeSetType) draftCopy);
            if (this.isSetGenericAttribute()) {
                List<JAXBElement<? extends AbstractGenericAttributeType>> sourceGenericAttribute;
                sourceGenericAttribute = (this.isSetGenericAttribute()?this.getGenericAttribute():null);
                @SuppressWarnings("unchecked")
                List<JAXBElement<? extends AbstractGenericAttributeType>> copyGenericAttribute = ((List<JAXBElement<? extends AbstractGenericAttributeType>> ) strategy.copy(LocatorUtils.property(locator, "genericAttribute", sourceGenericAttribute), sourceGenericAttribute));
                copy.unsetGenericAttribute();
                if (copyGenericAttribute!= null) {
                    List<JAXBElement<? extends AbstractGenericAttributeType>> uniqueGenericAttributel = copy.getGenericAttribute();
                    uniqueGenericAttributel.addAll(copyGenericAttribute);
                }
            } else {
                copy.unsetGenericAttribute();
            }
            if (this.isSetCodeSpace()) {
                String sourceCodeSpace;
                sourceCodeSpace = this.getCodeSpace();
                String copyCodeSpace = ((String) strategy.copy(LocatorUtils.property(locator, "codeSpace", sourceCodeSpace), sourceCodeSpace));
                copy.setCodeSpace(copyCodeSpace);
            } else {
                copy.codeSpace = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GenericAttributeSetType();
    }

}
