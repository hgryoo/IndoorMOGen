//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.waterbody.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.CodeType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the surface of a water body, which separates the water from the air. As subclass of
 * 				_CityObject, a WaterSurface inherits all attributes and relations, in particular an id, names, external references, and
 * 				generalization relations. 
 * 
 * <p>Java class for WaterSurfaceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="WaterSurfaceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/waterbody/2.0}AbstractWaterBoundarySurfaceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="waterLevel" type="{http://www.opengis.net/gml}CodeType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/waterbody/2.0}_GenericApplicationPropertyOfWaterSurface" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "WaterSurfaceType", propOrder = {
    "waterLevel",
    "genericApplicationPropertyOfWaterSurface"
})
public class WaterSurfaceType
    extends AbstractWaterBoundarySurfaceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected CodeType waterLevel;
    @XmlElement(name = "_GenericApplicationPropertyOfWaterSurface")
    protected List<Object> genericApplicationPropertyOfWaterSurface;

    /**
     * Gets the value of the waterLevel property.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getWaterLevel() {
        return waterLevel;
    }

    /**
     * Sets the value of the waterLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setWaterLevel(CodeType value) {
        this.waterLevel = value;
    }

    public boolean isSetWaterLevel() {
        return (this.waterLevel!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfWaterSurface property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfWaterSurface property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfWaterSurface().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfWaterSurface() {
        if (genericApplicationPropertyOfWaterSurface == null) {
            genericApplicationPropertyOfWaterSurface = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfWaterSurface;
    }

    public boolean isSetGenericApplicationPropertyOfWaterSurface() {
        return ((this.genericApplicationPropertyOfWaterSurface!= null)&&(!this.genericApplicationPropertyOfWaterSurface.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfWaterSurface() {
        this.genericApplicationPropertyOfWaterSurface = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeType theWaterLevel;
            theWaterLevel = this.getWaterLevel();
            strategy.appendField(locator, this, "waterLevel", buffer, theWaterLevel);
        }
        {
            List<Object> theGenericApplicationPropertyOfWaterSurface;
            theGenericApplicationPropertyOfWaterSurface = (this.isSetGenericApplicationPropertyOfWaterSurface()?this.getGenericApplicationPropertyOfWaterSurface():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfWaterSurface", buffer, theGenericApplicationPropertyOfWaterSurface);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof WaterSurfaceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final WaterSurfaceType that = ((WaterSurfaceType) object);
        {
            CodeType lhsWaterLevel;
            lhsWaterLevel = this.getWaterLevel();
            CodeType rhsWaterLevel;
            rhsWaterLevel = that.getWaterLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "waterLevel", lhsWaterLevel), LocatorUtils.property(thatLocator, "waterLevel", rhsWaterLevel), lhsWaterLevel, rhsWaterLevel)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfWaterSurface;
            lhsGenericApplicationPropertyOfWaterSurface = (this.isSetGenericApplicationPropertyOfWaterSurface()?this.getGenericApplicationPropertyOfWaterSurface():null);
            List<Object> rhsGenericApplicationPropertyOfWaterSurface;
            rhsGenericApplicationPropertyOfWaterSurface = (that.isSetGenericApplicationPropertyOfWaterSurface()?that.getGenericApplicationPropertyOfWaterSurface():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfWaterSurface", lhsGenericApplicationPropertyOfWaterSurface), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfWaterSurface", rhsGenericApplicationPropertyOfWaterSurface), lhsGenericApplicationPropertyOfWaterSurface, rhsGenericApplicationPropertyOfWaterSurface)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeType theWaterLevel;
            theWaterLevel = this.getWaterLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "waterLevel", theWaterLevel), currentHashCode, theWaterLevel);
        }
        {
            List<Object> theGenericApplicationPropertyOfWaterSurface;
            theGenericApplicationPropertyOfWaterSurface = (this.isSetGenericApplicationPropertyOfWaterSurface()?this.getGenericApplicationPropertyOfWaterSurface():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterSurface", theGenericApplicationPropertyOfWaterSurface), currentHashCode, theGenericApplicationPropertyOfWaterSurface);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof WaterSurfaceType) {
            final WaterSurfaceType copy = ((WaterSurfaceType) draftCopy);
            if (this.isSetWaterLevel()) {
                CodeType sourceWaterLevel;
                sourceWaterLevel = this.getWaterLevel();
                CodeType copyWaterLevel = ((CodeType) strategy.copy(LocatorUtils.property(locator, "waterLevel", sourceWaterLevel), sourceWaterLevel));
                copy.setWaterLevel(copyWaterLevel);
            } else {
                copy.waterLevel = null;
            }
            if (this.isSetGenericApplicationPropertyOfWaterSurface()) {
                List<Object> sourceGenericApplicationPropertyOfWaterSurface;
                sourceGenericApplicationPropertyOfWaterSurface = (this.isSetGenericApplicationPropertyOfWaterSurface()?this.getGenericApplicationPropertyOfWaterSurface():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfWaterSurface = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterSurface", sourceGenericApplicationPropertyOfWaterSurface), sourceGenericApplicationPropertyOfWaterSurface));
                copy.unsetGenericApplicationPropertyOfWaterSurface();
                if (copyGenericApplicationPropertyOfWaterSurface!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfWaterSurfacel = copy.getGenericApplicationPropertyOfWaterSurface();
                    uniqueGenericApplicationPropertyOfWaterSurfacel.addAll(copyGenericApplicationPropertyOfWaterSurface);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfWaterSurface();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new WaterSurfaceType();
    }

}
