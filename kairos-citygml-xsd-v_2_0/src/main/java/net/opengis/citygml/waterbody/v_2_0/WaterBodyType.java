//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.waterbody.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.CodeType;
import net.opengis.gml.v_3_1_1.MultiCurvePropertyType;
import net.opengis.gml.v_3_1_1.MultiSurfacePropertyType;
import net.opengis.gml.v_3_1_1.SolidPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing Water Bodies, e.g., lakes, rivers. As subclass of _CityObject, a WaterBody inherits all
 * 				attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for WaterBodyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="WaterBodyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/waterbody/2.0}AbstractWaterObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="class" type="{http://www.opengis.net/gml}CodeType" minOccurs="0"/&gt;
 *         &lt;element name="function" type="{http://www.opengis.net/gml}CodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="usage" type="{http://www.opengis.net/gml}CodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="lod0MultiCurve" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod0MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod1MultiCurve" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod1MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod1Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="boundedBy" type="{http://www.opengis.net/citygml/waterbody/2.0}BoundedByWaterSurfacePropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/waterbody/2.0}_GenericApplicationPropertyOfWaterBody" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "WaterBodyType", propOrder = {
    "clazz",
    "function",
    "usage",
    "lod0MultiCurve",
    "lod0MultiSurface",
    "lod1MultiCurve",
    "lod1MultiSurface",
    "lod1Solid",
    "lod2Solid",
    "lod3Solid",
    "lod4Solid",
    "cityObjectBoundedBy",
    "genericApplicationPropertyOfWaterBody"
})
public class WaterBodyType
    extends AbstractWaterObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "class")
    protected CodeType clazz;
    protected List<CodeType> function;
    protected List<CodeType> usage;
    protected MultiCurvePropertyType lod0MultiCurve;
    protected MultiSurfacePropertyType lod0MultiSurface;
    protected MultiCurvePropertyType lod1MultiCurve;
    protected MultiSurfacePropertyType lod1MultiSurface;
    protected SolidPropertyType lod1Solid;
    protected SolidPropertyType lod2Solid;
    protected SolidPropertyType lod3Solid;
    protected SolidPropertyType lod4Solid;
    @XmlElement(name = "boundedBy")
    protected List<BoundedByWaterSurfacePropertyType> cityObjectBoundedBy;
    @XmlElement(name = "_GenericApplicationPropertyOfWaterBody")
    protected List<Object> genericApplicationPropertyOfWaterBody;

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setClazz(CodeType value) {
        this.clazz = value;
    }

    public boolean isSetClazz() {
        return (this.clazz!= null);
    }

    /**
     * Gets the value of the function property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the function property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFunction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeType }
     * 
     * 
     */
    public List<CodeType> getFunction() {
        if (function == null) {
            function = new ArrayList<CodeType>();
        }
        return this.function;
    }

    public boolean isSetFunction() {
        return ((this.function!= null)&&(!this.function.isEmpty()));
    }

    public void unsetFunction() {
        this.function = null;
    }

    /**
     * Gets the value of the usage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the usage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUsage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeType }
     * 
     * 
     */
    public List<CodeType> getUsage() {
        if (usage == null) {
            usage = new ArrayList<CodeType>();
        }
        return this.usage;
    }

    public boolean isSetUsage() {
        return ((this.usage!= null)&&(!this.usage.isEmpty()));
    }

    public void unsetUsage() {
        this.usage = null;
    }

    /**
     * Gets the value of the lod0MultiCurve property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod0MultiCurve() {
        return lod0MultiCurve;
    }

    /**
     * Sets the value of the lod0MultiCurve property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod0MultiCurve(MultiCurvePropertyType value) {
        this.lod0MultiCurve = value;
    }

    public boolean isSetLod0MultiCurve() {
        return (this.lod0MultiCurve!= null);
    }

    /**
     * Gets the value of the lod0MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod0MultiSurface() {
        return lod0MultiSurface;
    }

    /**
     * Sets the value of the lod0MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod0MultiSurface(MultiSurfacePropertyType value) {
        this.lod0MultiSurface = value;
    }

    public boolean isSetLod0MultiSurface() {
        return (this.lod0MultiSurface!= null);
    }

    /**
     * Gets the value of the lod1MultiCurve property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod1MultiCurve() {
        return lod1MultiCurve;
    }

    /**
     * Sets the value of the lod1MultiCurve property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod1MultiCurve(MultiCurvePropertyType value) {
        this.lod1MultiCurve = value;
    }

    public boolean isSetLod1MultiCurve() {
        return (this.lod1MultiCurve!= null);
    }

    /**
     * Gets the value of the lod1MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod1MultiSurface() {
        return lod1MultiSurface;
    }

    /**
     * Sets the value of the lod1MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod1MultiSurface(MultiSurfacePropertyType value) {
        this.lod1MultiSurface = value;
    }

    public boolean isSetLod1MultiSurface() {
        return (this.lod1MultiSurface!= null);
    }

    /**
     * Gets the value of the lod1Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod1Solid() {
        return lod1Solid;
    }

    /**
     * Sets the value of the lod1Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod1Solid(SolidPropertyType value) {
        this.lod1Solid = value;
    }

    public boolean isSetLod1Solid() {
        return (this.lod1Solid!= null);
    }

    /**
     * Gets the value of the lod2Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod2Solid() {
        return lod2Solid;
    }

    /**
     * Sets the value of the lod2Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod2Solid(SolidPropertyType value) {
        this.lod2Solid = value;
    }

    public boolean isSetLod2Solid() {
        return (this.lod2Solid!= null);
    }

    /**
     * Gets the value of the lod3Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod3Solid() {
        return lod3Solid;
    }

    /**
     * Sets the value of the lod3Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod3Solid(SolidPropertyType value) {
        this.lod3Solid = value;
    }

    public boolean isSetLod3Solid() {
        return (this.lod3Solid!= null);
    }

    /**
     * Gets the value of the lod4Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod4Solid() {
        return lod4Solid;
    }

    /**
     * Sets the value of the lod4Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod4Solid(SolidPropertyType value) {
        this.lod4Solid = value;
    }

    public boolean isSetLod4Solid() {
        return (this.lod4Solid!= null);
    }

    /**
     * Gets the value of the cityObjectBoundedBy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cityObjectBoundedBy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCityObjectBoundedBy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BoundedByWaterSurfacePropertyType }
     * 
     * 
     */
    public List<BoundedByWaterSurfacePropertyType> getCityObjectBoundedBy() {
        if (cityObjectBoundedBy == null) {
            cityObjectBoundedBy = new ArrayList<BoundedByWaterSurfacePropertyType>();
        }
        return this.cityObjectBoundedBy;
    }

    public boolean isSetCityObjectBoundedBy() {
        return ((this.cityObjectBoundedBy!= null)&&(!this.cityObjectBoundedBy.isEmpty()));
    }

    public void unsetCityObjectBoundedBy() {
        this.cityObjectBoundedBy = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfWaterBody property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfWaterBody property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfWaterBody().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfWaterBody() {
        if (genericApplicationPropertyOfWaterBody == null) {
            genericApplicationPropertyOfWaterBody = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfWaterBody;
    }

    public boolean isSetGenericApplicationPropertyOfWaterBody() {
        return ((this.genericApplicationPropertyOfWaterBody!= null)&&(!this.genericApplicationPropertyOfWaterBody.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfWaterBody() {
        this.genericApplicationPropertyOfWaterBody = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeType theClazz;
            theClazz = this.getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz);
        }
        {
            List<CodeType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            strategy.appendField(locator, this, "function", buffer, theFunction);
        }
        {
            List<CodeType> theUsage;
            theUsage = (this.isSetUsage()?this.getUsage():null);
            strategy.appendField(locator, this, "usage", buffer, theUsage);
        }
        {
            MultiCurvePropertyType theLod0MultiCurve;
            theLod0MultiCurve = this.getLod0MultiCurve();
            strategy.appendField(locator, this, "lod0MultiCurve", buffer, theLod0MultiCurve);
        }
        {
            MultiSurfacePropertyType theLod0MultiSurface;
            theLod0MultiSurface = this.getLod0MultiSurface();
            strategy.appendField(locator, this, "lod0MultiSurface", buffer, theLod0MultiSurface);
        }
        {
            MultiCurvePropertyType theLod1MultiCurve;
            theLod1MultiCurve = this.getLod1MultiCurve();
            strategy.appendField(locator, this, "lod1MultiCurve", buffer, theLod1MultiCurve);
        }
        {
            MultiSurfacePropertyType theLod1MultiSurface;
            theLod1MultiSurface = this.getLod1MultiSurface();
            strategy.appendField(locator, this, "lod1MultiSurface", buffer, theLod1MultiSurface);
        }
        {
            SolidPropertyType theLod1Solid;
            theLod1Solid = this.getLod1Solid();
            strategy.appendField(locator, this, "lod1Solid", buffer, theLod1Solid);
        }
        {
            SolidPropertyType theLod2Solid;
            theLod2Solid = this.getLod2Solid();
            strategy.appendField(locator, this, "lod2Solid", buffer, theLod2Solid);
        }
        {
            SolidPropertyType theLod3Solid;
            theLod3Solid = this.getLod3Solid();
            strategy.appendField(locator, this, "lod3Solid", buffer, theLod3Solid);
        }
        {
            SolidPropertyType theLod4Solid;
            theLod4Solid = this.getLod4Solid();
            strategy.appendField(locator, this, "lod4Solid", buffer, theLod4Solid);
        }
        {
            List<BoundedByWaterSurfacePropertyType> theCityObjectBoundedBy;
            theCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
            strategy.appendField(locator, this, "cityObjectBoundedBy", buffer, theCityObjectBoundedBy);
        }
        {
            List<Object> theGenericApplicationPropertyOfWaterBody;
            theGenericApplicationPropertyOfWaterBody = (this.isSetGenericApplicationPropertyOfWaterBody()?this.getGenericApplicationPropertyOfWaterBody():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfWaterBody", buffer, theGenericApplicationPropertyOfWaterBody);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof WaterBodyType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final WaterBodyType that = ((WaterBodyType) object);
        {
            CodeType lhsClazz;
            lhsClazz = this.getClazz();
            CodeType rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<CodeType> lhsFunction;
            lhsFunction = (this.isSetFunction()?this.getFunction():null);
            List<CodeType> rhsFunction;
            rhsFunction = (that.isSetFunction()?that.getFunction():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "function", lhsFunction), LocatorUtils.property(thatLocator, "function", rhsFunction), lhsFunction, rhsFunction)) {
                return false;
            }
        }
        {
            List<CodeType> lhsUsage;
            lhsUsage = (this.isSetUsage()?this.getUsage():null);
            List<CodeType> rhsUsage;
            rhsUsage = (that.isSetUsage()?that.getUsage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usage", lhsUsage), LocatorUtils.property(thatLocator, "usage", rhsUsage), lhsUsage, rhsUsage)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod0MultiCurve;
            lhsLod0MultiCurve = this.getLod0MultiCurve();
            MultiCurvePropertyType rhsLod0MultiCurve;
            rhsLod0MultiCurve = that.getLod0MultiCurve();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod0MultiCurve", lhsLod0MultiCurve), LocatorUtils.property(thatLocator, "lod0MultiCurve", rhsLod0MultiCurve), lhsLod0MultiCurve, rhsLod0MultiCurve)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod0MultiSurface;
            lhsLod0MultiSurface = this.getLod0MultiSurface();
            MultiSurfacePropertyType rhsLod0MultiSurface;
            rhsLod0MultiSurface = that.getLod0MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod0MultiSurface", lhsLod0MultiSurface), LocatorUtils.property(thatLocator, "lod0MultiSurface", rhsLod0MultiSurface), lhsLod0MultiSurface, rhsLod0MultiSurface)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod1MultiCurve;
            lhsLod1MultiCurve = this.getLod1MultiCurve();
            MultiCurvePropertyType rhsLod1MultiCurve;
            rhsLod1MultiCurve = that.getLod1MultiCurve();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1MultiCurve", lhsLod1MultiCurve), LocatorUtils.property(thatLocator, "lod1MultiCurve", rhsLod1MultiCurve), lhsLod1MultiCurve, rhsLod1MultiCurve)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod1MultiSurface;
            lhsLod1MultiSurface = this.getLod1MultiSurface();
            MultiSurfacePropertyType rhsLod1MultiSurface;
            rhsLod1MultiSurface = that.getLod1MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1MultiSurface", lhsLod1MultiSurface), LocatorUtils.property(thatLocator, "lod1MultiSurface", rhsLod1MultiSurface), lhsLod1MultiSurface, rhsLod1MultiSurface)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod1Solid;
            lhsLod1Solid = this.getLod1Solid();
            SolidPropertyType rhsLod1Solid;
            rhsLod1Solid = that.getLod1Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1Solid", lhsLod1Solid), LocatorUtils.property(thatLocator, "lod1Solid", rhsLod1Solid), lhsLod1Solid, rhsLod1Solid)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod2Solid;
            lhsLod2Solid = this.getLod2Solid();
            SolidPropertyType rhsLod2Solid;
            rhsLod2Solid = that.getLod2Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2Solid", lhsLod2Solid), LocatorUtils.property(thatLocator, "lod2Solid", rhsLod2Solid), lhsLod2Solid, rhsLod2Solid)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod3Solid;
            lhsLod3Solid = this.getLod3Solid();
            SolidPropertyType rhsLod3Solid;
            rhsLod3Solid = that.getLod3Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3Solid", lhsLod3Solid), LocatorUtils.property(thatLocator, "lod3Solid", rhsLod3Solid), lhsLod3Solid, rhsLod3Solid)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod4Solid;
            lhsLod4Solid = this.getLod4Solid();
            SolidPropertyType rhsLod4Solid;
            rhsLod4Solid = that.getLod4Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4Solid", lhsLod4Solid), LocatorUtils.property(thatLocator, "lod4Solid", rhsLod4Solid), lhsLod4Solid, rhsLod4Solid)) {
                return false;
            }
        }
        {
            List<BoundedByWaterSurfacePropertyType> lhsCityObjectBoundedBy;
            lhsCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
            List<BoundedByWaterSurfacePropertyType> rhsCityObjectBoundedBy;
            rhsCityObjectBoundedBy = (that.isSetCityObjectBoundedBy()?that.getCityObjectBoundedBy():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cityObjectBoundedBy", lhsCityObjectBoundedBy), LocatorUtils.property(thatLocator, "cityObjectBoundedBy", rhsCityObjectBoundedBy), lhsCityObjectBoundedBy, rhsCityObjectBoundedBy)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfWaterBody;
            lhsGenericApplicationPropertyOfWaterBody = (this.isSetGenericApplicationPropertyOfWaterBody()?this.getGenericApplicationPropertyOfWaterBody():null);
            List<Object> rhsGenericApplicationPropertyOfWaterBody;
            rhsGenericApplicationPropertyOfWaterBody = (that.isSetGenericApplicationPropertyOfWaterBody()?that.getGenericApplicationPropertyOfWaterBody():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfWaterBody", lhsGenericApplicationPropertyOfWaterBody), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfWaterBody", rhsGenericApplicationPropertyOfWaterBody), lhsGenericApplicationPropertyOfWaterBody, rhsGenericApplicationPropertyOfWaterBody)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeType theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<CodeType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "function", theFunction), currentHashCode, theFunction);
        }
        {
            List<CodeType> theUsage;
            theUsage = (this.isSetUsage()?this.getUsage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usage", theUsage), currentHashCode, theUsage);
        }
        {
            MultiCurvePropertyType theLod0MultiCurve;
            theLod0MultiCurve = this.getLod0MultiCurve();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod0MultiCurve", theLod0MultiCurve), currentHashCode, theLod0MultiCurve);
        }
        {
            MultiSurfacePropertyType theLod0MultiSurface;
            theLod0MultiSurface = this.getLod0MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod0MultiSurface", theLod0MultiSurface), currentHashCode, theLod0MultiSurface);
        }
        {
            MultiCurvePropertyType theLod1MultiCurve;
            theLod1MultiCurve = this.getLod1MultiCurve();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1MultiCurve", theLod1MultiCurve), currentHashCode, theLod1MultiCurve);
        }
        {
            MultiSurfacePropertyType theLod1MultiSurface;
            theLod1MultiSurface = this.getLod1MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1MultiSurface", theLod1MultiSurface), currentHashCode, theLod1MultiSurface);
        }
        {
            SolidPropertyType theLod1Solid;
            theLod1Solid = this.getLod1Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1Solid", theLod1Solid), currentHashCode, theLod1Solid);
        }
        {
            SolidPropertyType theLod2Solid;
            theLod2Solid = this.getLod2Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2Solid", theLod2Solid), currentHashCode, theLod2Solid);
        }
        {
            SolidPropertyType theLod3Solid;
            theLod3Solid = this.getLod3Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3Solid", theLod3Solid), currentHashCode, theLod3Solid);
        }
        {
            SolidPropertyType theLod4Solid;
            theLod4Solid = this.getLod4Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4Solid", theLod4Solid), currentHashCode, theLod4Solid);
        }
        {
            List<BoundedByWaterSurfacePropertyType> theCityObjectBoundedBy;
            theCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cityObjectBoundedBy", theCityObjectBoundedBy), currentHashCode, theCityObjectBoundedBy);
        }
        {
            List<Object> theGenericApplicationPropertyOfWaterBody;
            theGenericApplicationPropertyOfWaterBody = (this.isSetGenericApplicationPropertyOfWaterBody()?this.getGenericApplicationPropertyOfWaterBody():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterBody", theGenericApplicationPropertyOfWaterBody), currentHashCode, theGenericApplicationPropertyOfWaterBody);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof WaterBodyType) {
            final WaterBodyType copy = ((WaterBodyType) draftCopy);
            if (this.isSetClazz()) {
                CodeType sourceClazz;
                sourceClazz = this.getClazz();
                CodeType copyClazz = ((CodeType) strategy.copy(LocatorUtils.property(locator, "clazz", sourceClazz), sourceClazz));
                copy.setClazz(copyClazz);
            } else {
                copy.clazz = null;
            }
            if (this.isSetFunction()) {
                List<CodeType> sourceFunction;
                sourceFunction = (this.isSetFunction()?this.getFunction():null);
                @SuppressWarnings("unchecked")
                List<CodeType> copyFunction = ((List<CodeType> ) strategy.copy(LocatorUtils.property(locator, "function", sourceFunction), sourceFunction));
                copy.unsetFunction();
                if (copyFunction!= null) {
                    List<CodeType> uniqueFunctionl = copy.getFunction();
                    uniqueFunctionl.addAll(copyFunction);
                }
            } else {
                copy.unsetFunction();
            }
            if (this.isSetUsage()) {
                List<CodeType> sourceUsage;
                sourceUsage = (this.isSetUsage()?this.getUsage():null);
                @SuppressWarnings("unchecked")
                List<CodeType> copyUsage = ((List<CodeType> ) strategy.copy(LocatorUtils.property(locator, "usage", sourceUsage), sourceUsage));
                copy.unsetUsage();
                if (copyUsage!= null) {
                    List<CodeType> uniqueUsagel = copy.getUsage();
                    uniqueUsagel.addAll(copyUsage);
                }
            } else {
                copy.unsetUsage();
            }
            if (this.isSetLod0MultiCurve()) {
                MultiCurvePropertyType sourceLod0MultiCurve;
                sourceLod0MultiCurve = this.getLod0MultiCurve();
                MultiCurvePropertyType copyLod0MultiCurve = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod0MultiCurve", sourceLod0MultiCurve), sourceLod0MultiCurve));
                copy.setLod0MultiCurve(copyLod0MultiCurve);
            } else {
                copy.lod0MultiCurve = null;
            }
            if (this.isSetLod0MultiSurface()) {
                MultiSurfacePropertyType sourceLod0MultiSurface;
                sourceLod0MultiSurface = this.getLod0MultiSurface();
                MultiSurfacePropertyType copyLod0MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod0MultiSurface", sourceLod0MultiSurface), sourceLod0MultiSurface));
                copy.setLod0MultiSurface(copyLod0MultiSurface);
            } else {
                copy.lod0MultiSurface = null;
            }
            if (this.isSetLod1MultiCurve()) {
                MultiCurvePropertyType sourceLod1MultiCurve;
                sourceLod1MultiCurve = this.getLod1MultiCurve();
                MultiCurvePropertyType copyLod1MultiCurve = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod1MultiCurve", sourceLod1MultiCurve), sourceLod1MultiCurve));
                copy.setLod1MultiCurve(copyLod1MultiCurve);
            } else {
                copy.lod1MultiCurve = null;
            }
            if (this.isSetLod1MultiSurface()) {
                MultiSurfacePropertyType sourceLod1MultiSurface;
                sourceLod1MultiSurface = this.getLod1MultiSurface();
                MultiSurfacePropertyType copyLod1MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod1MultiSurface", sourceLod1MultiSurface), sourceLod1MultiSurface));
                copy.setLod1MultiSurface(copyLod1MultiSurface);
            } else {
                copy.lod1MultiSurface = null;
            }
            if (this.isSetLod1Solid()) {
                SolidPropertyType sourceLod1Solid;
                sourceLod1Solid = this.getLod1Solid();
                SolidPropertyType copyLod1Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod1Solid", sourceLod1Solid), sourceLod1Solid));
                copy.setLod1Solid(copyLod1Solid);
            } else {
                copy.lod1Solid = null;
            }
            if (this.isSetLod2Solid()) {
                SolidPropertyType sourceLod2Solid;
                sourceLod2Solid = this.getLod2Solid();
                SolidPropertyType copyLod2Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod2Solid", sourceLod2Solid), sourceLod2Solid));
                copy.setLod2Solid(copyLod2Solid);
            } else {
                copy.lod2Solid = null;
            }
            if (this.isSetLod3Solid()) {
                SolidPropertyType sourceLod3Solid;
                sourceLod3Solid = this.getLod3Solid();
                SolidPropertyType copyLod3Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod3Solid", sourceLod3Solid), sourceLod3Solid));
                copy.setLod3Solid(copyLod3Solid);
            } else {
                copy.lod3Solid = null;
            }
            if (this.isSetLod4Solid()) {
                SolidPropertyType sourceLod4Solid;
                sourceLod4Solid = this.getLod4Solid();
                SolidPropertyType copyLod4Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod4Solid", sourceLod4Solid), sourceLod4Solid));
                copy.setLod4Solid(copyLod4Solid);
            } else {
                copy.lod4Solid = null;
            }
            if (this.isSetCityObjectBoundedBy()) {
                List<BoundedByWaterSurfacePropertyType> sourceCityObjectBoundedBy;
                sourceCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
                @SuppressWarnings("unchecked")
                List<BoundedByWaterSurfacePropertyType> copyCityObjectBoundedBy = ((List<BoundedByWaterSurfacePropertyType> ) strategy.copy(LocatorUtils.property(locator, "cityObjectBoundedBy", sourceCityObjectBoundedBy), sourceCityObjectBoundedBy));
                copy.unsetCityObjectBoundedBy();
                if (copyCityObjectBoundedBy!= null) {
                    List<BoundedByWaterSurfacePropertyType> uniqueCityObjectBoundedByl = copy.getCityObjectBoundedBy();
                    uniqueCityObjectBoundedByl.addAll(copyCityObjectBoundedBy);
                }
            } else {
                copy.unsetCityObjectBoundedBy();
            }
            if (this.isSetGenericApplicationPropertyOfWaterBody()) {
                List<Object> sourceGenericApplicationPropertyOfWaterBody;
                sourceGenericApplicationPropertyOfWaterBody = (this.isSetGenericApplicationPropertyOfWaterBody()?this.getGenericApplicationPropertyOfWaterBody():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfWaterBody = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterBody", sourceGenericApplicationPropertyOfWaterBody), sourceGenericApplicationPropertyOfWaterBody));
                copy.unsetGenericApplicationPropertyOfWaterBody();
                if (copyGenericApplicationPropertyOfWaterBody!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfWaterBodyl = copy.getGenericApplicationPropertyOfWaterBody();
                    uniqueGenericApplicationPropertyOfWaterBodyl.addAll(copyGenericApplicationPropertyOfWaterBody);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfWaterBody();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new WaterBodyType();
    }

}
