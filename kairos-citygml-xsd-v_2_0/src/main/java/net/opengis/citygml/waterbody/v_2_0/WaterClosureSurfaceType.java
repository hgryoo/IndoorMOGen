//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.waterbody.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the closure surface between water bodys. As subclass of _CityObject, a WaterClosureSurface
 * 				inherits all attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for WaterClosureSurfaceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="WaterClosureSurfaceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/waterbody/2.0}AbstractWaterBoundarySurfaceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/waterbody/2.0}_GenericApplicationPropertyOfWaterClosureSurface" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "WaterClosureSurfaceType", propOrder = {
    "genericApplicationPropertyOfWaterClosureSurface"
})
public class WaterClosureSurfaceType
    extends AbstractWaterBoundarySurfaceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "_GenericApplicationPropertyOfWaterClosureSurface")
    protected List<Object> genericApplicationPropertyOfWaterClosureSurface;

    /**
     * Gets the value of the genericApplicationPropertyOfWaterClosureSurface property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfWaterClosureSurface property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfWaterClosureSurface().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfWaterClosureSurface() {
        if (genericApplicationPropertyOfWaterClosureSurface == null) {
            genericApplicationPropertyOfWaterClosureSurface = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfWaterClosureSurface;
    }

    public boolean isSetGenericApplicationPropertyOfWaterClosureSurface() {
        return ((this.genericApplicationPropertyOfWaterClosureSurface!= null)&&(!this.genericApplicationPropertyOfWaterClosureSurface.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfWaterClosureSurface() {
        this.genericApplicationPropertyOfWaterClosureSurface = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Object> theGenericApplicationPropertyOfWaterClosureSurface;
            theGenericApplicationPropertyOfWaterClosureSurface = (this.isSetGenericApplicationPropertyOfWaterClosureSurface()?this.getGenericApplicationPropertyOfWaterClosureSurface():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfWaterClosureSurface", buffer, theGenericApplicationPropertyOfWaterClosureSurface);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof WaterClosureSurfaceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final WaterClosureSurfaceType that = ((WaterClosureSurfaceType) object);
        {
            List<Object> lhsGenericApplicationPropertyOfWaterClosureSurface;
            lhsGenericApplicationPropertyOfWaterClosureSurface = (this.isSetGenericApplicationPropertyOfWaterClosureSurface()?this.getGenericApplicationPropertyOfWaterClosureSurface():null);
            List<Object> rhsGenericApplicationPropertyOfWaterClosureSurface;
            rhsGenericApplicationPropertyOfWaterClosureSurface = (that.isSetGenericApplicationPropertyOfWaterClosureSurface()?that.getGenericApplicationPropertyOfWaterClosureSurface():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfWaterClosureSurface", lhsGenericApplicationPropertyOfWaterClosureSurface), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfWaterClosureSurface", rhsGenericApplicationPropertyOfWaterClosureSurface), lhsGenericApplicationPropertyOfWaterClosureSurface, rhsGenericApplicationPropertyOfWaterClosureSurface)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Object> theGenericApplicationPropertyOfWaterClosureSurface;
            theGenericApplicationPropertyOfWaterClosureSurface = (this.isSetGenericApplicationPropertyOfWaterClosureSurface()?this.getGenericApplicationPropertyOfWaterClosureSurface():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterClosureSurface", theGenericApplicationPropertyOfWaterClosureSurface), currentHashCode, theGenericApplicationPropertyOfWaterClosureSurface);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof WaterClosureSurfaceType) {
            final WaterClosureSurfaceType copy = ((WaterClosureSurfaceType) draftCopy);
            if (this.isSetGenericApplicationPropertyOfWaterClosureSurface()) {
                List<Object> sourceGenericApplicationPropertyOfWaterClosureSurface;
                sourceGenericApplicationPropertyOfWaterClosureSurface = (this.isSetGenericApplicationPropertyOfWaterClosureSurface()?this.getGenericApplicationPropertyOfWaterClosureSurface():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfWaterClosureSurface = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterClosureSurface", sourceGenericApplicationPropertyOfWaterClosureSurface), sourceGenericApplicationPropertyOfWaterClosureSurface));
                copy.unsetGenericApplicationPropertyOfWaterClosureSurface();
                if (copyGenericApplicationPropertyOfWaterClosureSurface!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfWaterClosureSurfacel = copy.getGenericApplicationPropertyOfWaterClosureSurface();
                    uniqueGenericApplicationPropertyOfWaterClosureSurfacel.addAll(copyGenericApplicationPropertyOfWaterClosureSurface);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfWaterClosureSurface();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new WaterClosureSurfaceType();
    }

}
