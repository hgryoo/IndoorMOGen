//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.waterbody.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.opengis.citygml.v_2_0.AbstractCityObjectType;
import net.opengis.gml.v_3_1_1.SurfacePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A WaterBoundarySurface is a thematic object which classifies surfaces bounding a water body.
 * 			
 * 
 * <p>Java class for AbstractWaterBoundarySurfaceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractWaterBoundarySurfaceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/2.0}AbstractCityObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lod2Surface" type="{http://www.opengis.net/gml}SurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3Surface" type="{http://www.opengis.net/gml}SurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4Surface" type="{http://www.opengis.net/gml}SurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/waterbody/2.0}_GenericApplicationPropertyOfWaterBoundarySurface" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractWaterBoundarySurfaceType", propOrder = {
    "lod2Surface",
    "lod3Surface",
    "lod4Surface",
    "genericApplicationPropertyOfWaterBoundarySurface"
})
@XmlSeeAlso({
    WaterSurfaceType.class,
    WaterGroundSurfaceType.class,
    WaterClosureSurfaceType.class
})
public abstract class AbstractWaterBoundarySurfaceType
    extends AbstractCityObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected SurfacePropertyType lod2Surface;
    protected SurfacePropertyType lod3Surface;
    protected SurfacePropertyType lod4Surface;
    @XmlElement(name = "_GenericApplicationPropertyOfWaterBoundarySurface")
    protected List<Object> genericApplicationPropertyOfWaterBoundarySurface;

    /**
     * Gets the value of the lod2Surface property.
     * 
     * @return
     *     possible object is
     *     {@link SurfacePropertyType }
     *     
     */
    public SurfacePropertyType getLod2Surface() {
        return lod2Surface;
    }

    /**
     * Sets the value of the lod2Surface property.
     * 
     * @param value
     *     allowed object is
     *     {@link SurfacePropertyType }
     *     
     */
    public void setLod2Surface(SurfacePropertyType value) {
        this.lod2Surface = value;
    }

    public boolean isSetLod2Surface() {
        return (this.lod2Surface!= null);
    }

    /**
     * Gets the value of the lod3Surface property.
     * 
     * @return
     *     possible object is
     *     {@link SurfacePropertyType }
     *     
     */
    public SurfacePropertyType getLod3Surface() {
        return lod3Surface;
    }

    /**
     * Sets the value of the lod3Surface property.
     * 
     * @param value
     *     allowed object is
     *     {@link SurfacePropertyType }
     *     
     */
    public void setLod3Surface(SurfacePropertyType value) {
        this.lod3Surface = value;
    }

    public boolean isSetLod3Surface() {
        return (this.lod3Surface!= null);
    }

    /**
     * Gets the value of the lod4Surface property.
     * 
     * @return
     *     possible object is
     *     {@link SurfacePropertyType }
     *     
     */
    public SurfacePropertyType getLod4Surface() {
        return lod4Surface;
    }

    /**
     * Sets the value of the lod4Surface property.
     * 
     * @param value
     *     allowed object is
     *     {@link SurfacePropertyType }
     *     
     */
    public void setLod4Surface(SurfacePropertyType value) {
        this.lod4Surface = value;
    }

    public boolean isSetLod4Surface() {
        return (this.lod4Surface!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfWaterBoundarySurface property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfWaterBoundarySurface property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfWaterBoundarySurface().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfWaterBoundarySurface() {
        if (genericApplicationPropertyOfWaterBoundarySurface == null) {
            genericApplicationPropertyOfWaterBoundarySurface = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfWaterBoundarySurface;
    }

    public boolean isSetGenericApplicationPropertyOfWaterBoundarySurface() {
        return ((this.genericApplicationPropertyOfWaterBoundarySurface!= null)&&(!this.genericApplicationPropertyOfWaterBoundarySurface.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfWaterBoundarySurface() {
        this.genericApplicationPropertyOfWaterBoundarySurface = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            SurfacePropertyType theLod2Surface;
            theLod2Surface = this.getLod2Surface();
            strategy.appendField(locator, this, "lod2Surface", buffer, theLod2Surface);
        }
        {
            SurfacePropertyType theLod3Surface;
            theLod3Surface = this.getLod3Surface();
            strategy.appendField(locator, this, "lod3Surface", buffer, theLod3Surface);
        }
        {
            SurfacePropertyType theLod4Surface;
            theLod4Surface = this.getLod4Surface();
            strategy.appendField(locator, this, "lod4Surface", buffer, theLod4Surface);
        }
        {
            List<Object> theGenericApplicationPropertyOfWaterBoundarySurface;
            theGenericApplicationPropertyOfWaterBoundarySurface = (this.isSetGenericApplicationPropertyOfWaterBoundarySurface()?this.getGenericApplicationPropertyOfWaterBoundarySurface():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfWaterBoundarySurface", buffer, theGenericApplicationPropertyOfWaterBoundarySurface);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractWaterBoundarySurfaceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractWaterBoundarySurfaceType that = ((AbstractWaterBoundarySurfaceType) object);
        {
            SurfacePropertyType lhsLod2Surface;
            lhsLod2Surface = this.getLod2Surface();
            SurfacePropertyType rhsLod2Surface;
            rhsLod2Surface = that.getLod2Surface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2Surface", lhsLod2Surface), LocatorUtils.property(thatLocator, "lod2Surface", rhsLod2Surface), lhsLod2Surface, rhsLod2Surface)) {
                return false;
            }
        }
        {
            SurfacePropertyType lhsLod3Surface;
            lhsLod3Surface = this.getLod3Surface();
            SurfacePropertyType rhsLod3Surface;
            rhsLod3Surface = that.getLod3Surface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3Surface", lhsLod3Surface), LocatorUtils.property(thatLocator, "lod3Surface", rhsLod3Surface), lhsLod3Surface, rhsLod3Surface)) {
                return false;
            }
        }
        {
            SurfacePropertyType lhsLod4Surface;
            lhsLod4Surface = this.getLod4Surface();
            SurfacePropertyType rhsLod4Surface;
            rhsLod4Surface = that.getLod4Surface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4Surface", lhsLod4Surface), LocatorUtils.property(thatLocator, "lod4Surface", rhsLod4Surface), lhsLod4Surface, rhsLod4Surface)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfWaterBoundarySurface;
            lhsGenericApplicationPropertyOfWaterBoundarySurface = (this.isSetGenericApplicationPropertyOfWaterBoundarySurface()?this.getGenericApplicationPropertyOfWaterBoundarySurface():null);
            List<Object> rhsGenericApplicationPropertyOfWaterBoundarySurface;
            rhsGenericApplicationPropertyOfWaterBoundarySurface = (that.isSetGenericApplicationPropertyOfWaterBoundarySurface()?that.getGenericApplicationPropertyOfWaterBoundarySurface():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfWaterBoundarySurface", lhsGenericApplicationPropertyOfWaterBoundarySurface), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfWaterBoundarySurface", rhsGenericApplicationPropertyOfWaterBoundarySurface), lhsGenericApplicationPropertyOfWaterBoundarySurface, rhsGenericApplicationPropertyOfWaterBoundarySurface)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            SurfacePropertyType theLod2Surface;
            theLod2Surface = this.getLod2Surface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2Surface", theLod2Surface), currentHashCode, theLod2Surface);
        }
        {
            SurfacePropertyType theLod3Surface;
            theLod3Surface = this.getLod3Surface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3Surface", theLod3Surface), currentHashCode, theLod3Surface);
        }
        {
            SurfacePropertyType theLod4Surface;
            theLod4Surface = this.getLod4Surface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4Surface", theLod4Surface), currentHashCode, theLod4Surface);
        }
        {
            List<Object> theGenericApplicationPropertyOfWaterBoundarySurface;
            theGenericApplicationPropertyOfWaterBoundarySurface = (this.isSetGenericApplicationPropertyOfWaterBoundarySurface()?this.getGenericApplicationPropertyOfWaterBoundarySurface():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterBoundarySurface", theGenericApplicationPropertyOfWaterBoundarySurface), currentHashCode, theGenericApplicationPropertyOfWaterBoundarySurface);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractWaterBoundarySurfaceType) {
            final AbstractWaterBoundarySurfaceType copy = ((AbstractWaterBoundarySurfaceType) target);
            if (this.isSetLod2Surface()) {
                SurfacePropertyType sourceLod2Surface;
                sourceLod2Surface = this.getLod2Surface();
                SurfacePropertyType copyLod2Surface = ((SurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod2Surface", sourceLod2Surface), sourceLod2Surface));
                copy.setLod2Surface(copyLod2Surface);
            } else {
                copy.lod2Surface = null;
            }
            if (this.isSetLod3Surface()) {
                SurfacePropertyType sourceLod3Surface;
                sourceLod3Surface = this.getLod3Surface();
                SurfacePropertyType copyLod3Surface = ((SurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod3Surface", sourceLod3Surface), sourceLod3Surface));
                copy.setLod3Surface(copyLod3Surface);
            } else {
                copy.lod3Surface = null;
            }
            if (this.isSetLod4Surface()) {
                SurfacePropertyType sourceLod4Surface;
                sourceLod4Surface = this.getLod4Surface();
                SurfacePropertyType copyLod4Surface = ((SurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod4Surface", sourceLod4Surface), sourceLod4Surface));
                copy.setLod4Surface(copyLod4Surface);
            } else {
                copy.lod4Surface = null;
            }
            if (this.isSetGenericApplicationPropertyOfWaterBoundarySurface()) {
                List<Object> sourceGenericApplicationPropertyOfWaterBoundarySurface;
                sourceGenericApplicationPropertyOfWaterBoundarySurface = (this.isSetGenericApplicationPropertyOfWaterBoundarySurface()?this.getGenericApplicationPropertyOfWaterBoundarySurface():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfWaterBoundarySurface = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfWaterBoundarySurface", sourceGenericApplicationPropertyOfWaterBoundarySurface), sourceGenericApplicationPropertyOfWaterBoundarySurface));
                copy.unsetGenericApplicationPropertyOfWaterBoundarySurface();
                if (copyGenericApplicationPropertyOfWaterBoundarySurface!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfWaterBoundarySurfacel = copy.getGenericApplicationPropertyOfWaterBoundarySurface();
                    uniqueGenericApplicationPropertyOfWaterBoundarySurfacel.addAll(copyGenericApplicationPropertyOfWaterBoundarySurface);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfWaterBoundarySurface();
            }
        }
        return target;
    }

}
