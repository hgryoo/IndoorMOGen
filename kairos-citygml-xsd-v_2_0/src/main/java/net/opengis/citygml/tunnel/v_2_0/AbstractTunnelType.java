//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.tunnel.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import net.opengis.citygml.v_2_0.AbstractSiteType;
import net.opengis.gml.v_3_1_1.CodeType;
import net.opengis.gml.v_3_1_1.MultiCurvePropertyType;
import net.opengis.gml.v_3_1_1.MultiSurfacePropertyType;
import net.opengis.gml.v_3_1_1.SolidPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Abstract super class of the features Tunnel and TunnelPart
 * 
 * <p>Java class for AbstractTunnelType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractTunnelType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/2.0}AbstractSiteType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="class" type="{http://www.opengis.net/gml}CodeType" minOccurs="0"/&gt;
 *         &lt;element name="function" type="{http://www.opengis.net/gml}CodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="usage" type="{http://www.opengis.net/gml}CodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="yearOfConstruction" type="{http://www.w3.org/2001/XMLSchema}gYear" minOccurs="0"/&gt;
 *         &lt;element name="yearOfDemolition" type="{http://www.w3.org/2001/XMLSchema}gYear" minOccurs="0"/&gt;
 *         &lt;element name="lod1Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod1MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod1TerrainIntersection" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2MultiCurve" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2TerrainIntersection" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="outerTunnelInstallation" type="{http://www.opengis.net/citygml/tunnel/2.0}TunnelInstallationPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="interiorTunnelInstallation" type="{http://www.opengis.net/citygml/tunnel/2.0}IntTunnelInstallationPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="boundedBy" type="{http://www.opengis.net/citygml/tunnel/2.0}BoundarySurfacePropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="lod3Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3MultiCurve" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3TerrainIntersection" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4Solid" type="{http://www.opengis.net/gml}SolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4MultiCurve" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4TerrainIntersection" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="interiorHollowSpace" type="{http://www.opengis.net/citygml/tunnel/2.0}InteriorHollowSpacePropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="consistsOfTunnelPart" type="{http://www.opengis.net/citygml/tunnel/2.0}TunnelPartPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/tunnel/2.0}_GenericApplicationPropertyOfAbstractTunnel" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractTunnelType", propOrder = {
    "clazz",
    "function",
    "usage",
    "yearOfConstruction",
    "yearOfDemolition",
    "lod1Solid",
    "lod1MultiSurface",
    "lod1TerrainIntersection",
    "lod2Solid",
    "lod2MultiSurface",
    "lod2MultiCurve",
    "lod2TerrainIntersection",
    "outerTunnelInstallation",
    "interiorTunnelInstallation",
    "cityObjectBoundedBy",
    "lod3Solid",
    "lod3MultiSurface",
    "lod3MultiCurve",
    "lod3TerrainIntersection",
    "lod4Solid",
    "lod4MultiSurface",
    "lod4MultiCurve",
    "lod4TerrainIntersection",
    "interiorHollowSpace",
    "consistsOfTunnelPart",
    "genericApplicationPropertyOfAbstractTunnel"
})
@XmlSeeAlso({
    TunnelType.class,
    TunnelPartType.class
})
public class AbstractTunnelType
    extends AbstractSiteType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "class")
    protected CodeType clazz;
    protected List<CodeType> function;
    protected List<CodeType> usage;
    @XmlSchemaType(name = "gYear")
    protected XMLGregorianCalendar yearOfConstruction;
    @XmlSchemaType(name = "gYear")
    protected XMLGregorianCalendar yearOfDemolition;
    protected SolidPropertyType lod1Solid;
    protected MultiSurfacePropertyType lod1MultiSurface;
    protected MultiCurvePropertyType lod1TerrainIntersection;
    protected SolidPropertyType lod2Solid;
    protected MultiSurfacePropertyType lod2MultiSurface;
    protected MultiCurvePropertyType lod2MultiCurve;
    protected MultiCurvePropertyType lod2TerrainIntersection;
    protected List<TunnelInstallationPropertyType> outerTunnelInstallation;
    protected List<IntTunnelInstallationPropertyType> interiorTunnelInstallation;
    @XmlElement(name = "boundedBy")
    protected List<BoundarySurfacePropertyType> cityObjectBoundedBy;
    protected SolidPropertyType lod3Solid;
    protected MultiSurfacePropertyType lod3MultiSurface;
    protected MultiCurvePropertyType lod3MultiCurve;
    protected MultiCurvePropertyType lod3TerrainIntersection;
    protected SolidPropertyType lod4Solid;
    protected MultiSurfacePropertyType lod4MultiSurface;
    protected MultiCurvePropertyType lod4MultiCurve;
    protected MultiCurvePropertyType lod4TerrainIntersection;
    protected List<InteriorHollowSpacePropertyType> interiorHollowSpace;
    protected List<TunnelPartPropertyType> consistsOfTunnelPart;
    @XmlElement(name = "_GenericApplicationPropertyOfAbstractTunnel")
    protected List<Object> genericApplicationPropertyOfAbstractTunnel;

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setClazz(CodeType value) {
        this.clazz = value;
    }

    public boolean isSetClazz() {
        return (this.clazz!= null);
    }

    /**
     * Gets the value of the function property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the function property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFunction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeType }
     * 
     * 
     */
    public List<CodeType> getFunction() {
        if (function == null) {
            function = new ArrayList<CodeType>();
        }
        return this.function;
    }

    public boolean isSetFunction() {
        return ((this.function!= null)&&(!this.function.isEmpty()));
    }

    public void unsetFunction() {
        this.function = null;
    }

    /**
     * Gets the value of the usage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the usage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUsage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeType }
     * 
     * 
     */
    public List<CodeType> getUsage() {
        if (usage == null) {
            usage = new ArrayList<CodeType>();
        }
        return this.usage;
    }

    public boolean isSetUsage() {
        return ((this.usage!= null)&&(!this.usage.isEmpty()));
    }

    public void unsetUsage() {
        this.usage = null;
    }

    /**
     * Gets the value of the yearOfConstruction property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getYearOfConstruction() {
        return yearOfConstruction;
    }

    /**
     * Sets the value of the yearOfConstruction property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setYearOfConstruction(XMLGregorianCalendar value) {
        this.yearOfConstruction = value;
    }

    public boolean isSetYearOfConstruction() {
        return (this.yearOfConstruction!= null);
    }

    /**
     * Gets the value of the yearOfDemolition property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getYearOfDemolition() {
        return yearOfDemolition;
    }

    /**
     * Sets the value of the yearOfDemolition property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setYearOfDemolition(XMLGregorianCalendar value) {
        this.yearOfDemolition = value;
    }

    public boolean isSetYearOfDemolition() {
        return (this.yearOfDemolition!= null);
    }

    /**
     * Gets the value of the lod1Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod1Solid() {
        return lod1Solid;
    }

    /**
     * Sets the value of the lod1Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod1Solid(SolidPropertyType value) {
        this.lod1Solid = value;
    }

    public boolean isSetLod1Solid() {
        return (this.lod1Solid!= null);
    }

    /**
     * Gets the value of the lod1MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod1MultiSurface() {
        return lod1MultiSurface;
    }

    /**
     * Sets the value of the lod1MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod1MultiSurface(MultiSurfacePropertyType value) {
        this.lod1MultiSurface = value;
    }

    public boolean isSetLod1MultiSurface() {
        return (this.lod1MultiSurface!= null);
    }

    /**
     * Gets the value of the lod1TerrainIntersection property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod1TerrainIntersection() {
        return lod1TerrainIntersection;
    }

    /**
     * Sets the value of the lod1TerrainIntersection property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod1TerrainIntersection(MultiCurvePropertyType value) {
        this.lod1TerrainIntersection = value;
    }

    public boolean isSetLod1TerrainIntersection() {
        return (this.lod1TerrainIntersection!= null);
    }

    /**
     * Gets the value of the lod2Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod2Solid() {
        return lod2Solid;
    }

    /**
     * Sets the value of the lod2Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod2Solid(SolidPropertyType value) {
        this.lod2Solid = value;
    }

    public boolean isSetLod2Solid() {
        return (this.lod2Solid!= null);
    }

    /**
     * Gets the value of the lod2MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod2MultiSurface() {
        return lod2MultiSurface;
    }

    /**
     * Sets the value of the lod2MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod2MultiSurface(MultiSurfacePropertyType value) {
        this.lod2MultiSurface = value;
    }

    public boolean isSetLod2MultiSurface() {
        return (this.lod2MultiSurface!= null);
    }

    /**
     * Gets the value of the lod2MultiCurve property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod2MultiCurve() {
        return lod2MultiCurve;
    }

    /**
     * Sets the value of the lod2MultiCurve property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod2MultiCurve(MultiCurvePropertyType value) {
        this.lod2MultiCurve = value;
    }

    public boolean isSetLod2MultiCurve() {
        return (this.lod2MultiCurve!= null);
    }

    /**
     * Gets the value of the lod2TerrainIntersection property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod2TerrainIntersection() {
        return lod2TerrainIntersection;
    }

    /**
     * Sets the value of the lod2TerrainIntersection property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod2TerrainIntersection(MultiCurvePropertyType value) {
        this.lod2TerrainIntersection = value;
    }

    public boolean isSetLod2TerrainIntersection() {
        return (this.lod2TerrainIntersection!= null);
    }

    /**
     * Gets the value of the outerTunnelInstallation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the outerTunnelInstallation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOuterTunnelInstallation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TunnelInstallationPropertyType }
     * 
     * 
     */
    public List<TunnelInstallationPropertyType> getOuterTunnelInstallation() {
        if (outerTunnelInstallation == null) {
            outerTunnelInstallation = new ArrayList<TunnelInstallationPropertyType>();
        }
        return this.outerTunnelInstallation;
    }

    public boolean isSetOuterTunnelInstallation() {
        return ((this.outerTunnelInstallation!= null)&&(!this.outerTunnelInstallation.isEmpty()));
    }

    public void unsetOuterTunnelInstallation() {
        this.outerTunnelInstallation = null;
    }

    /**
     * Gets the value of the interiorTunnelInstallation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the interiorTunnelInstallation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInteriorTunnelInstallation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link IntTunnelInstallationPropertyType }
     * 
     * 
     */
    public List<IntTunnelInstallationPropertyType> getInteriorTunnelInstallation() {
        if (interiorTunnelInstallation == null) {
            interiorTunnelInstallation = new ArrayList<IntTunnelInstallationPropertyType>();
        }
        return this.interiorTunnelInstallation;
    }

    public boolean isSetInteriorTunnelInstallation() {
        return ((this.interiorTunnelInstallation!= null)&&(!this.interiorTunnelInstallation.isEmpty()));
    }

    public void unsetInteriorTunnelInstallation() {
        this.interiorTunnelInstallation = null;
    }

    /**
     * Gets the value of the cityObjectBoundedBy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cityObjectBoundedBy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCityObjectBoundedBy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BoundarySurfacePropertyType }
     * 
     * 
     */
    public List<BoundarySurfacePropertyType> getCityObjectBoundedBy() {
        if (cityObjectBoundedBy == null) {
            cityObjectBoundedBy = new ArrayList<BoundarySurfacePropertyType>();
        }
        return this.cityObjectBoundedBy;
    }

    public boolean isSetCityObjectBoundedBy() {
        return ((this.cityObjectBoundedBy!= null)&&(!this.cityObjectBoundedBy.isEmpty()));
    }

    public void unsetCityObjectBoundedBy() {
        this.cityObjectBoundedBy = null;
    }

    /**
     * Gets the value of the lod3Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod3Solid() {
        return lod3Solid;
    }

    /**
     * Sets the value of the lod3Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod3Solid(SolidPropertyType value) {
        this.lod3Solid = value;
    }

    public boolean isSetLod3Solid() {
        return (this.lod3Solid!= null);
    }

    /**
     * Gets the value of the lod3MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod3MultiSurface() {
        return lod3MultiSurface;
    }

    /**
     * Sets the value of the lod3MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod3MultiSurface(MultiSurfacePropertyType value) {
        this.lod3MultiSurface = value;
    }

    public boolean isSetLod3MultiSurface() {
        return (this.lod3MultiSurface!= null);
    }

    /**
     * Gets the value of the lod3MultiCurve property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod3MultiCurve() {
        return lod3MultiCurve;
    }

    /**
     * Sets the value of the lod3MultiCurve property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod3MultiCurve(MultiCurvePropertyType value) {
        this.lod3MultiCurve = value;
    }

    public boolean isSetLod3MultiCurve() {
        return (this.lod3MultiCurve!= null);
    }

    /**
     * Gets the value of the lod3TerrainIntersection property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod3TerrainIntersection() {
        return lod3TerrainIntersection;
    }

    /**
     * Sets the value of the lod3TerrainIntersection property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod3TerrainIntersection(MultiCurvePropertyType value) {
        this.lod3TerrainIntersection = value;
    }

    public boolean isSetLod3TerrainIntersection() {
        return (this.lod3TerrainIntersection!= null);
    }

    /**
     * Gets the value of the lod4Solid property.
     * 
     * @return
     *     possible object is
     *     {@link SolidPropertyType }
     *     
     */
    public SolidPropertyType getLod4Solid() {
        return lod4Solid;
    }

    /**
     * Sets the value of the lod4Solid property.
     * 
     * @param value
     *     allowed object is
     *     {@link SolidPropertyType }
     *     
     */
    public void setLod4Solid(SolidPropertyType value) {
        this.lod4Solid = value;
    }

    public boolean isSetLod4Solid() {
        return (this.lod4Solid!= null);
    }

    /**
     * Gets the value of the lod4MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod4MultiSurface() {
        return lod4MultiSurface;
    }

    /**
     * Sets the value of the lod4MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod4MultiSurface(MultiSurfacePropertyType value) {
        this.lod4MultiSurface = value;
    }

    public boolean isSetLod4MultiSurface() {
        return (this.lod4MultiSurface!= null);
    }

    /**
     * Gets the value of the lod4MultiCurve property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod4MultiCurve() {
        return lod4MultiCurve;
    }

    /**
     * Sets the value of the lod4MultiCurve property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod4MultiCurve(MultiCurvePropertyType value) {
        this.lod4MultiCurve = value;
    }

    public boolean isSetLod4MultiCurve() {
        return (this.lod4MultiCurve!= null);
    }

    /**
     * Gets the value of the lod4TerrainIntersection property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getLod4TerrainIntersection() {
        return lod4TerrainIntersection;
    }

    /**
     * Sets the value of the lod4TerrainIntersection property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setLod4TerrainIntersection(MultiCurvePropertyType value) {
        this.lod4TerrainIntersection = value;
    }

    public boolean isSetLod4TerrainIntersection() {
        return (this.lod4TerrainIntersection!= null);
    }

    /**
     * Gets the value of the interiorHollowSpace property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the interiorHollowSpace property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInteriorHollowSpace().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link InteriorHollowSpacePropertyType }
     * 
     * 
     */
    public List<InteriorHollowSpacePropertyType> getInteriorHollowSpace() {
        if (interiorHollowSpace == null) {
            interiorHollowSpace = new ArrayList<InteriorHollowSpacePropertyType>();
        }
        return this.interiorHollowSpace;
    }

    public boolean isSetInteriorHollowSpace() {
        return ((this.interiorHollowSpace!= null)&&(!this.interiorHollowSpace.isEmpty()));
    }

    public void unsetInteriorHollowSpace() {
        this.interiorHollowSpace = null;
    }

    /**
     * Gets the value of the consistsOfTunnelPart property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the consistsOfTunnelPart property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConsistsOfTunnelPart().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TunnelPartPropertyType }
     * 
     * 
     */
    public List<TunnelPartPropertyType> getConsistsOfTunnelPart() {
        if (consistsOfTunnelPart == null) {
            consistsOfTunnelPart = new ArrayList<TunnelPartPropertyType>();
        }
        return this.consistsOfTunnelPart;
    }

    public boolean isSetConsistsOfTunnelPart() {
        return ((this.consistsOfTunnelPart!= null)&&(!this.consistsOfTunnelPart.isEmpty()));
    }

    public void unsetConsistsOfTunnelPart() {
        this.consistsOfTunnelPart = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfAbstractTunnel property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfAbstractTunnel property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfAbstractTunnel().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfAbstractTunnel() {
        if (genericApplicationPropertyOfAbstractTunnel == null) {
            genericApplicationPropertyOfAbstractTunnel = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfAbstractTunnel;
    }

    public boolean isSetGenericApplicationPropertyOfAbstractTunnel() {
        return ((this.genericApplicationPropertyOfAbstractTunnel!= null)&&(!this.genericApplicationPropertyOfAbstractTunnel.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfAbstractTunnel() {
        this.genericApplicationPropertyOfAbstractTunnel = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeType theClazz;
            theClazz = this.getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz);
        }
        {
            List<CodeType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            strategy.appendField(locator, this, "function", buffer, theFunction);
        }
        {
            List<CodeType> theUsage;
            theUsage = (this.isSetUsage()?this.getUsage():null);
            strategy.appendField(locator, this, "usage", buffer, theUsage);
        }
        {
            XMLGregorianCalendar theYearOfConstruction;
            theYearOfConstruction = this.getYearOfConstruction();
            strategy.appendField(locator, this, "yearOfConstruction", buffer, theYearOfConstruction);
        }
        {
            XMLGregorianCalendar theYearOfDemolition;
            theYearOfDemolition = this.getYearOfDemolition();
            strategy.appendField(locator, this, "yearOfDemolition", buffer, theYearOfDemolition);
        }
        {
            SolidPropertyType theLod1Solid;
            theLod1Solid = this.getLod1Solid();
            strategy.appendField(locator, this, "lod1Solid", buffer, theLod1Solid);
        }
        {
            MultiSurfacePropertyType theLod1MultiSurface;
            theLod1MultiSurface = this.getLod1MultiSurface();
            strategy.appendField(locator, this, "lod1MultiSurface", buffer, theLod1MultiSurface);
        }
        {
            MultiCurvePropertyType theLod1TerrainIntersection;
            theLod1TerrainIntersection = this.getLod1TerrainIntersection();
            strategy.appendField(locator, this, "lod1TerrainIntersection", buffer, theLod1TerrainIntersection);
        }
        {
            SolidPropertyType theLod2Solid;
            theLod2Solid = this.getLod2Solid();
            strategy.appendField(locator, this, "lod2Solid", buffer, theLod2Solid);
        }
        {
            MultiSurfacePropertyType theLod2MultiSurface;
            theLod2MultiSurface = this.getLod2MultiSurface();
            strategy.appendField(locator, this, "lod2MultiSurface", buffer, theLod2MultiSurface);
        }
        {
            MultiCurvePropertyType theLod2MultiCurve;
            theLod2MultiCurve = this.getLod2MultiCurve();
            strategy.appendField(locator, this, "lod2MultiCurve", buffer, theLod2MultiCurve);
        }
        {
            MultiCurvePropertyType theLod2TerrainIntersection;
            theLod2TerrainIntersection = this.getLod2TerrainIntersection();
            strategy.appendField(locator, this, "lod2TerrainIntersection", buffer, theLod2TerrainIntersection);
        }
        {
            List<TunnelInstallationPropertyType> theOuterTunnelInstallation;
            theOuterTunnelInstallation = (this.isSetOuterTunnelInstallation()?this.getOuterTunnelInstallation():null);
            strategy.appendField(locator, this, "outerTunnelInstallation", buffer, theOuterTunnelInstallation);
        }
        {
            List<IntTunnelInstallationPropertyType> theInteriorTunnelInstallation;
            theInteriorTunnelInstallation = (this.isSetInteriorTunnelInstallation()?this.getInteriorTunnelInstallation():null);
            strategy.appendField(locator, this, "interiorTunnelInstallation", buffer, theInteriorTunnelInstallation);
        }
        {
            List<BoundarySurfacePropertyType> theCityObjectBoundedBy;
            theCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
            strategy.appendField(locator, this, "cityObjectBoundedBy", buffer, theCityObjectBoundedBy);
        }
        {
            SolidPropertyType theLod3Solid;
            theLod3Solid = this.getLod3Solid();
            strategy.appendField(locator, this, "lod3Solid", buffer, theLod3Solid);
        }
        {
            MultiSurfacePropertyType theLod3MultiSurface;
            theLod3MultiSurface = this.getLod3MultiSurface();
            strategy.appendField(locator, this, "lod3MultiSurface", buffer, theLod3MultiSurface);
        }
        {
            MultiCurvePropertyType theLod3MultiCurve;
            theLod3MultiCurve = this.getLod3MultiCurve();
            strategy.appendField(locator, this, "lod3MultiCurve", buffer, theLod3MultiCurve);
        }
        {
            MultiCurvePropertyType theLod3TerrainIntersection;
            theLod3TerrainIntersection = this.getLod3TerrainIntersection();
            strategy.appendField(locator, this, "lod3TerrainIntersection", buffer, theLod3TerrainIntersection);
        }
        {
            SolidPropertyType theLod4Solid;
            theLod4Solid = this.getLod4Solid();
            strategy.appendField(locator, this, "lod4Solid", buffer, theLod4Solid);
        }
        {
            MultiSurfacePropertyType theLod4MultiSurface;
            theLod4MultiSurface = this.getLod4MultiSurface();
            strategy.appendField(locator, this, "lod4MultiSurface", buffer, theLod4MultiSurface);
        }
        {
            MultiCurvePropertyType theLod4MultiCurve;
            theLod4MultiCurve = this.getLod4MultiCurve();
            strategy.appendField(locator, this, "lod4MultiCurve", buffer, theLod4MultiCurve);
        }
        {
            MultiCurvePropertyType theLod4TerrainIntersection;
            theLod4TerrainIntersection = this.getLod4TerrainIntersection();
            strategy.appendField(locator, this, "lod4TerrainIntersection", buffer, theLod4TerrainIntersection);
        }
        {
            List<InteriorHollowSpacePropertyType> theInteriorHollowSpace;
            theInteriorHollowSpace = (this.isSetInteriorHollowSpace()?this.getInteriorHollowSpace():null);
            strategy.appendField(locator, this, "interiorHollowSpace", buffer, theInteriorHollowSpace);
        }
        {
            List<TunnelPartPropertyType> theConsistsOfTunnelPart;
            theConsistsOfTunnelPart = (this.isSetConsistsOfTunnelPart()?this.getConsistsOfTunnelPart():null);
            strategy.appendField(locator, this, "consistsOfTunnelPart", buffer, theConsistsOfTunnelPart);
        }
        {
            List<Object> theGenericApplicationPropertyOfAbstractTunnel;
            theGenericApplicationPropertyOfAbstractTunnel = (this.isSetGenericApplicationPropertyOfAbstractTunnel()?this.getGenericApplicationPropertyOfAbstractTunnel():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfAbstractTunnel", buffer, theGenericApplicationPropertyOfAbstractTunnel);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractTunnelType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractTunnelType that = ((AbstractTunnelType) object);
        {
            CodeType lhsClazz;
            lhsClazz = this.getClazz();
            CodeType rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<CodeType> lhsFunction;
            lhsFunction = (this.isSetFunction()?this.getFunction():null);
            List<CodeType> rhsFunction;
            rhsFunction = (that.isSetFunction()?that.getFunction():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "function", lhsFunction), LocatorUtils.property(thatLocator, "function", rhsFunction), lhsFunction, rhsFunction)) {
                return false;
            }
        }
        {
            List<CodeType> lhsUsage;
            lhsUsage = (this.isSetUsage()?this.getUsage():null);
            List<CodeType> rhsUsage;
            rhsUsage = (that.isSetUsage()?that.getUsage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usage", lhsUsage), LocatorUtils.property(thatLocator, "usage", rhsUsage), lhsUsage, rhsUsage)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsYearOfConstruction;
            lhsYearOfConstruction = this.getYearOfConstruction();
            XMLGregorianCalendar rhsYearOfConstruction;
            rhsYearOfConstruction = that.getYearOfConstruction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "yearOfConstruction", lhsYearOfConstruction), LocatorUtils.property(thatLocator, "yearOfConstruction", rhsYearOfConstruction), lhsYearOfConstruction, rhsYearOfConstruction)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsYearOfDemolition;
            lhsYearOfDemolition = this.getYearOfDemolition();
            XMLGregorianCalendar rhsYearOfDemolition;
            rhsYearOfDemolition = that.getYearOfDemolition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "yearOfDemolition", lhsYearOfDemolition), LocatorUtils.property(thatLocator, "yearOfDemolition", rhsYearOfDemolition), lhsYearOfDemolition, rhsYearOfDemolition)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod1Solid;
            lhsLod1Solid = this.getLod1Solid();
            SolidPropertyType rhsLod1Solid;
            rhsLod1Solid = that.getLod1Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1Solid", lhsLod1Solid), LocatorUtils.property(thatLocator, "lod1Solid", rhsLod1Solid), lhsLod1Solid, rhsLod1Solid)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod1MultiSurface;
            lhsLod1MultiSurface = this.getLod1MultiSurface();
            MultiSurfacePropertyType rhsLod1MultiSurface;
            rhsLod1MultiSurface = that.getLod1MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1MultiSurface", lhsLod1MultiSurface), LocatorUtils.property(thatLocator, "lod1MultiSurface", rhsLod1MultiSurface), lhsLod1MultiSurface, rhsLod1MultiSurface)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod1TerrainIntersection;
            lhsLod1TerrainIntersection = this.getLod1TerrainIntersection();
            MultiCurvePropertyType rhsLod1TerrainIntersection;
            rhsLod1TerrainIntersection = that.getLod1TerrainIntersection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1TerrainIntersection", lhsLod1TerrainIntersection), LocatorUtils.property(thatLocator, "lod1TerrainIntersection", rhsLod1TerrainIntersection), lhsLod1TerrainIntersection, rhsLod1TerrainIntersection)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod2Solid;
            lhsLod2Solid = this.getLod2Solid();
            SolidPropertyType rhsLod2Solid;
            rhsLod2Solid = that.getLod2Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2Solid", lhsLod2Solid), LocatorUtils.property(thatLocator, "lod2Solid", rhsLod2Solid), lhsLod2Solid, rhsLod2Solid)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod2MultiSurface;
            lhsLod2MultiSurface = this.getLod2MultiSurface();
            MultiSurfacePropertyType rhsLod2MultiSurface;
            rhsLod2MultiSurface = that.getLod2MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2MultiSurface", lhsLod2MultiSurface), LocatorUtils.property(thatLocator, "lod2MultiSurface", rhsLod2MultiSurface), lhsLod2MultiSurface, rhsLod2MultiSurface)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod2MultiCurve;
            lhsLod2MultiCurve = this.getLod2MultiCurve();
            MultiCurvePropertyType rhsLod2MultiCurve;
            rhsLod2MultiCurve = that.getLod2MultiCurve();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2MultiCurve", lhsLod2MultiCurve), LocatorUtils.property(thatLocator, "lod2MultiCurve", rhsLod2MultiCurve), lhsLod2MultiCurve, rhsLod2MultiCurve)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod2TerrainIntersection;
            lhsLod2TerrainIntersection = this.getLod2TerrainIntersection();
            MultiCurvePropertyType rhsLod2TerrainIntersection;
            rhsLod2TerrainIntersection = that.getLod2TerrainIntersection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2TerrainIntersection", lhsLod2TerrainIntersection), LocatorUtils.property(thatLocator, "lod2TerrainIntersection", rhsLod2TerrainIntersection), lhsLod2TerrainIntersection, rhsLod2TerrainIntersection)) {
                return false;
            }
        }
        {
            List<TunnelInstallationPropertyType> lhsOuterTunnelInstallation;
            lhsOuterTunnelInstallation = (this.isSetOuterTunnelInstallation()?this.getOuterTunnelInstallation():null);
            List<TunnelInstallationPropertyType> rhsOuterTunnelInstallation;
            rhsOuterTunnelInstallation = (that.isSetOuterTunnelInstallation()?that.getOuterTunnelInstallation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outerTunnelInstallation", lhsOuterTunnelInstallation), LocatorUtils.property(thatLocator, "outerTunnelInstallation", rhsOuterTunnelInstallation), lhsOuterTunnelInstallation, rhsOuterTunnelInstallation)) {
                return false;
            }
        }
        {
            List<IntTunnelInstallationPropertyType> lhsInteriorTunnelInstallation;
            lhsInteriorTunnelInstallation = (this.isSetInteriorTunnelInstallation()?this.getInteriorTunnelInstallation():null);
            List<IntTunnelInstallationPropertyType> rhsInteriorTunnelInstallation;
            rhsInteriorTunnelInstallation = (that.isSetInteriorTunnelInstallation()?that.getInteriorTunnelInstallation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interiorTunnelInstallation", lhsInteriorTunnelInstallation), LocatorUtils.property(thatLocator, "interiorTunnelInstallation", rhsInteriorTunnelInstallation), lhsInteriorTunnelInstallation, rhsInteriorTunnelInstallation)) {
                return false;
            }
        }
        {
            List<BoundarySurfacePropertyType> lhsCityObjectBoundedBy;
            lhsCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
            List<BoundarySurfacePropertyType> rhsCityObjectBoundedBy;
            rhsCityObjectBoundedBy = (that.isSetCityObjectBoundedBy()?that.getCityObjectBoundedBy():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cityObjectBoundedBy", lhsCityObjectBoundedBy), LocatorUtils.property(thatLocator, "cityObjectBoundedBy", rhsCityObjectBoundedBy), lhsCityObjectBoundedBy, rhsCityObjectBoundedBy)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod3Solid;
            lhsLod3Solid = this.getLod3Solid();
            SolidPropertyType rhsLod3Solid;
            rhsLod3Solid = that.getLod3Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3Solid", lhsLod3Solid), LocatorUtils.property(thatLocator, "lod3Solid", rhsLod3Solid), lhsLod3Solid, rhsLod3Solid)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod3MultiSurface;
            lhsLod3MultiSurface = this.getLod3MultiSurface();
            MultiSurfacePropertyType rhsLod3MultiSurface;
            rhsLod3MultiSurface = that.getLod3MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3MultiSurface", lhsLod3MultiSurface), LocatorUtils.property(thatLocator, "lod3MultiSurface", rhsLod3MultiSurface), lhsLod3MultiSurface, rhsLod3MultiSurface)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod3MultiCurve;
            lhsLod3MultiCurve = this.getLod3MultiCurve();
            MultiCurvePropertyType rhsLod3MultiCurve;
            rhsLod3MultiCurve = that.getLod3MultiCurve();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3MultiCurve", lhsLod3MultiCurve), LocatorUtils.property(thatLocator, "lod3MultiCurve", rhsLod3MultiCurve), lhsLod3MultiCurve, rhsLod3MultiCurve)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod3TerrainIntersection;
            lhsLod3TerrainIntersection = this.getLod3TerrainIntersection();
            MultiCurvePropertyType rhsLod3TerrainIntersection;
            rhsLod3TerrainIntersection = that.getLod3TerrainIntersection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3TerrainIntersection", lhsLod3TerrainIntersection), LocatorUtils.property(thatLocator, "lod3TerrainIntersection", rhsLod3TerrainIntersection), lhsLod3TerrainIntersection, rhsLod3TerrainIntersection)) {
                return false;
            }
        }
        {
            SolidPropertyType lhsLod4Solid;
            lhsLod4Solid = this.getLod4Solid();
            SolidPropertyType rhsLod4Solid;
            rhsLod4Solid = that.getLod4Solid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4Solid", lhsLod4Solid), LocatorUtils.property(thatLocator, "lod4Solid", rhsLod4Solid), lhsLod4Solid, rhsLod4Solid)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod4MultiSurface;
            lhsLod4MultiSurface = this.getLod4MultiSurface();
            MultiSurfacePropertyType rhsLod4MultiSurface;
            rhsLod4MultiSurface = that.getLod4MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4MultiSurface", lhsLod4MultiSurface), LocatorUtils.property(thatLocator, "lod4MultiSurface", rhsLod4MultiSurface), lhsLod4MultiSurface, rhsLod4MultiSurface)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod4MultiCurve;
            lhsLod4MultiCurve = this.getLod4MultiCurve();
            MultiCurvePropertyType rhsLod4MultiCurve;
            rhsLod4MultiCurve = that.getLod4MultiCurve();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4MultiCurve", lhsLod4MultiCurve), LocatorUtils.property(thatLocator, "lod4MultiCurve", rhsLod4MultiCurve), lhsLod4MultiCurve, rhsLod4MultiCurve)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsLod4TerrainIntersection;
            lhsLod4TerrainIntersection = this.getLod4TerrainIntersection();
            MultiCurvePropertyType rhsLod4TerrainIntersection;
            rhsLod4TerrainIntersection = that.getLod4TerrainIntersection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4TerrainIntersection", lhsLod4TerrainIntersection), LocatorUtils.property(thatLocator, "lod4TerrainIntersection", rhsLod4TerrainIntersection), lhsLod4TerrainIntersection, rhsLod4TerrainIntersection)) {
                return false;
            }
        }
        {
            List<InteriorHollowSpacePropertyType> lhsInteriorHollowSpace;
            lhsInteriorHollowSpace = (this.isSetInteriorHollowSpace()?this.getInteriorHollowSpace():null);
            List<InteriorHollowSpacePropertyType> rhsInteriorHollowSpace;
            rhsInteriorHollowSpace = (that.isSetInteriorHollowSpace()?that.getInteriorHollowSpace():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interiorHollowSpace", lhsInteriorHollowSpace), LocatorUtils.property(thatLocator, "interiorHollowSpace", rhsInteriorHollowSpace), lhsInteriorHollowSpace, rhsInteriorHollowSpace)) {
                return false;
            }
        }
        {
            List<TunnelPartPropertyType> lhsConsistsOfTunnelPart;
            lhsConsistsOfTunnelPart = (this.isSetConsistsOfTunnelPart()?this.getConsistsOfTunnelPart():null);
            List<TunnelPartPropertyType> rhsConsistsOfTunnelPart;
            rhsConsistsOfTunnelPart = (that.isSetConsistsOfTunnelPart()?that.getConsistsOfTunnelPart():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "consistsOfTunnelPart", lhsConsistsOfTunnelPart), LocatorUtils.property(thatLocator, "consistsOfTunnelPart", rhsConsistsOfTunnelPart), lhsConsistsOfTunnelPart, rhsConsistsOfTunnelPart)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfAbstractTunnel;
            lhsGenericApplicationPropertyOfAbstractTunnel = (this.isSetGenericApplicationPropertyOfAbstractTunnel()?this.getGenericApplicationPropertyOfAbstractTunnel():null);
            List<Object> rhsGenericApplicationPropertyOfAbstractTunnel;
            rhsGenericApplicationPropertyOfAbstractTunnel = (that.isSetGenericApplicationPropertyOfAbstractTunnel()?that.getGenericApplicationPropertyOfAbstractTunnel():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfAbstractTunnel", lhsGenericApplicationPropertyOfAbstractTunnel), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfAbstractTunnel", rhsGenericApplicationPropertyOfAbstractTunnel), lhsGenericApplicationPropertyOfAbstractTunnel, rhsGenericApplicationPropertyOfAbstractTunnel)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeType theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<CodeType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "function", theFunction), currentHashCode, theFunction);
        }
        {
            List<CodeType> theUsage;
            theUsage = (this.isSetUsage()?this.getUsage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usage", theUsage), currentHashCode, theUsage);
        }
        {
            XMLGregorianCalendar theYearOfConstruction;
            theYearOfConstruction = this.getYearOfConstruction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "yearOfConstruction", theYearOfConstruction), currentHashCode, theYearOfConstruction);
        }
        {
            XMLGregorianCalendar theYearOfDemolition;
            theYearOfDemolition = this.getYearOfDemolition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "yearOfDemolition", theYearOfDemolition), currentHashCode, theYearOfDemolition);
        }
        {
            SolidPropertyType theLod1Solid;
            theLod1Solid = this.getLod1Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1Solid", theLod1Solid), currentHashCode, theLod1Solid);
        }
        {
            MultiSurfacePropertyType theLod1MultiSurface;
            theLod1MultiSurface = this.getLod1MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1MultiSurface", theLod1MultiSurface), currentHashCode, theLod1MultiSurface);
        }
        {
            MultiCurvePropertyType theLod1TerrainIntersection;
            theLod1TerrainIntersection = this.getLod1TerrainIntersection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1TerrainIntersection", theLod1TerrainIntersection), currentHashCode, theLod1TerrainIntersection);
        }
        {
            SolidPropertyType theLod2Solid;
            theLod2Solid = this.getLod2Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2Solid", theLod2Solid), currentHashCode, theLod2Solid);
        }
        {
            MultiSurfacePropertyType theLod2MultiSurface;
            theLod2MultiSurface = this.getLod2MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2MultiSurface", theLod2MultiSurface), currentHashCode, theLod2MultiSurface);
        }
        {
            MultiCurvePropertyType theLod2MultiCurve;
            theLod2MultiCurve = this.getLod2MultiCurve();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2MultiCurve", theLod2MultiCurve), currentHashCode, theLod2MultiCurve);
        }
        {
            MultiCurvePropertyType theLod2TerrainIntersection;
            theLod2TerrainIntersection = this.getLod2TerrainIntersection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2TerrainIntersection", theLod2TerrainIntersection), currentHashCode, theLod2TerrainIntersection);
        }
        {
            List<TunnelInstallationPropertyType> theOuterTunnelInstallation;
            theOuterTunnelInstallation = (this.isSetOuterTunnelInstallation()?this.getOuterTunnelInstallation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outerTunnelInstallation", theOuterTunnelInstallation), currentHashCode, theOuterTunnelInstallation);
        }
        {
            List<IntTunnelInstallationPropertyType> theInteriorTunnelInstallation;
            theInteriorTunnelInstallation = (this.isSetInteriorTunnelInstallation()?this.getInteriorTunnelInstallation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interiorTunnelInstallation", theInteriorTunnelInstallation), currentHashCode, theInteriorTunnelInstallation);
        }
        {
            List<BoundarySurfacePropertyType> theCityObjectBoundedBy;
            theCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cityObjectBoundedBy", theCityObjectBoundedBy), currentHashCode, theCityObjectBoundedBy);
        }
        {
            SolidPropertyType theLod3Solid;
            theLod3Solid = this.getLod3Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3Solid", theLod3Solid), currentHashCode, theLod3Solid);
        }
        {
            MultiSurfacePropertyType theLod3MultiSurface;
            theLod3MultiSurface = this.getLod3MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3MultiSurface", theLod3MultiSurface), currentHashCode, theLod3MultiSurface);
        }
        {
            MultiCurvePropertyType theLod3MultiCurve;
            theLod3MultiCurve = this.getLod3MultiCurve();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3MultiCurve", theLod3MultiCurve), currentHashCode, theLod3MultiCurve);
        }
        {
            MultiCurvePropertyType theLod3TerrainIntersection;
            theLod3TerrainIntersection = this.getLod3TerrainIntersection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3TerrainIntersection", theLod3TerrainIntersection), currentHashCode, theLod3TerrainIntersection);
        }
        {
            SolidPropertyType theLod4Solid;
            theLod4Solid = this.getLod4Solid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4Solid", theLod4Solid), currentHashCode, theLod4Solid);
        }
        {
            MultiSurfacePropertyType theLod4MultiSurface;
            theLod4MultiSurface = this.getLod4MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4MultiSurface", theLod4MultiSurface), currentHashCode, theLod4MultiSurface);
        }
        {
            MultiCurvePropertyType theLod4MultiCurve;
            theLod4MultiCurve = this.getLod4MultiCurve();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4MultiCurve", theLod4MultiCurve), currentHashCode, theLod4MultiCurve);
        }
        {
            MultiCurvePropertyType theLod4TerrainIntersection;
            theLod4TerrainIntersection = this.getLod4TerrainIntersection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4TerrainIntersection", theLod4TerrainIntersection), currentHashCode, theLod4TerrainIntersection);
        }
        {
            List<InteriorHollowSpacePropertyType> theInteriorHollowSpace;
            theInteriorHollowSpace = (this.isSetInteriorHollowSpace()?this.getInteriorHollowSpace():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interiorHollowSpace", theInteriorHollowSpace), currentHashCode, theInteriorHollowSpace);
        }
        {
            List<TunnelPartPropertyType> theConsistsOfTunnelPart;
            theConsistsOfTunnelPart = (this.isSetConsistsOfTunnelPart()?this.getConsistsOfTunnelPart():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "consistsOfTunnelPart", theConsistsOfTunnelPart), currentHashCode, theConsistsOfTunnelPart);
        }
        {
            List<Object> theGenericApplicationPropertyOfAbstractTunnel;
            theGenericApplicationPropertyOfAbstractTunnel = (this.isSetGenericApplicationPropertyOfAbstractTunnel()?this.getGenericApplicationPropertyOfAbstractTunnel():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfAbstractTunnel", theGenericApplicationPropertyOfAbstractTunnel), currentHashCode, theGenericApplicationPropertyOfAbstractTunnel);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof AbstractTunnelType) {
            final AbstractTunnelType copy = ((AbstractTunnelType) draftCopy);
            if (this.isSetClazz()) {
                CodeType sourceClazz;
                sourceClazz = this.getClazz();
                CodeType copyClazz = ((CodeType) strategy.copy(LocatorUtils.property(locator, "clazz", sourceClazz), sourceClazz));
                copy.setClazz(copyClazz);
            } else {
                copy.clazz = null;
            }
            if (this.isSetFunction()) {
                List<CodeType> sourceFunction;
                sourceFunction = (this.isSetFunction()?this.getFunction():null);
                @SuppressWarnings("unchecked")
                List<CodeType> copyFunction = ((List<CodeType> ) strategy.copy(LocatorUtils.property(locator, "function", sourceFunction), sourceFunction));
                copy.unsetFunction();
                if (copyFunction!= null) {
                    List<CodeType> uniqueFunctionl = copy.getFunction();
                    uniqueFunctionl.addAll(copyFunction);
                }
            } else {
                copy.unsetFunction();
            }
            if (this.isSetUsage()) {
                List<CodeType> sourceUsage;
                sourceUsage = (this.isSetUsage()?this.getUsage():null);
                @SuppressWarnings("unchecked")
                List<CodeType> copyUsage = ((List<CodeType> ) strategy.copy(LocatorUtils.property(locator, "usage", sourceUsage), sourceUsage));
                copy.unsetUsage();
                if (copyUsage!= null) {
                    List<CodeType> uniqueUsagel = copy.getUsage();
                    uniqueUsagel.addAll(copyUsage);
                }
            } else {
                copy.unsetUsage();
            }
            if (this.isSetYearOfConstruction()) {
                XMLGregorianCalendar sourceYearOfConstruction;
                sourceYearOfConstruction = this.getYearOfConstruction();
                XMLGregorianCalendar copyYearOfConstruction = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "yearOfConstruction", sourceYearOfConstruction), sourceYearOfConstruction));
                copy.setYearOfConstruction(copyYearOfConstruction);
            } else {
                copy.yearOfConstruction = null;
            }
            if (this.isSetYearOfDemolition()) {
                XMLGregorianCalendar sourceYearOfDemolition;
                sourceYearOfDemolition = this.getYearOfDemolition();
                XMLGregorianCalendar copyYearOfDemolition = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "yearOfDemolition", sourceYearOfDemolition), sourceYearOfDemolition));
                copy.setYearOfDemolition(copyYearOfDemolition);
            } else {
                copy.yearOfDemolition = null;
            }
            if (this.isSetLod1Solid()) {
                SolidPropertyType sourceLod1Solid;
                sourceLod1Solid = this.getLod1Solid();
                SolidPropertyType copyLod1Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod1Solid", sourceLod1Solid), sourceLod1Solid));
                copy.setLod1Solid(copyLod1Solid);
            } else {
                copy.lod1Solid = null;
            }
            if (this.isSetLod1MultiSurface()) {
                MultiSurfacePropertyType sourceLod1MultiSurface;
                sourceLod1MultiSurface = this.getLod1MultiSurface();
                MultiSurfacePropertyType copyLod1MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod1MultiSurface", sourceLod1MultiSurface), sourceLod1MultiSurface));
                copy.setLod1MultiSurface(copyLod1MultiSurface);
            } else {
                copy.lod1MultiSurface = null;
            }
            if (this.isSetLod1TerrainIntersection()) {
                MultiCurvePropertyType sourceLod1TerrainIntersection;
                sourceLod1TerrainIntersection = this.getLod1TerrainIntersection();
                MultiCurvePropertyType copyLod1TerrainIntersection = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod1TerrainIntersection", sourceLod1TerrainIntersection), sourceLod1TerrainIntersection));
                copy.setLod1TerrainIntersection(copyLod1TerrainIntersection);
            } else {
                copy.lod1TerrainIntersection = null;
            }
            if (this.isSetLod2Solid()) {
                SolidPropertyType sourceLod2Solid;
                sourceLod2Solid = this.getLod2Solid();
                SolidPropertyType copyLod2Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod2Solid", sourceLod2Solid), sourceLod2Solid));
                copy.setLod2Solid(copyLod2Solid);
            } else {
                copy.lod2Solid = null;
            }
            if (this.isSetLod2MultiSurface()) {
                MultiSurfacePropertyType sourceLod2MultiSurface;
                sourceLod2MultiSurface = this.getLod2MultiSurface();
                MultiSurfacePropertyType copyLod2MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod2MultiSurface", sourceLod2MultiSurface), sourceLod2MultiSurface));
                copy.setLod2MultiSurface(copyLod2MultiSurface);
            } else {
                copy.lod2MultiSurface = null;
            }
            if (this.isSetLod2MultiCurve()) {
                MultiCurvePropertyType sourceLod2MultiCurve;
                sourceLod2MultiCurve = this.getLod2MultiCurve();
                MultiCurvePropertyType copyLod2MultiCurve = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod2MultiCurve", sourceLod2MultiCurve), sourceLod2MultiCurve));
                copy.setLod2MultiCurve(copyLod2MultiCurve);
            } else {
                copy.lod2MultiCurve = null;
            }
            if (this.isSetLod2TerrainIntersection()) {
                MultiCurvePropertyType sourceLod2TerrainIntersection;
                sourceLod2TerrainIntersection = this.getLod2TerrainIntersection();
                MultiCurvePropertyType copyLod2TerrainIntersection = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod2TerrainIntersection", sourceLod2TerrainIntersection), sourceLod2TerrainIntersection));
                copy.setLod2TerrainIntersection(copyLod2TerrainIntersection);
            } else {
                copy.lod2TerrainIntersection = null;
            }
            if (this.isSetOuterTunnelInstallation()) {
                List<TunnelInstallationPropertyType> sourceOuterTunnelInstallation;
                sourceOuterTunnelInstallation = (this.isSetOuterTunnelInstallation()?this.getOuterTunnelInstallation():null);
                @SuppressWarnings("unchecked")
                List<TunnelInstallationPropertyType> copyOuterTunnelInstallation = ((List<TunnelInstallationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "outerTunnelInstallation", sourceOuterTunnelInstallation), sourceOuterTunnelInstallation));
                copy.unsetOuterTunnelInstallation();
                if (copyOuterTunnelInstallation!= null) {
                    List<TunnelInstallationPropertyType> uniqueOuterTunnelInstallationl = copy.getOuterTunnelInstallation();
                    uniqueOuterTunnelInstallationl.addAll(copyOuterTunnelInstallation);
                }
            } else {
                copy.unsetOuterTunnelInstallation();
            }
            if (this.isSetInteriorTunnelInstallation()) {
                List<IntTunnelInstallationPropertyType> sourceInteriorTunnelInstallation;
                sourceInteriorTunnelInstallation = (this.isSetInteriorTunnelInstallation()?this.getInteriorTunnelInstallation():null);
                @SuppressWarnings("unchecked")
                List<IntTunnelInstallationPropertyType> copyInteriorTunnelInstallation = ((List<IntTunnelInstallationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "interiorTunnelInstallation", sourceInteriorTunnelInstallation), sourceInteriorTunnelInstallation));
                copy.unsetInteriorTunnelInstallation();
                if (copyInteriorTunnelInstallation!= null) {
                    List<IntTunnelInstallationPropertyType> uniqueInteriorTunnelInstallationl = copy.getInteriorTunnelInstallation();
                    uniqueInteriorTunnelInstallationl.addAll(copyInteriorTunnelInstallation);
                }
            } else {
                copy.unsetInteriorTunnelInstallation();
            }
            if (this.isSetCityObjectBoundedBy()) {
                List<BoundarySurfacePropertyType> sourceCityObjectBoundedBy;
                sourceCityObjectBoundedBy = (this.isSetCityObjectBoundedBy()?this.getCityObjectBoundedBy():null);
                @SuppressWarnings("unchecked")
                List<BoundarySurfacePropertyType> copyCityObjectBoundedBy = ((List<BoundarySurfacePropertyType> ) strategy.copy(LocatorUtils.property(locator, "cityObjectBoundedBy", sourceCityObjectBoundedBy), sourceCityObjectBoundedBy));
                copy.unsetCityObjectBoundedBy();
                if (copyCityObjectBoundedBy!= null) {
                    List<BoundarySurfacePropertyType> uniqueCityObjectBoundedByl = copy.getCityObjectBoundedBy();
                    uniqueCityObjectBoundedByl.addAll(copyCityObjectBoundedBy);
                }
            } else {
                copy.unsetCityObjectBoundedBy();
            }
            if (this.isSetLod3Solid()) {
                SolidPropertyType sourceLod3Solid;
                sourceLod3Solid = this.getLod3Solid();
                SolidPropertyType copyLod3Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod3Solid", sourceLod3Solid), sourceLod3Solid));
                copy.setLod3Solid(copyLod3Solid);
            } else {
                copy.lod3Solid = null;
            }
            if (this.isSetLod3MultiSurface()) {
                MultiSurfacePropertyType sourceLod3MultiSurface;
                sourceLod3MultiSurface = this.getLod3MultiSurface();
                MultiSurfacePropertyType copyLod3MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod3MultiSurface", sourceLod3MultiSurface), sourceLod3MultiSurface));
                copy.setLod3MultiSurface(copyLod3MultiSurface);
            } else {
                copy.lod3MultiSurface = null;
            }
            if (this.isSetLod3MultiCurve()) {
                MultiCurvePropertyType sourceLod3MultiCurve;
                sourceLod3MultiCurve = this.getLod3MultiCurve();
                MultiCurvePropertyType copyLod3MultiCurve = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod3MultiCurve", sourceLod3MultiCurve), sourceLod3MultiCurve));
                copy.setLod3MultiCurve(copyLod3MultiCurve);
            } else {
                copy.lod3MultiCurve = null;
            }
            if (this.isSetLod3TerrainIntersection()) {
                MultiCurvePropertyType sourceLod3TerrainIntersection;
                sourceLod3TerrainIntersection = this.getLod3TerrainIntersection();
                MultiCurvePropertyType copyLod3TerrainIntersection = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod3TerrainIntersection", sourceLod3TerrainIntersection), sourceLod3TerrainIntersection));
                copy.setLod3TerrainIntersection(copyLod3TerrainIntersection);
            } else {
                copy.lod3TerrainIntersection = null;
            }
            if (this.isSetLod4Solid()) {
                SolidPropertyType sourceLod4Solid;
                sourceLod4Solid = this.getLod4Solid();
                SolidPropertyType copyLod4Solid = ((SolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod4Solid", sourceLod4Solid), sourceLod4Solid));
                copy.setLod4Solid(copyLod4Solid);
            } else {
                copy.lod4Solid = null;
            }
            if (this.isSetLod4MultiSurface()) {
                MultiSurfacePropertyType sourceLod4MultiSurface;
                sourceLod4MultiSurface = this.getLod4MultiSurface();
                MultiSurfacePropertyType copyLod4MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod4MultiSurface", sourceLod4MultiSurface), sourceLod4MultiSurface));
                copy.setLod4MultiSurface(copyLod4MultiSurface);
            } else {
                copy.lod4MultiSurface = null;
            }
            if (this.isSetLod4MultiCurve()) {
                MultiCurvePropertyType sourceLod4MultiCurve;
                sourceLod4MultiCurve = this.getLod4MultiCurve();
                MultiCurvePropertyType copyLod4MultiCurve = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod4MultiCurve", sourceLod4MultiCurve), sourceLod4MultiCurve));
                copy.setLod4MultiCurve(copyLod4MultiCurve);
            } else {
                copy.lod4MultiCurve = null;
            }
            if (this.isSetLod4TerrainIntersection()) {
                MultiCurvePropertyType sourceLod4TerrainIntersection;
                sourceLod4TerrainIntersection = this.getLod4TerrainIntersection();
                MultiCurvePropertyType copyLod4TerrainIntersection = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "lod4TerrainIntersection", sourceLod4TerrainIntersection), sourceLod4TerrainIntersection));
                copy.setLod4TerrainIntersection(copyLod4TerrainIntersection);
            } else {
                copy.lod4TerrainIntersection = null;
            }
            if (this.isSetInteriorHollowSpace()) {
                List<InteriorHollowSpacePropertyType> sourceInteriorHollowSpace;
                sourceInteriorHollowSpace = (this.isSetInteriorHollowSpace()?this.getInteriorHollowSpace():null);
                @SuppressWarnings("unchecked")
                List<InteriorHollowSpacePropertyType> copyInteriorHollowSpace = ((List<InteriorHollowSpacePropertyType> ) strategy.copy(LocatorUtils.property(locator, "interiorHollowSpace", sourceInteriorHollowSpace), sourceInteriorHollowSpace));
                copy.unsetInteriorHollowSpace();
                if (copyInteriorHollowSpace!= null) {
                    List<InteriorHollowSpacePropertyType> uniqueInteriorHollowSpacel = copy.getInteriorHollowSpace();
                    uniqueInteriorHollowSpacel.addAll(copyInteriorHollowSpace);
                }
            } else {
                copy.unsetInteriorHollowSpace();
            }
            if (this.isSetConsistsOfTunnelPart()) {
                List<TunnelPartPropertyType> sourceConsistsOfTunnelPart;
                sourceConsistsOfTunnelPart = (this.isSetConsistsOfTunnelPart()?this.getConsistsOfTunnelPart():null);
                @SuppressWarnings("unchecked")
                List<TunnelPartPropertyType> copyConsistsOfTunnelPart = ((List<TunnelPartPropertyType> ) strategy.copy(LocatorUtils.property(locator, "consistsOfTunnelPart", sourceConsistsOfTunnelPart), sourceConsistsOfTunnelPart));
                copy.unsetConsistsOfTunnelPart();
                if (copyConsistsOfTunnelPart!= null) {
                    List<TunnelPartPropertyType> uniqueConsistsOfTunnelPartl = copy.getConsistsOfTunnelPart();
                    uniqueConsistsOfTunnelPartl.addAll(copyConsistsOfTunnelPart);
                }
            } else {
                copy.unsetConsistsOfTunnelPart();
            }
            if (this.isSetGenericApplicationPropertyOfAbstractTunnel()) {
                List<Object> sourceGenericApplicationPropertyOfAbstractTunnel;
                sourceGenericApplicationPropertyOfAbstractTunnel = (this.isSetGenericApplicationPropertyOfAbstractTunnel()?this.getGenericApplicationPropertyOfAbstractTunnel():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfAbstractTunnel = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfAbstractTunnel", sourceGenericApplicationPropertyOfAbstractTunnel), sourceGenericApplicationPropertyOfAbstractTunnel));
                copy.unsetGenericApplicationPropertyOfAbstractTunnel();
                if (copyGenericApplicationPropertyOfAbstractTunnel!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfAbstractTunnell = copy.getGenericApplicationPropertyOfAbstractTunnel();
                    uniqueGenericApplicationPropertyOfAbstractTunnell.addAll(copyGenericApplicationPropertyOfAbstractTunnel);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfAbstractTunnel();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AbstractTunnelType();
    }

}
