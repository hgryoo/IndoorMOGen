//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.tunnel.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.opengis.citygml.v_2_0.AbstractCityObjectType;
import net.opengis.citygml.v_2_0.ImplicitRepresentationPropertyType;
import net.opengis.gml.v_3_1_1.MultiSurfacePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 *  Type for openings (doors, windows) in boundary surfaces. Used in LOD3 and LOD4 only. As subclass of
 * 				_CityObject, an _Opening inherits all attributes and relations, in particular an id, names, external references, and
 * 				generalization relations. 
 * 
 * <p>Java class for AbstractOpeningType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractOpeningType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/2.0}AbstractCityObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lod3MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3ImplicitRepresentation" type="{http://www.opengis.net/citygml/2.0}ImplicitRepresentationPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4ImplicitRepresentation" type="{http://www.opengis.net/citygml/2.0}ImplicitRepresentationPropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/tunnel/2.0}_GenericApplicationPropertyOfOpening" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractOpeningType", propOrder = {
    "lod3MultiSurface",
    "lod4MultiSurface",
    "lod3ImplicitRepresentation",
    "lod4ImplicitRepresentation",
    "genericApplicationPropertyOfOpening"
})
@XmlSeeAlso({
    WindowType.class,
    DoorType.class
})
public abstract class AbstractOpeningType
    extends AbstractCityObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected MultiSurfacePropertyType lod3MultiSurface;
    protected MultiSurfacePropertyType lod4MultiSurface;
    protected ImplicitRepresentationPropertyType lod3ImplicitRepresentation;
    protected ImplicitRepresentationPropertyType lod4ImplicitRepresentation;
    @XmlElement(name = "_GenericApplicationPropertyOfOpening")
    protected List<Object> genericApplicationPropertyOfOpening;

    /**
     * Gets the value of the lod3MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod3MultiSurface() {
        return lod3MultiSurface;
    }

    /**
     * Sets the value of the lod3MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod3MultiSurface(MultiSurfacePropertyType value) {
        this.lod3MultiSurface = value;
    }

    public boolean isSetLod3MultiSurface() {
        return (this.lod3MultiSurface!= null);
    }

    /**
     * Gets the value of the lod4MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod4MultiSurface() {
        return lod4MultiSurface;
    }

    /**
     * Sets the value of the lod4MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod4MultiSurface(MultiSurfacePropertyType value) {
        this.lod4MultiSurface = value;
    }

    public boolean isSetLod4MultiSurface() {
        return (this.lod4MultiSurface!= null);
    }

    /**
     * Gets the value of the lod3ImplicitRepresentation property.
     * 
     * @return
     *     possible object is
     *     {@link ImplicitRepresentationPropertyType }
     *     
     */
    public ImplicitRepresentationPropertyType getLod3ImplicitRepresentation() {
        return lod3ImplicitRepresentation;
    }

    /**
     * Sets the value of the lod3ImplicitRepresentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImplicitRepresentationPropertyType }
     *     
     */
    public void setLod3ImplicitRepresentation(ImplicitRepresentationPropertyType value) {
        this.lod3ImplicitRepresentation = value;
    }

    public boolean isSetLod3ImplicitRepresentation() {
        return (this.lod3ImplicitRepresentation!= null);
    }

    /**
     * Gets the value of the lod4ImplicitRepresentation property.
     * 
     * @return
     *     possible object is
     *     {@link ImplicitRepresentationPropertyType }
     *     
     */
    public ImplicitRepresentationPropertyType getLod4ImplicitRepresentation() {
        return lod4ImplicitRepresentation;
    }

    /**
     * Sets the value of the lod4ImplicitRepresentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImplicitRepresentationPropertyType }
     *     
     */
    public void setLod4ImplicitRepresentation(ImplicitRepresentationPropertyType value) {
        this.lod4ImplicitRepresentation = value;
    }

    public boolean isSetLod4ImplicitRepresentation() {
        return (this.lod4ImplicitRepresentation!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfOpening property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfOpening property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfOpening().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfOpening() {
        if (genericApplicationPropertyOfOpening == null) {
            genericApplicationPropertyOfOpening = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfOpening;
    }

    public boolean isSetGenericApplicationPropertyOfOpening() {
        return ((this.genericApplicationPropertyOfOpening!= null)&&(!this.genericApplicationPropertyOfOpening.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfOpening() {
        this.genericApplicationPropertyOfOpening = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MultiSurfacePropertyType theLod3MultiSurface;
            theLod3MultiSurface = this.getLod3MultiSurface();
            strategy.appendField(locator, this, "lod3MultiSurface", buffer, theLod3MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod4MultiSurface;
            theLod4MultiSurface = this.getLod4MultiSurface();
            strategy.appendField(locator, this, "lod4MultiSurface", buffer, theLod4MultiSurface);
        }
        {
            ImplicitRepresentationPropertyType theLod3ImplicitRepresentation;
            theLod3ImplicitRepresentation = this.getLod3ImplicitRepresentation();
            strategy.appendField(locator, this, "lod3ImplicitRepresentation", buffer, theLod3ImplicitRepresentation);
        }
        {
            ImplicitRepresentationPropertyType theLod4ImplicitRepresentation;
            theLod4ImplicitRepresentation = this.getLod4ImplicitRepresentation();
            strategy.appendField(locator, this, "lod4ImplicitRepresentation", buffer, theLod4ImplicitRepresentation);
        }
        {
            List<Object> theGenericApplicationPropertyOfOpening;
            theGenericApplicationPropertyOfOpening = (this.isSetGenericApplicationPropertyOfOpening()?this.getGenericApplicationPropertyOfOpening():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfOpening", buffer, theGenericApplicationPropertyOfOpening);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractOpeningType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractOpeningType that = ((AbstractOpeningType) object);
        {
            MultiSurfacePropertyType lhsLod3MultiSurface;
            lhsLod3MultiSurface = this.getLod3MultiSurface();
            MultiSurfacePropertyType rhsLod3MultiSurface;
            rhsLod3MultiSurface = that.getLod3MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3MultiSurface", lhsLod3MultiSurface), LocatorUtils.property(thatLocator, "lod3MultiSurface", rhsLod3MultiSurface), lhsLod3MultiSurface, rhsLod3MultiSurface)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod4MultiSurface;
            lhsLod4MultiSurface = this.getLod4MultiSurface();
            MultiSurfacePropertyType rhsLod4MultiSurface;
            rhsLod4MultiSurface = that.getLod4MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4MultiSurface", lhsLod4MultiSurface), LocatorUtils.property(thatLocator, "lod4MultiSurface", rhsLod4MultiSurface), lhsLod4MultiSurface, rhsLod4MultiSurface)) {
                return false;
            }
        }
        {
            ImplicitRepresentationPropertyType lhsLod3ImplicitRepresentation;
            lhsLod3ImplicitRepresentation = this.getLod3ImplicitRepresentation();
            ImplicitRepresentationPropertyType rhsLod3ImplicitRepresentation;
            rhsLod3ImplicitRepresentation = that.getLod3ImplicitRepresentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3ImplicitRepresentation", lhsLod3ImplicitRepresentation), LocatorUtils.property(thatLocator, "lod3ImplicitRepresentation", rhsLod3ImplicitRepresentation), lhsLod3ImplicitRepresentation, rhsLod3ImplicitRepresentation)) {
                return false;
            }
        }
        {
            ImplicitRepresentationPropertyType lhsLod4ImplicitRepresentation;
            lhsLod4ImplicitRepresentation = this.getLod4ImplicitRepresentation();
            ImplicitRepresentationPropertyType rhsLod4ImplicitRepresentation;
            rhsLod4ImplicitRepresentation = that.getLod4ImplicitRepresentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4ImplicitRepresentation", lhsLod4ImplicitRepresentation), LocatorUtils.property(thatLocator, "lod4ImplicitRepresentation", rhsLod4ImplicitRepresentation), lhsLod4ImplicitRepresentation, rhsLod4ImplicitRepresentation)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfOpening;
            lhsGenericApplicationPropertyOfOpening = (this.isSetGenericApplicationPropertyOfOpening()?this.getGenericApplicationPropertyOfOpening():null);
            List<Object> rhsGenericApplicationPropertyOfOpening;
            rhsGenericApplicationPropertyOfOpening = (that.isSetGenericApplicationPropertyOfOpening()?that.getGenericApplicationPropertyOfOpening():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfOpening", lhsGenericApplicationPropertyOfOpening), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfOpening", rhsGenericApplicationPropertyOfOpening), lhsGenericApplicationPropertyOfOpening, rhsGenericApplicationPropertyOfOpening)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MultiSurfacePropertyType theLod3MultiSurface;
            theLod3MultiSurface = this.getLod3MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3MultiSurface", theLod3MultiSurface), currentHashCode, theLod3MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod4MultiSurface;
            theLod4MultiSurface = this.getLod4MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4MultiSurface", theLod4MultiSurface), currentHashCode, theLod4MultiSurface);
        }
        {
            ImplicitRepresentationPropertyType theLod3ImplicitRepresentation;
            theLod3ImplicitRepresentation = this.getLod3ImplicitRepresentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3ImplicitRepresentation", theLod3ImplicitRepresentation), currentHashCode, theLod3ImplicitRepresentation);
        }
        {
            ImplicitRepresentationPropertyType theLod4ImplicitRepresentation;
            theLod4ImplicitRepresentation = this.getLod4ImplicitRepresentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4ImplicitRepresentation", theLod4ImplicitRepresentation), currentHashCode, theLod4ImplicitRepresentation);
        }
        {
            List<Object> theGenericApplicationPropertyOfOpening;
            theGenericApplicationPropertyOfOpening = (this.isSetGenericApplicationPropertyOfOpening()?this.getGenericApplicationPropertyOfOpening():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfOpening", theGenericApplicationPropertyOfOpening), currentHashCode, theGenericApplicationPropertyOfOpening);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractOpeningType) {
            final AbstractOpeningType copy = ((AbstractOpeningType) target);
            if (this.isSetLod3MultiSurface()) {
                MultiSurfacePropertyType sourceLod3MultiSurface;
                sourceLod3MultiSurface = this.getLod3MultiSurface();
                MultiSurfacePropertyType copyLod3MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod3MultiSurface", sourceLod3MultiSurface), sourceLod3MultiSurface));
                copy.setLod3MultiSurface(copyLod3MultiSurface);
            } else {
                copy.lod3MultiSurface = null;
            }
            if (this.isSetLod4MultiSurface()) {
                MultiSurfacePropertyType sourceLod4MultiSurface;
                sourceLod4MultiSurface = this.getLod4MultiSurface();
                MultiSurfacePropertyType copyLod4MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod4MultiSurface", sourceLod4MultiSurface), sourceLod4MultiSurface));
                copy.setLod4MultiSurface(copyLod4MultiSurface);
            } else {
                copy.lod4MultiSurface = null;
            }
            if (this.isSetLod3ImplicitRepresentation()) {
                ImplicitRepresentationPropertyType sourceLod3ImplicitRepresentation;
                sourceLod3ImplicitRepresentation = this.getLod3ImplicitRepresentation();
                ImplicitRepresentationPropertyType copyLod3ImplicitRepresentation = ((ImplicitRepresentationPropertyType) strategy.copy(LocatorUtils.property(locator, "lod3ImplicitRepresentation", sourceLod3ImplicitRepresentation), sourceLod3ImplicitRepresentation));
                copy.setLod3ImplicitRepresentation(copyLod3ImplicitRepresentation);
            } else {
                copy.lod3ImplicitRepresentation = null;
            }
            if (this.isSetLod4ImplicitRepresentation()) {
                ImplicitRepresentationPropertyType sourceLod4ImplicitRepresentation;
                sourceLod4ImplicitRepresentation = this.getLod4ImplicitRepresentation();
                ImplicitRepresentationPropertyType copyLod4ImplicitRepresentation = ((ImplicitRepresentationPropertyType) strategy.copy(LocatorUtils.property(locator, "lod4ImplicitRepresentation", sourceLod4ImplicitRepresentation), sourceLod4ImplicitRepresentation));
                copy.setLod4ImplicitRepresentation(copyLod4ImplicitRepresentation);
            } else {
                copy.lod4ImplicitRepresentation = null;
            }
            if (this.isSetGenericApplicationPropertyOfOpening()) {
                List<Object> sourceGenericApplicationPropertyOfOpening;
                sourceGenericApplicationPropertyOfOpening = (this.isSetGenericApplicationPropertyOfOpening()?this.getGenericApplicationPropertyOfOpening():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfOpening = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfOpening", sourceGenericApplicationPropertyOfOpening), sourceGenericApplicationPropertyOfOpening));
                copy.unsetGenericApplicationPropertyOfOpening();
                if (copyGenericApplicationPropertyOfOpening!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfOpeningl = copy.getGenericApplicationPropertyOfOpening();
                    uniqueGenericApplicationPropertyOfOpeningl.addAll(copyGenericApplicationPropertyOfOpening);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfOpening();
            }
        }
        return target;
    }

}
