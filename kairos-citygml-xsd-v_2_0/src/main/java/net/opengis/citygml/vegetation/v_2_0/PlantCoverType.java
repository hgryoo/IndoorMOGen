//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.vegetation.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.CodeType;
import net.opengis.gml.v_3_1_1.LengthType;
import net.opengis.gml.v_3_1_1.MultiSolidPropertyType;
import net.opengis.gml.v_3_1_1.MultiSurfacePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing Plant Covers resp. Biotopes. As subclass of _CityObject, a VegetationObject inherits all
 * 				attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for PlantCoverType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PlantCoverType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/vegetation/2.0}AbstractVegetationObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="class" type="{http://www.opengis.net/gml}CodeType" minOccurs="0"/&gt;
 *         &lt;element name="function" type="{http://www.opengis.net/gml}CodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="usage" type="{http://www.opengis.net/gml}CodeType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="averageHeight" type="{http://www.opengis.net/gml}LengthType" minOccurs="0"/&gt;
 *         &lt;element name="lod1MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4MultiSurface" type="{http://www.opengis.net/gml}MultiSurfacePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod1MultiSolid" type="{http://www.opengis.net/gml}MultiSolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod2MultiSolid" type="{http://www.opengis.net/gml}MultiSolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod3MultiSolid" type="{http://www.opengis.net/gml}MultiSolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element name="lod4MultiSolid" type="{http://www.opengis.net/gml}MultiSolidPropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/vegetation/2.0}_GenericApplicationPropertyOfPlantCover" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PlantCoverType", propOrder = {
    "clazz",
    "function",
    "usage",
    "averageHeight",
    "lod1MultiSurface",
    "lod2MultiSurface",
    "lod3MultiSurface",
    "lod4MultiSurface",
    "lod1MultiSolid",
    "lod2MultiSolid",
    "lod3MultiSolid",
    "lod4MultiSolid",
    "genericApplicationPropertyOfPlantCover"
})
public class PlantCoverType
    extends AbstractVegetationObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(name = "class")
    protected CodeType clazz;
    protected List<CodeType> function;
    protected List<CodeType> usage;
    protected LengthType averageHeight;
    protected MultiSurfacePropertyType lod1MultiSurface;
    protected MultiSurfacePropertyType lod2MultiSurface;
    protected MultiSurfacePropertyType lod3MultiSurface;
    protected MultiSurfacePropertyType lod4MultiSurface;
    protected MultiSolidPropertyType lod1MultiSolid;
    protected MultiSolidPropertyType lod2MultiSolid;
    protected MultiSolidPropertyType lod3MultiSolid;
    protected MultiSolidPropertyType lod4MultiSolid;
    @XmlElement(name = "_GenericApplicationPropertyOfPlantCover")
    protected List<Object> genericApplicationPropertyOfPlantCover;

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link CodeType }
     *     
     */
    public CodeType getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeType }
     *     
     */
    public void setClazz(CodeType value) {
        this.clazz = value;
    }

    public boolean isSetClazz() {
        return (this.clazz!= null);
    }

    /**
     * Gets the value of the function property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the function property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFunction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeType }
     * 
     * 
     */
    public List<CodeType> getFunction() {
        if (function == null) {
            function = new ArrayList<CodeType>();
        }
        return this.function;
    }

    public boolean isSetFunction() {
        return ((this.function!= null)&&(!this.function.isEmpty()));
    }

    public void unsetFunction() {
        this.function = null;
    }

    /**
     * Gets the value of the usage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the usage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUsage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeType }
     * 
     * 
     */
    public List<CodeType> getUsage() {
        if (usage == null) {
            usage = new ArrayList<CodeType>();
        }
        return this.usage;
    }

    public boolean isSetUsage() {
        return ((this.usage!= null)&&(!this.usage.isEmpty()));
    }

    public void unsetUsage() {
        this.usage = null;
    }

    /**
     * Gets the value of the averageHeight property.
     * 
     * @return
     *     possible object is
     *     {@link LengthType }
     *     
     */
    public LengthType getAverageHeight() {
        return averageHeight;
    }

    /**
     * Sets the value of the averageHeight property.
     * 
     * @param value
     *     allowed object is
     *     {@link LengthType }
     *     
     */
    public void setAverageHeight(LengthType value) {
        this.averageHeight = value;
    }

    public boolean isSetAverageHeight() {
        return (this.averageHeight!= null);
    }

    /**
     * Gets the value of the lod1MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod1MultiSurface() {
        return lod1MultiSurface;
    }

    /**
     * Sets the value of the lod1MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod1MultiSurface(MultiSurfacePropertyType value) {
        this.lod1MultiSurface = value;
    }

    public boolean isSetLod1MultiSurface() {
        return (this.lod1MultiSurface!= null);
    }

    /**
     * Gets the value of the lod2MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod2MultiSurface() {
        return lod2MultiSurface;
    }

    /**
     * Sets the value of the lod2MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod2MultiSurface(MultiSurfacePropertyType value) {
        this.lod2MultiSurface = value;
    }

    public boolean isSetLod2MultiSurface() {
        return (this.lod2MultiSurface!= null);
    }

    /**
     * Gets the value of the lod3MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod3MultiSurface() {
        return lod3MultiSurface;
    }

    /**
     * Sets the value of the lod3MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod3MultiSurface(MultiSurfacePropertyType value) {
        this.lod3MultiSurface = value;
    }

    public boolean isSetLod3MultiSurface() {
        return (this.lod3MultiSurface!= null);
    }

    /**
     * Gets the value of the lod4MultiSurface property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public MultiSurfacePropertyType getLod4MultiSurface() {
        return lod4MultiSurface;
    }

    /**
     * Sets the value of the lod4MultiSurface property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSurfacePropertyType }
     *     
     */
    public void setLod4MultiSurface(MultiSurfacePropertyType value) {
        this.lod4MultiSurface = value;
    }

    public boolean isSetLod4MultiSurface() {
        return (this.lod4MultiSurface!= null);
    }

    /**
     * Gets the value of the lod1MultiSolid property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public MultiSolidPropertyType getLod1MultiSolid() {
        return lod1MultiSolid;
    }

    /**
     * Sets the value of the lod1MultiSolid property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public void setLod1MultiSolid(MultiSolidPropertyType value) {
        this.lod1MultiSolid = value;
    }

    public boolean isSetLod1MultiSolid() {
        return (this.lod1MultiSolid!= null);
    }

    /**
     * Gets the value of the lod2MultiSolid property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public MultiSolidPropertyType getLod2MultiSolid() {
        return lod2MultiSolid;
    }

    /**
     * Sets the value of the lod2MultiSolid property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public void setLod2MultiSolid(MultiSolidPropertyType value) {
        this.lod2MultiSolid = value;
    }

    public boolean isSetLod2MultiSolid() {
        return (this.lod2MultiSolid!= null);
    }

    /**
     * Gets the value of the lod3MultiSolid property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public MultiSolidPropertyType getLod3MultiSolid() {
        return lod3MultiSolid;
    }

    /**
     * Sets the value of the lod3MultiSolid property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public void setLod3MultiSolid(MultiSolidPropertyType value) {
        this.lod3MultiSolid = value;
    }

    public boolean isSetLod3MultiSolid() {
        return (this.lod3MultiSolid!= null);
    }

    /**
     * Gets the value of the lod4MultiSolid property.
     * 
     * @return
     *     possible object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public MultiSolidPropertyType getLod4MultiSolid() {
        return lod4MultiSolid;
    }

    /**
     * Sets the value of the lod4MultiSolid property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiSolidPropertyType }
     *     
     */
    public void setLod4MultiSolid(MultiSolidPropertyType value) {
        this.lod4MultiSolid = value;
    }

    public boolean isSetLod4MultiSolid() {
        return (this.lod4MultiSolid!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfPlantCover property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfPlantCover property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfPlantCover().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfPlantCover() {
        if (genericApplicationPropertyOfPlantCover == null) {
            genericApplicationPropertyOfPlantCover = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfPlantCover;
    }

    public boolean isSetGenericApplicationPropertyOfPlantCover() {
        return ((this.genericApplicationPropertyOfPlantCover!= null)&&(!this.genericApplicationPropertyOfPlantCover.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfPlantCover() {
        this.genericApplicationPropertyOfPlantCover = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CodeType theClazz;
            theClazz = this.getClazz();
            strategy.appendField(locator, this, "clazz", buffer, theClazz);
        }
        {
            List<CodeType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            strategy.appendField(locator, this, "function", buffer, theFunction);
        }
        {
            List<CodeType> theUsage;
            theUsage = (this.isSetUsage()?this.getUsage():null);
            strategy.appendField(locator, this, "usage", buffer, theUsage);
        }
        {
            LengthType theAverageHeight;
            theAverageHeight = this.getAverageHeight();
            strategy.appendField(locator, this, "averageHeight", buffer, theAverageHeight);
        }
        {
            MultiSurfacePropertyType theLod1MultiSurface;
            theLod1MultiSurface = this.getLod1MultiSurface();
            strategy.appendField(locator, this, "lod1MultiSurface", buffer, theLod1MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod2MultiSurface;
            theLod2MultiSurface = this.getLod2MultiSurface();
            strategy.appendField(locator, this, "lod2MultiSurface", buffer, theLod2MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod3MultiSurface;
            theLod3MultiSurface = this.getLod3MultiSurface();
            strategy.appendField(locator, this, "lod3MultiSurface", buffer, theLod3MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod4MultiSurface;
            theLod4MultiSurface = this.getLod4MultiSurface();
            strategy.appendField(locator, this, "lod4MultiSurface", buffer, theLod4MultiSurface);
        }
        {
            MultiSolidPropertyType theLod1MultiSolid;
            theLod1MultiSolid = this.getLod1MultiSolid();
            strategy.appendField(locator, this, "lod1MultiSolid", buffer, theLod1MultiSolid);
        }
        {
            MultiSolidPropertyType theLod2MultiSolid;
            theLod2MultiSolid = this.getLod2MultiSolid();
            strategy.appendField(locator, this, "lod2MultiSolid", buffer, theLod2MultiSolid);
        }
        {
            MultiSolidPropertyType theLod3MultiSolid;
            theLod3MultiSolid = this.getLod3MultiSolid();
            strategy.appendField(locator, this, "lod3MultiSolid", buffer, theLod3MultiSolid);
        }
        {
            MultiSolidPropertyType theLod4MultiSolid;
            theLod4MultiSolid = this.getLod4MultiSolid();
            strategy.appendField(locator, this, "lod4MultiSolid", buffer, theLod4MultiSolid);
        }
        {
            List<Object> theGenericApplicationPropertyOfPlantCover;
            theGenericApplicationPropertyOfPlantCover = (this.isSetGenericApplicationPropertyOfPlantCover()?this.getGenericApplicationPropertyOfPlantCover():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfPlantCover", buffer, theGenericApplicationPropertyOfPlantCover);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PlantCoverType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PlantCoverType that = ((PlantCoverType) object);
        {
            CodeType lhsClazz;
            lhsClazz = this.getClazz();
            CodeType rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<CodeType> lhsFunction;
            lhsFunction = (this.isSetFunction()?this.getFunction():null);
            List<CodeType> rhsFunction;
            rhsFunction = (that.isSetFunction()?that.getFunction():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "function", lhsFunction), LocatorUtils.property(thatLocator, "function", rhsFunction), lhsFunction, rhsFunction)) {
                return false;
            }
        }
        {
            List<CodeType> lhsUsage;
            lhsUsage = (this.isSetUsage()?this.getUsage():null);
            List<CodeType> rhsUsage;
            rhsUsage = (that.isSetUsage()?that.getUsage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usage", lhsUsage), LocatorUtils.property(thatLocator, "usage", rhsUsage), lhsUsage, rhsUsage)) {
                return false;
            }
        }
        {
            LengthType lhsAverageHeight;
            lhsAverageHeight = this.getAverageHeight();
            LengthType rhsAverageHeight;
            rhsAverageHeight = that.getAverageHeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "averageHeight", lhsAverageHeight), LocatorUtils.property(thatLocator, "averageHeight", rhsAverageHeight), lhsAverageHeight, rhsAverageHeight)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod1MultiSurface;
            lhsLod1MultiSurface = this.getLod1MultiSurface();
            MultiSurfacePropertyType rhsLod1MultiSurface;
            rhsLod1MultiSurface = that.getLod1MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1MultiSurface", lhsLod1MultiSurface), LocatorUtils.property(thatLocator, "lod1MultiSurface", rhsLod1MultiSurface), lhsLod1MultiSurface, rhsLod1MultiSurface)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod2MultiSurface;
            lhsLod2MultiSurface = this.getLod2MultiSurface();
            MultiSurfacePropertyType rhsLod2MultiSurface;
            rhsLod2MultiSurface = that.getLod2MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2MultiSurface", lhsLod2MultiSurface), LocatorUtils.property(thatLocator, "lod2MultiSurface", rhsLod2MultiSurface), lhsLod2MultiSurface, rhsLod2MultiSurface)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod3MultiSurface;
            lhsLod3MultiSurface = this.getLod3MultiSurface();
            MultiSurfacePropertyType rhsLod3MultiSurface;
            rhsLod3MultiSurface = that.getLod3MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3MultiSurface", lhsLod3MultiSurface), LocatorUtils.property(thatLocator, "lod3MultiSurface", rhsLod3MultiSurface), lhsLod3MultiSurface, rhsLod3MultiSurface)) {
                return false;
            }
        }
        {
            MultiSurfacePropertyType lhsLod4MultiSurface;
            lhsLod4MultiSurface = this.getLod4MultiSurface();
            MultiSurfacePropertyType rhsLod4MultiSurface;
            rhsLod4MultiSurface = that.getLod4MultiSurface();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4MultiSurface", lhsLod4MultiSurface), LocatorUtils.property(thatLocator, "lod4MultiSurface", rhsLod4MultiSurface), lhsLod4MultiSurface, rhsLod4MultiSurface)) {
                return false;
            }
        }
        {
            MultiSolidPropertyType lhsLod1MultiSolid;
            lhsLod1MultiSolid = this.getLod1MultiSolid();
            MultiSolidPropertyType rhsLod1MultiSolid;
            rhsLod1MultiSolid = that.getLod1MultiSolid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod1MultiSolid", lhsLod1MultiSolid), LocatorUtils.property(thatLocator, "lod1MultiSolid", rhsLod1MultiSolid), lhsLod1MultiSolid, rhsLod1MultiSolid)) {
                return false;
            }
        }
        {
            MultiSolidPropertyType lhsLod2MultiSolid;
            lhsLod2MultiSolid = this.getLod2MultiSolid();
            MultiSolidPropertyType rhsLod2MultiSolid;
            rhsLod2MultiSolid = that.getLod2MultiSolid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod2MultiSolid", lhsLod2MultiSolid), LocatorUtils.property(thatLocator, "lod2MultiSolid", rhsLod2MultiSolid), lhsLod2MultiSolid, rhsLod2MultiSolid)) {
                return false;
            }
        }
        {
            MultiSolidPropertyType lhsLod3MultiSolid;
            lhsLod3MultiSolid = this.getLod3MultiSolid();
            MultiSolidPropertyType rhsLod3MultiSolid;
            rhsLod3MultiSolid = that.getLod3MultiSolid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod3MultiSolid", lhsLod3MultiSolid), LocatorUtils.property(thatLocator, "lod3MultiSolid", rhsLod3MultiSolid), lhsLod3MultiSolid, rhsLod3MultiSolid)) {
                return false;
            }
        }
        {
            MultiSolidPropertyType lhsLod4MultiSolid;
            lhsLod4MultiSolid = this.getLod4MultiSolid();
            MultiSolidPropertyType rhsLod4MultiSolid;
            rhsLod4MultiSolid = that.getLod4MultiSolid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod4MultiSolid", lhsLod4MultiSolid), LocatorUtils.property(thatLocator, "lod4MultiSolid", rhsLod4MultiSolid), lhsLod4MultiSolid, rhsLod4MultiSolid)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfPlantCover;
            lhsGenericApplicationPropertyOfPlantCover = (this.isSetGenericApplicationPropertyOfPlantCover()?this.getGenericApplicationPropertyOfPlantCover():null);
            List<Object> rhsGenericApplicationPropertyOfPlantCover;
            rhsGenericApplicationPropertyOfPlantCover = (that.isSetGenericApplicationPropertyOfPlantCover()?that.getGenericApplicationPropertyOfPlantCover():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfPlantCover", lhsGenericApplicationPropertyOfPlantCover), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfPlantCover", rhsGenericApplicationPropertyOfPlantCover), lhsGenericApplicationPropertyOfPlantCover, rhsGenericApplicationPropertyOfPlantCover)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeType theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<CodeType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "function", theFunction), currentHashCode, theFunction);
        }
        {
            List<CodeType> theUsage;
            theUsage = (this.isSetUsage()?this.getUsage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usage", theUsage), currentHashCode, theUsage);
        }
        {
            LengthType theAverageHeight;
            theAverageHeight = this.getAverageHeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "averageHeight", theAverageHeight), currentHashCode, theAverageHeight);
        }
        {
            MultiSurfacePropertyType theLod1MultiSurface;
            theLod1MultiSurface = this.getLod1MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1MultiSurface", theLod1MultiSurface), currentHashCode, theLod1MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod2MultiSurface;
            theLod2MultiSurface = this.getLod2MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2MultiSurface", theLod2MultiSurface), currentHashCode, theLod2MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod3MultiSurface;
            theLod3MultiSurface = this.getLod3MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3MultiSurface", theLod3MultiSurface), currentHashCode, theLod3MultiSurface);
        }
        {
            MultiSurfacePropertyType theLod4MultiSurface;
            theLod4MultiSurface = this.getLod4MultiSurface();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4MultiSurface", theLod4MultiSurface), currentHashCode, theLod4MultiSurface);
        }
        {
            MultiSolidPropertyType theLod1MultiSolid;
            theLod1MultiSolid = this.getLod1MultiSolid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod1MultiSolid", theLod1MultiSolid), currentHashCode, theLod1MultiSolid);
        }
        {
            MultiSolidPropertyType theLod2MultiSolid;
            theLod2MultiSolid = this.getLod2MultiSolid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod2MultiSolid", theLod2MultiSolid), currentHashCode, theLod2MultiSolid);
        }
        {
            MultiSolidPropertyType theLod3MultiSolid;
            theLod3MultiSolid = this.getLod3MultiSolid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod3MultiSolid", theLod3MultiSolid), currentHashCode, theLod3MultiSolid);
        }
        {
            MultiSolidPropertyType theLod4MultiSolid;
            theLod4MultiSolid = this.getLod4MultiSolid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod4MultiSolid", theLod4MultiSolid), currentHashCode, theLod4MultiSolid);
        }
        {
            List<Object> theGenericApplicationPropertyOfPlantCover;
            theGenericApplicationPropertyOfPlantCover = (this.isSetGenericApplicationPropertyOfPlantCover()?this.getGenericApplicationPropertyOfPlantCover():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfPlantCover", theGenericApplicationPropertyOfPlantCover), currentHashCode, theGenericApplicationPropertyOfPlantCover);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof PlantCoverType) {
            final PlantCoverType copy = ((PlantCoverType) draftCopy);
            if (this.isSetClazz()) {
                CodeType sourceClazz;
                sourceClazz = this.getClazz();
                CodeType copyClazz = ((CodeType) strategy.copy(LocatorUtils.property(locator, "clazz", sourceClazz), sourceClazz));
                copy.setClazz(copyClazz);
            } else {
                copy.clazz = null;
            }
            if (this.isSetFunction()) {
                List<CodeType> sourceFunction;
                sourceFunction = (this.isSetFunction()?this.getFunction():null);
                @SuppressWarnings("unchecked")
                List<CodeType> copyFunction = ((List<CodeType> ) strategy.copy(LocatorUtils.property(locator, "function", sourceFunction), sourceFunction));
                copy.unsetFunction();
                if (copyFunction!= null) {
                    List<CodeType> uniqueFunctionl = copy.getFunction();
                    uniqueFunctionl.addAll(copyFunction);
                }
            } else {
                copy.unsetFunction();
            }
            if (this.isSetUsage()) {
                List<CodeType> sourceUsage;
                sourceUsage = (this.isSetUsage()?this.getUsage():null);
                @SuppressWarnings("unchecked")
                List<CodeType> copyUsage = ((List<CodeType> ) strategy.copy(LocatorUtils.property(locator, "usage", sourceUsage), sourceUsage));
                copy.unsetUsage();
                if (copyUsage!= null) {
                    List<CodeType> uniqueUsagel = copy.getUsage();
                    uniqueUsagel.addAll(copyUsage);
                }
            } else {
                copy.unsetUsage();
            }
            if (this.isSetAverageHeight()) {
                LengthType sourceAverageHeight;
                sourceAverageHeight = this.getAverageHeight();
                LengthType copyAverageHeight = ((LengthType) strategy.copy(LocatorUtils.property(locator, "averageHeight", sourceAverageHeight), sourceAverageHeight));
                copy.setAverageHeight(copyAverageHeight);
            } else {
                copy.averageHeight = null;
            }
            if (this.isSetLod1MultiSurface()) {
                MultiSurfacePropertyType sourceLod1MultiSurface;
                sourceLod1MultiSurface = this.getLod1MultiSurface();
                MultiSurfacePropertyType copyLod1MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod1MultiSurface", sourceLod1MultiSurface), sourceLod1MultiSurface));
                copy.setLod1MultiSurface(copyLod1MultiSurface);
            } else {
                copy.lod1MultiSurface = null;
            }
            if (this.isSetLod2MultiSurface()) {
                MultiSurfacePropertyType sourceLod2MultiSurface;
                sourceLod2MultiSurface = this.getLod2MultiSurface();
                MultiSurfacePropertyType copyLod2MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod2MultiSurface", sourceLod2MultiSurface), sourceLod2MultiSurface));
                copy.setLod2MultiSurface(copyLod2MultiSurface);
            } else {
                copy.lod2MultiSurface = null;
            }
            if (this.isSetLod3MultiSurface()) {
                MultiSurfacePropertyType sourceLod3MultiSurface;
                sourceLod3MultiSurface = this.getLod3MultiSurface();
                MultiSurfacePropertyType copyLod3MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod3MultiSurface", sourceLod3MultiSurface), sourceLod3MultiSurface));
                copy.setLod3MultiSurface(copyLod3MultiSurface);
            } else {
                copy.lod3MultiSurface = null;
            }
            if (this.isSetLod4MultiSurface()) {
                MultiSurfacePropertyType sourceLod4MultiSurface;
                sourceLod4MultiSurface = this.getLod4MultiSurface();
                MultiSurfacePropertyType copyLod4MultiSurface = ((MultiSurfacePropertyType) strategy.copy(LocatorUtils.property(locator, "lod4MultiSurface", sourceLod4MultiSurface), sourceLod4MultiSurface));
                copy.setLod4MultiSurface(copyLod4MultiSurface);
            } else {
                copy.lod4MultiSurface = null;
            }
            if (this.isSetLod1MultiSolid()) {
                MultiSolidPropertyType sourceLod1MultiSolid;
                sourceLod1MultiSolid = this.getLod1MultiSolid();
                MultiSolidPropertyType copyLod1MultiSolid = ((MultiSolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod1MultiSolid", sourceLod1MultiSolid), sourceLod1MultiSolid));
                copy.setLod1MultiSolid(copyLod1MultiSolid);
            } else {
                copy.lod1MultiSolid = null;
            }
            if (this.isSetLod2MultiSolid()) {
                MultiSolidPropertyType sourceLod2MultiSolid;
                sourceLod2MultiSolid = this.getLod2MultiSolid();
                MultiSolidPropertyType copyLod2MultiSolid = ((MultiSolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod2MultiSolid", sourceLod2MultiSolid), sourceLod2MultiSolid));
                copy.setLod2MultiSolid(copyLod2MultiSolid);
            } else {
                copy.lod2MultiSolid = null;
            }
            if (this.isSetLod3MultiSolid()) {
                MultiSolidPropertyType sourceLod3MultiSolid;
                sourceLod3MultiSolid = this.getLod3MultiSolid();
                MultiSolidPropertyType copyLod3MultiSolid = ((MultiSolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod3MultiSolid", sourceLod3MultiSolid), sourceLod3MultiSolid));
                copy.setLod3MultiSolid(copyLod3MultiSolid);
            } else {
                copy.lod3MultiSolid = null;
            }
            if (this.isSetLod4MultiSolid()) {
                MultiSolidPropertyType sourceLod4MultiSolid;
                sourceLod4MultiSolid = this.getLod4MultiSolid();
                MultiSolidPropertyType copyLod4MultiSolid = ((MultiSolidPropertyType) strategy.copy(LocatorUtils.property(locator, "lod4MultiSolid", sourceLod4MultiSolid), sourceLod4MultiSolid));
                copy.setLod4MultiSolid(copyLod4MultiSolid);
            } else {
                copy.lod4MultiSolid = null;
            }
            if (this.isSetGenericApplicationPropertyOfPlantCover()) {
                List<Object> sourceGenericApplicationPropertyOfPlantCover;
                sourceGenericApplicationPropertyOfPlantCover = (this.isSetGenericApplicationPropertyOfPlantCover()?this.getGenericApplicationPropertyOfPlantCover():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfPlantCover = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfPlantCover", sourceGenericApplicationPropertyOfPlantCover), sourceGenericApplicationPropertyOfPlantCover));
                copy.unsetGenericApplicationPropertyOfPlantCover();
                if (copyGenericApplicationPropertyOfPlantCover!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfPlantCoverl = copy.getGenericApplicationPropertyOfPlantCover();
                    uniqueGenericApplicationPropertyOfPlantCoverl.addAll(copyGenericApplicationPropertyOfPlantCover);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfPlantCover();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PlantCoverType();
    }

}
