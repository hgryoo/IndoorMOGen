//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.texturedsurface.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Deprecated since CityGML version 0.4.0. Use the concepts of the CityGML Appearance module instead. Adopted
 * 				from X3D standard (http://www.web3d.org/x3d/) 
 * 
 * <p>Java class for MaterialType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MaterialType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/texturedsurface/2.0}AbstractAppearanceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="shininess" type="{http://www.opengis.net/citygml/2.0}doubleBetween0and1" minOccurs="0"/&gt;
 *         &lt;element name="transparency" type="{http://www.opengis.net/citygml/2.0}doubleBetween0and1" minOccurs="0"/&gt;
 *         &lt;element name="ambientIntensity" type="{http://www.opengis.net/citygml/2.0}doubleBetween0and1" minOccurs="0"/&gt;
 *         &lt;element name="specularColor" type="{http://www.opengis.net/citygml/texturedsurface/2.0}Color" minOccurs="0"/&gt;
 *         &lt;element name="diffuseColor" type="{http://www.opengis.net/citygml/texturedsurface/2.0}Color" minOccurs="0"/&gt;
 *         &lt;element name="emissiveColor" type="{http://www.opengis.net/citygml/texturedsurface/2.0}Color" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MaterialType", propOrder = {
    "shininess",
    "transparency",
    "ambientIntensity",
    "specularColor",
    "diffuseColor",
    "emissiveColor"
})
public class MaterialType
    extends AbstractAppearanceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected Double shininess;
    protected Double transparency;
    protected Double ambientIntensity;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> specularColor;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> diffuseColor;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> emissiveColor;

    /**
     * Gets the value of the shininess property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getShininess() {
        return shininess;
    }

    /**
     * Sets the value of the shininess property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setShininess(Double value) {
        this.shininess = value;
    }

    public boolean isSetShininess() {
        return (this.shininess!= null);
    }

    /**
     * Gets the value of the transparency property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getTransparency() {
        return transparency;
    }

    /**
     * Sets the value of the transparency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setTransparency(Double value) {
        this.transparency = value;
    }

    public boolean isSetTransparency() {
        return (this.transparency!= null);
    }

    /**
     * Gets the value of the ambientIntensity property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public Double getAmbientIntensity() {
        return ambientIntensity;
    }

    /**
     * Sets the value of the ambientIntensity property.
     * 
     * @param value
     *     allowed object is
     *     {@link Double }
     *     
     */
    public void setAmbientIntensity(Double value) {
        this.ambientIntensity = value;
    }

    public boolean isSetAmbientIntensity() {
        return (this.ambientIntensity!= null);
    }

    /**
     * Gets the value of the specularColor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specularColor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecularColor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getSpecularColor() {
        if (specularColor == null) {
            specularColor = new ArrayList<Double>();
        }
        return this.specularColor;
    }

    public boolean isSetSpecularColor() {
        return ((this.specularColor!= null)&&(!this.specularColor.isEmpty()));
    }

    public void unsetSpecularColor() {
        this.specularColor = null;
    }

    /**
     * Gets the value of the diffuseColor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the diffuseColor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDiffuseColor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getDiffuseColor() {
        if (diffuseColor == null) {
            diffuseColor = new ArrayList<Double>();
        }
        return this.diffuseColor;
    }

    public boolean isSetDiffuseColor() {
        return ((this.diffuseColor!= null)&&(!this.diffuseColor.isEmpty()));
    }

    public void unsetDiffuseColor() {
        this.diffuseColor = null;
    }

    /**
     * Gets the value of the emissiveColor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the emissiveColor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEmissiveColor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getEmissiveColor() {
        if (emissiveColor == null) {
            emissiveColor = new ArrayList<Double>();
        }
        return this.emissiveColor;
    }

    public boolean isSetEmissiveColor() {
        return ((this.emissiveColor!= null)&&(!this.emissiveColor.isEmpty()));
    }

    public void unsetEmissiveColor() {
        this.emissiveColor = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Double theShininess;
            theShininess = this.getShininess();
            strategy.appendField(locator, this, "shininess", buffer, theShininess);
        }
        {
            Double theTransparency;
            theTransparency = this.getTransparency();
            strategy.appendField(locator, this, "transparency", buffer, theTransparency);
        }
        {
            Double theAmbientIntensity;
            theAmbientIntensity = this.getAmbientIntensity();
            strategy.appendField(locator, this, "ambientIntensity", buffer, theAmbientIntensity);
        }
        {
            List<Double> theSpecularColor;
            theSpecularColor = (this.isSetSpecularColor()?this.getSpecularColor():null);
            strategy.appendField(locator, this, "specularColor", buffer, theSpecularColor);
        }
        {
            List<Double> theDiffuseColor;
            theDiffuseColor = (this.isSetDiffuseColor()?this.getDiffuseColor():null);
            strategy.appendField(locator, this, "diffuseColor", buffer, theDiffuseColor);
        }
        {
            List<Double> theEmissiveColor;
            theEmissiveColor = (this.isSetEmissiveColor()?this.getEmissiveColor():null);
            strategy.appendField(locator, this, "emissiveColor", buffer, theEmissiveColor);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MaterialType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MaterialType that = ((MaterialType) object);
        {
            Double lhsShininess;
            lhsShininess = this.getShininess();
            Double rhsShininess;
            rhsShininess = that.getShininess();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shininess", lhsShininess), LocatorUtils.property(thatLocator, "shininess", rhsShininess), lhsShininess, rhsShininess)) {
                return false;
            }
        }
        {
            Double lhsTransparency;
            lhsTransparency = this.getTransparency();
            Double rhsTransparency;
            rhsTransparency = that.getTransparency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transparency", lhsTransparency), LocatorUtils.property(thatLocator, "transparency", rhsTransparency), lhsTransparency, rhsTransparency)) {
                return false;
            }
        }
        {
            Double lhsAmbientIntensity;
            lhsAmbientIntensity = this.getAmbientIntensity();
            Double rhsAmbientIntensity;
            rhsAmbientIntensity = that.getAmbientIntensity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ambientIntensity", lhsAmbientIntensity), LocatorUtils.property(thatLocator, "ambientIntensity", rhsAmbientIntensity), lhsAmbientIntensity, rhsAmbientIntensity)) {
                return false;
            }
        }
        {
            List<Double> lhsSpecularColor;
            lhsSpecularColor = (this.isSetSpecularColor()?this.getSpecularColor():null);
            List<Double> rhsSpecularColor;
            rhsSpecularColor = (that.isSetSpecularColor()?that.getSpecularColor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specularColor", lhsSpecularColor), LocatorUtils.property(thatLocator, "specularColor", rhsSpecularColor), lhsSpecularColor, rhsSpecularColor)) {
                return false;
            }
        }
        {
            List<Double> lhsDiffuseColor;
            lhsDiffuseColor = (this.isSetDiffuseColor()?this.getDiffuseColor():null);
            List<Double> rhsDiffuseColor;
            rhsDiffuseColor = (that.isSetDiffuseColor()?that.getDiffuseColor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diffuseColor", lhsDiffuseColor), LocatorUtils.property(thatLocator, "diffuseColor", rhsDiffuseColor), lhsDiffuseColor, rhsDiffuseColor)) {
                return false;
            }
        }
        {
            List<Double> lhsEmissiveColor;
            lhsEmissiveColor = (this.isSetEmissiveColor()?this.getEmissiveColor():null);
            List<Double> rhsEmissiveColor;
            rhsEmissiveColor = (that.isSetEmissiveColor()?that.getEmissiveColor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "emissiveColor", lhsEmissiveColor), LocatorUtils.property(thatLocator, "emissiveColor", rhsEmissiveColor), lhsEmissiveColor, rhsEmissiveColor)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Double theShininess;
            theShininess = this.getShininess();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shininess", theShininess), currentHashCode, theShininess);
        }
        {
            Double theTransparency;
            theTransparency = this.getTransparency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transparency", theTransparency), currentHashCode, theTransparency);
        }
        {
            Double theAmbientIntensity;
            theAmbientIntensity = this.getAmbientIntensity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ambientIntensity", theAmbientIntensity), currentHashCode, theAmbientIntensity);
        }
        {
            List<Double> theSpecularColor;
            theSpecularColor = (this.isSetSpecularColor()?this.getSpecularColor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specularColor", theSpecularColor), currentHashCode, theSpecularColor);
        }
        {
            List<Double> theDiffuseColor;
            theDiffuseColor = (this.isSetDiffuseColor()?this.getDiffuseColor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diffuseColor", theDiffuseColor), currentHashCode, theDiffuseColor);
        }
        {
            List<Double> theEmissiveColor;
            theEmissiveColor = (this.isSetEmissiveColor()?this.getEmissiveColor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "emissiveColor", theEmissiveColor), currentHashCode, theEmissiveColor);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MaterialType) {
            final MaterialType copy = ((MaterialType) draftCopy);
            if (this.isSetShininess()) {
                Double sourceShininess;
                sourceShininess = this.getShininess();
                Double copyShininess = ((Double) strategy.copy(LocatorUtils.property(locator, "shininess", sourceShininess), sourceShininess));
                copy.setShininess(copyShininess);
            } else {
                copy.shininess = null;
            }
            if (this.isSetTransparency()) {
                Double sourceTransparency;
                sourceTransparency = this.getTransparency();
                Double copyTransparency = ((Double) strategy.copy(LocatorUtils.property(locator, "transparency", sourceTransparency), sourceTransparency));
                copy.setTransparency(copyTransparency);
            } else {
                copy.transparency = null;
            }
            if (this.isSetAmbientIntensity()) {
                Double sourceAmbientIntensity;
                sourceAmbientIntensity = this.getAmbientIntensity();
                Double copyAmbientIntensity = ((Double) strategy.copy(LocatorUtils.property(locator, "ambientIntensity", sourceAmbientIntensity), sourceAmbientIntensity));
                copy.setAmbientIntensity(copyAmbientIntensity);
            } else {
                copy.ambientIntensity = null;
            }
            if (this.isSetSpecularColor()) {
                List<Double> sourceSpecularColor;
                sourceSpecularColor = (this.isSetSpecularColor()?this.getSpecularColor():null);
                @SuppressWarnings("unchecked")
                List<Double> copySpecularColor = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "specularColor", sourceSpecularColor), sourceSpecularColor));
                copy.unsetSpecularColor();
                if (copySpecularColor!= null) {
                    List<Double> uniqueSpecularColorl = copy.getSpecularColor();
                    uniqueSpecularColorl.addAll(copySpecularColor);
                }
            } else {
                copy.unsetSpecularColor();
            }
            if (this.isSetDiffuseColor()) {
                List<Double> sourceDiffuseColor;
                sourceDiffuseColor = (this.isSetDiffuseColor()?this.getDiffuseColor():null);
                @SuppressWarnings("unchecked")
                List<Double> copyDiffuseColor = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "diffuseColor", sourceDiffuseColor), sourceDiffuseColor));
                copy.unsetDiffuseColor();
                if (copyDiffuseColor!= null) {
                    List<Double> uniqueDiffuseColorl = copy.getDiffuseColor();
                    uniqueDiffuseColorl.addAll(copyDiffuseColor);
                }
            } else {
                copy.unsetDiffuseColor();
            }
            if (this.isSetEmissiveColor()) {
                List<Double> sourceEmissiveColor;
                sourceEmissiveColor = (this.isSetEmissiveColor()?this.getEmissiveColor():null);
                @SuppressWarnings("unchecked")
                List<Double> copyEmissiveColor = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "emissiveColor", sourceEmissiveColor), sourceEmissiveColor));
                copy.unsetEmissiveColor();
                if (copyEmissiveColor!= null) {
                    List<Double> uniqueEmissiveColorl = copy.getEmissiveColor();
                    uniqueEmissiveColorl.addAll(copyEmissiveColor);
                }
            } else {
                copy.unsetEmissiveColor();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MaterialType();
    }

}
