//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.texturedsurface.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.OrientableSurfaceType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Deprecated since CityGML version 0.4.0. Use the concepts of the CityGML Appearance module instead. The
 * 				concept of positioning textures on surfaces complies with the standard X3D. Because there has been no appropriate
 * 				texturing concept in GML3, CityGML adds the class TexturedSurface to the geometry model of GML 3. A texture is specified
 * 				as a raster image referenced by an URI, and can be an arbitrary resource, even in the internet. Textures are positioned by
 * 				employing the concept of texture coordinates, i.e. each texture coordinate matches with exactly one 3D coordinate of the
 * 				TexturedSurface. The use of texture coordinates allows an exact positioning and trimming of the texture on the surface
 * 				geometry. Each surface may be assigned one or more appearances, each refering to one side of the surface.
 * 			
 * 
 * <p>Java class for TexturedSurfaceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TexturedSurfaceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}OrientableSurfaceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/texturedsurface/2.0}appearance" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TexturedSurfaceType", propOrder = {
    "appearance"
})
public class TexturedSurfaceType
    extends OrientableSurfaceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected List<AppearancePropertyType> appearance;

    /**
     * Gets the value of the appearance property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the appearance property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAppearance().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AppearancePropertyType }
     * 
     * 
     */
    public List<AppearancePropertyType> getAppearance() {
        if (appearance == null) {
            appearance = new ArrayList<AppearancePropertyType>();
        }
        return this.appearance;
    }

    public boolean isSetAppearance() {
        return ((this.appearance!= null)&&(!this.appearance.isEmpty()));
    }

    public void unsetAppearance() {
        this.appearance = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<AppearancePropertyType> theAppearance;
            theAppearance = (this.isSetAppearance()?this.getAppearance():null);
            strategy.appendField(locator, this, "appearance", buffer, theAppearance);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TexturedSurfaceType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TexturedSurfaceType that = ((TexturedSurfaceType) object);
        {
            List<AppearancePropertyType> lhsAppearance;
            lhsAppearance = (this.isSetAppearance()?this.getAppearance():null);
            List<AppearancePropertyType> rhsAppearance;
            rhsAppearance = (that.isSetAppearance()?that.getAppearance():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appearance", lhsAppearance), LocatorUtils.property(thatLocator, "appearance", rhsAppearance), lhsAppearance, rhsAppearance)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<AppearancePropertyType> theAppearance;
            theAppearance = (this.isSetAppearance()?this.getAppearance():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appearance", theAppearance), currentHashCode, theAppearance);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof TexturedSurfaceType) {
            final TexturedSurfaceType copy = ((TexturedSurfaceType) draftCopy);
            if (this.isSetAppearance()) {
                List<AppearancePropertyType> sourceAppearance;
                sourceAppearance = (this.isSetAppearance()?this.getAppearance():null);
                @SuppressWarnings("unchecked")
                List<AppearancePropertyType> copyAppearance = ((List<AppearancePropertyType> ) strategy.copy(LocatorUtils.property(locator, "appearance", sourceAppearance), sourceAppearance));
                copy.unsetAppearance();
                if (copyAppearance!= null) {
                    List<AppearancePropertyType> uniqueAppearancel = copy.getAppearance();
                    uniqueAppearancel.addAll(copyAppearance);
                }
            } else {
                copy.unsetAppearance();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TexturedSurfaceType();
    }

}
