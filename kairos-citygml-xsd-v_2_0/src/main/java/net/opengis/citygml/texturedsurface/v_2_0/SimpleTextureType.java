//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.texturedsurface.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Deprecated since CityGML version 0.4.0. Use the concepts of the CityGML Appearance module instead. Adopted
 * 				from X3D standard (http://www.web3d.org/x3d/). ToDo: repeat 
 * 
 * <p>Java class for SimpleTextureType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SimpleTextureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/texturedsurface/2.0}AbstractAppearanceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="textureMap" type="{http://www.w3.org/2001/XMLSchema}anyURI"/&gt;
 *         &lt;element name="textureCoordinates" type="{http://www.opengis.net/gml}doubleList"/&gt;
 *         &lt;element name="textureType" type="{http://www.opengis.net/citygml/texturedsurface/2.0}TextureTypeType" minOccurs="0"/&gt;
 *         &lt;element name="repeat" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SimpleTextureType", propOrder = {
    "textureMap",
    "textureCoordinates",
    "textureType",
    "repeat"
})
public class SimpleTextureType
    extends AbstractAppearanceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "anyURI")
    protected String textureMap;
    @XmlList
    @XmlElement(type = Double.class)
    @XmlSchemaType(name = "anySimpleType")
    protected List<Double> textureCoordinates;
    @XmlSchemaType(name = "string")
    protected TextureTypeType textureType;
    protected Boolean repeat;

    /**
     * Gets the value of the textureMap property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTextureMap() {
        return textureMap;
    }

    /**
     * Sets the value of the textureMap property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTextureMap(String value) {
        this.textureMap = value;
    }

    public boolean isSetTextureMap() {
        return (this.textureMap!= null);
    }

    /**
     * Gets the value of the textureCoordinates property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the textureCoordinates property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTextureCoordinates().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Double }
     * 
     * 
     */
    public List<Double> getTextureCoordinates() {
        if (textureCoordinates == null) {
            textureCoordinates = new ArrayList<Double>();
        }
        return this.textureCoordinates;
    }

    public boolean isSetTextureCoordinates() {
        return ((this.textureCoordinates!= null)&&(!this.textureCoordinates.isEmpty()));
    }

    public void unsetTextureCoordinates() {
        this.textureCoordinates = null;
    }

    /**
     * Gets the value of the textureType property.
     * 
     * @return
     *     possible object is
     *     {@link TextureTypeType }
     *     
     */
    public TextureTypeType getTextureType() {
        return textureType;
    }

    /**
     * Sets the value of the textureType property.
     * 
     * @param value
     *     allowed object is
     *     {@link TextureTypeType }
     *     
     */
    public void setTextureType(TextureTypeType value) {
        this.textureType = value;
    }

    public boolean isSetTextureType() {
        return (this.textureType!= null);
    }

    /**
     * Gets the value of the repeat property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isRepeat() {
        return repeat;
    }

    /**
     * Sets the value of the repeat property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setRepeat(Boolean value) {
        this.repeat = value;
    }

    public boolean isSetRepeat() {
        return (this.repeat!= null);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theTextureMap;
            theTextureMap = this.getTextureMap();
            strategy.appendField(locator, this, "textureMap", buffer, theTextureMap);
        }
        {
            List<Double> theTextureCoordinates;
            theTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
            strategy.appendField(locator, this, "textureCoordinates", buffer, theTextureCoordinates);
        }
        {
            TextureTypeType theTextureType;
            theTextureType = this.getTextureType();
            strategy.appendField(locator, this, "textureType", buffer, theTextureType);
        }
        {
            Boolean theRepeat;
            theRepeat = this.isRepeat();
            strategy.appendField(locator, this, "repeat", buffer, theRepeat);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SimpleTextureType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SimpleTextureType that = ((SimpleTextureType) object);
        {
            String lhsTextureMap;
            lhsTextureMap = this.getTextureMap();
            String rhsTextureMap;
            rhsTextureMap = that.getTextureMap();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textureMap", lhsTextureMap), LocatorUtils.property(thatLocator, "textureMap", rhsTextureMap), lhsTextureMap, rhsTextureMap)) {
                return false;
            }
        }
        {
            List<Double> lhsTextureCoordinates;
            lhsTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
            List<Double> rhsTextureCoordinates;
            rhsTextureCoordinates = (that.isSetTextureCoordinates()?that.getTextureCoordinates():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textureCoordinates", lhsTextureCoordinates), LocatorUtils.property(thatLocator, "textureCoordinates", rhsTextureCoordinates), lhsTextureCoordinates, rhsTextureCoordinates)) {
                return false;
            }
        }
        {
            TextureTypeType lhsTextureType;
            lhsTextureType = this.getTextureType();
            TextureTypeType rhsTextureType;
            rhsTextureType = that.getTextureType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "textureType", lhsTextureType), LocatorUtils.property(thatLocator, "textureType", rhsTextureType), lhsTextureType, rhsTextureType)) {
                return false;
            }
        }
        {
            Boolean lhsRepeat;
            lhsRepeat = this.isRepeat();
            Boolean rhsRepeat;
            rhsRepeat = that.isRepeat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "repeat", lhsRepeat), LocatorUtils.property(thatLocator, "repeat", rhsRepeat), lhsRepeat, rhsRepeat)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theTextureMap;
            theTextureMap = this.getTextureMap();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textureMap", theTextureMap), currentHashCode, theTextureMap);
        }
        {
            List<Double> theTextureCoordinates;
            theTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textureCoordinates", theTextureCoordinates), currentHashCode, theTextureCoordinates);
        }
        {
            TextureTypeType theTextureType;
            theTextureType = this.getTextureType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "textureType", theTextureType), currentHashCode, theTextureType);
        }
        {
            Boolean theRepeat;
            theRepeat = this.isRepeat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "repeat", theRepeat), currentHashCode, theRepeat);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof SimpleTextureType) {
            final SimpleTextureType copy = ((SimpleTextureType) draftCopy);
            if (this.isSetTextureMap()) {
                String sourceTextureMap;
                sourceTextureMap = this.getTextureMap();
                String copyTextureMap = ((String) strategy.copy(LocatorUtils.property(locator, "textureMap", sourceTextureMap), sourceTextureMap));
                copy.setTextureMap(copyTextureMap);
            } else {
                copy.textureMap = null;
            }
            if (this.isSetTextureCoordinates()) {
                List<Double> sourceTextureCoordinates;
                sourceTextureCoordinates = (this.isSetTextureCoordinates()?this.getTextureCoordinates():null);
                @SuppressWarnings("unchecked")
                List<Double> copyTextureCoordinates = ((List<Double> ) strategy.copy(LocatorUtils.property(locator, "textureCoordinates", sourceTextureCoordinates), sourceTextureCoordinates));
                copy.unsetTextureCoordinates();
                if (copyTextureCoordinates!= null) {
                    List<Double> uniqueTextureCoordinatesl = copy.getTextureCoordinates();
                    uniqueTextureCoordinatesl.addAll(copyTextureCoordinates);
                }
            } else {
                copy.unsetTextureCoordinates();
            }
            if (this.isSetTextureType()) {
                TextureTypeType sourceTextureType;
                sourceTextureType = this.getTextureType();
                TextureTypeType copyTextureType = ((TextureTypeType) strategy.copy(LocatorUtils.property(locator, "textureType", sourceTextureType), sourceTextureType));
                copy.setTextureType(copyTextureType);
            } else {
                copy.textureType = null;
            }
            if (this.isSetRepeat()) {
                Boolean sourceRepeat;
                sourceRepeat = this.isRepeat();
                Boolean copyRepeat = ((Boolean) strategy.copy(LocatorUtils.property(locator, "repeat", sourceRepeat), sourceRepeat));
                copy.setRepeat(copyRepeat);
            } else {
                copy.repeat = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SimpleTextureType();
    }

}
