//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.relief.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the TIN component of a relief feature. As subclass of _CityObject, a TINRelief inherits
 * 				all attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for TINReliefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TINReliefType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/relief/2.0}AbstractReliefComponentType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="tin" type="{http://www.opengis.net/citygml/relief/2.0}tinPropertyType"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/relief/2.0}_GenericApplicationPropertyOfTinRelief" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TINReliefType", propOrder = {
    "tin",
    "genericApplicationPropertyOfTinRelief"
})
public class TINReliefType
    extends AbstractReliefComponentType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected TinPropertyType tin;
    @XmlElement(name = "_GenericApplicationPropertyOfTinRelief")
    protected List<Object> genericApplicationPropertyOfTinRelief;

    /**
     * Gets the value of the tin property.
     * 
     * @return
     *     possible object is
     *     {@link TinPropertyType }
     *     
     */
    public TinPropertyType getTin() {
        return tin;
    }

    /**
     * Sets the value of the tin property.
     * 
     * @param value
     *     allowed object is
     *     {@link TinPropertyType }
     *     
     */
    public void setTin(TinPropertyType value) {
        this.tin = value;
    }

    public boolean isSetTin() {
        return (this.tin!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfTinRelief property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfTinRelief property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfTinRelief().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfTinRelief() {
        if (genericApplicationPropertyOfTinRelief == null) {
            genericApplicationPropertyOfTinRelief = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfTinRelief;
    }

    public boolean isSetGenericApplicationPropertyOfTinRelief() {
        return ((this.genericApplicationPropertyOfTinRelief!= null)&&(!this.genericApplicationPropertyOfTinRelief.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfTinRelief() {
        this.genericApplicationPropertyOfTinRelief = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            TinPropertyType theTin;
            theTin = this.getTin();
            strategy.appendField(locator, this, "tin", buffer, theTin);
        }
        {
            List<Object> theGenericApplicationPropertyOfTinRelief;
            theGenericApplicationPropertyOfTinRelief = (this.isSetGenericApplicationPropertyOfTinRelief()?this.getGenericApplicationPropertyOfTinRelief():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfTinRelief", buffer, theGenericApplicationPropertyOfTinRelief);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TINReliefType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TINReliefType that = ((TINReliefType) object);
        {
            TinPropertyType lhsTin;
            lhsTin = this.getTin();
            TinPropertyType rhsTin;
            rhsTin = that.getTin();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tin", lhsTin), LocatorUtils.property(thatLocator, "tin", rhsTin), lhsTin, rhsTin)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfTinRelief;
            lhsGenericApplicationPropertyOfTinRelief = (this.isSetGenericApplicationPropertyOfTinRelief()?this.getGenericApplicationPropertyOfTinRelief():null);
            List<Object> rhsGenericApplicationPropertyOfTinRelief;
            rhsGenericApplicationPropertyOfTinRelief = (that.isSetGenericApplicationPropertyOfTinRelief()?that.getGenericApplicationPropertyOfTinRelief():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfTinRelief", lhsGenericApplicationPropertyOfTinRelief), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfTinRelief", rhsGenericApplicationPropertyOfTinRelief), lhsGenericApplicationPropertyOfTinRelief, rhsGenericApplicationPropertyOfTinRelief)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TinPropertyType theTin;
            theTin = this.getTin();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tin", theTin), currentHashCode, theTin);
        }
        {
            List<Object> theGenericApplicationPropertyOfTinRelief;
            theGenericApplicationPropertyOfTinRelief = (this.isSetGenericApplicationPropertyOfTinRelief()?this.getGenericApplicationPropertyOfTinRelief():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfTinRelief", theGenericApplicationPropertyOfTinRelief), currentHashCode, theGenericApplicationPropertyOfTinRelief);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof TINReliefType) {
            final TINReliefType copy = ((TINReliefType) draftCopy);
            if (this.isSetTin()) {
                TinPropertyType sourceTin;
                sourceTin = this.getTin();
                TinPropertyType copyTin = ((TinPropertyType) strategy.copy(LocatorUtils.property(locator, "tin", sourceTin), sourceTin));
                copy.setTin(copyTin);
            } else {
                copy.tin = null;
            }
            if (this.isSetGenericApplicationPropertyOfTinRelief()) {
                List<Object> sourceGenericApplicationPropertyOfTinRelief;
                sourceGenericApplicationPropertyOfTinRelief = (this.isSetGenericApplicationPropertyOfTinRelief()?this.getGenericApplicationPropertyOfTinRelief():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfTinRelief = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfTinRelief", sourceGenericApplicationPropertyOfTinRelief), sourceGenericApplicationPropertyOfTinRelief));
                copy.unsetGenericApplicationPropertyOfTinRelief();
                if (copyGenericApplicationPropertyOfTinRelief!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfTinReliefl = copy.getGenericApplicationPropertyOfTinRelief();
                    uniqueGenericApplicationPropertyOfTinReliefl.addAll(copyGenericApplicationPropertyOfTinRelief);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfTinRelief();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TINReliefType();
    }

}
