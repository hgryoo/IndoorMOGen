//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.relief.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import net.opengis.citygml.v_2_0.AbstractCityObjectType;
import net.opengis.gml.v_3_1_1.PolygonPropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the components of a relief feature - either a TIN, a Grid, mass points or break lines. As
 * 				subclass of _CityObject, a ReliefComponent inherits all attributes and relations, in particular an id, names, external
 * 				references, and generalization relations. 
 * 
 * <p>Java class for AbstractReliefComponentType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AbstractReliefComponentType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/2.0}AbstractCityObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lod" type="{http://www.opengis.net/citygml/2.0}integerBetween0and4"/&gt;
 *         &lt;element name="extent" type="{http://www.opengis.net/gml}PolygonPropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/relief/2.0}_GenericApplicationPropertyOfReliefComponent" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AbstractReliefComponentType", propOrder = {
    "lod",
    "extent",
    "genericApplicationPropertyOfReliefComponent"
})
@XmlSeeAlso({
    TINReliefType.class,
    RasterReliefType.class,
    MassPointReliefType.class,
    BreaklineReliefType.class
})
public abstract class AbstractReliefComponentType
    extends AbstractCityObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlSchemaType(name = "integer")
    protected int lod;
    protected PolygonPropertyType extent;
    @XmlElement(name = "_GenericApplicationPropertyOfReliefComponent")
    protected List<Object> genericApplicationPropertyOfReliefComponent;

    /**
     * Gets the value of the lod property.
     * 
     */
    public int getLod() {
        return lod;
    }

    /**
     * Sets the value of the lod property.
     * 
     */
    public void setLod(int value) {
        this.lod = value;
    }

    public boolean isSetLod() {
        return true;
    }

    /**
     * Gets the value of the extent property.
     * 
     * @return
     *     possible object is
     *     {@link PolygonPropertyType }
     *     
     */
    public PolygonPropertyType getExtent() {
        return extent;
    }

    /**
     * Sets the value of the extent property.
     * 
     * @param value
     *     allowed object is
     *     {@link PolygonPropertyType }
     *     
     */
    public void setExtent(PolygonPropertyType value) {
        this.extent = value;
    }

    public boolean isSetExtent() {
        return (this.extent!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfReliefComponent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfReliefComponent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfReliefComponent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfReliefComponent() {
        if (genericApplicationPropertyOfReliefComponent == null) {
            genericApplicationPropertyOfReliefComponent = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfReliefComponent;
    }

    public boolean isSetGenericApplicationPropertyOfReliefComponent() {
        return ((this.genericApplicationPropertyOfReliefComponent!= null)&&(!this.genericApplicationPropertyOfReliefComponent.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfReliefComponent() {
        this.genericApplicationPropertyOfReliefComponent = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            int theLod;
            theLod = this.getLod();
            strategy.appendField(locator, this, "lod", buffer, theLod);
        }
        {
            PolygonPropertyType theExtent;
            theExtent = this.getExtent();
            strategy.appendField(locator, this, "extent", buffer, theExtent);
        }
        {
            List<Object> theGenericApplicationPropertyOfReliefComponent;
            theGenericApplicationPropertyOfReliefComponent = (this.isSetGenericApplicationPropertyOfReliefComponent()?this.getGenericApplicationPropertyOfReliefComponent():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfReliefComponent", buffer, theGenericApplicationPropertyOfReliefComponent);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AbstractReliefComponentType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AbstractReliefComponentType that = ((AbstractReliefComponentType) object);
        {
            int lhsLod;
            lhsLod = this.getLod();
            int rhsLod;
            rhsLod = that.getLod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod", lhsLod), LocatorUtils.property(thatLocator, "lod", rhsLod), lhsLod, rhsLod)) {
                return false;
            }
        }
        {
            PolygonPropertyType lhsExtent;
            lhsExtent = this.getExtent();
            PolygonPropertyType rhsExtent;
            rhsExtent = that.getExtent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extent", lhsExtent), LocatorUtils.property(thatLocator, "extent", rhsExtent), lhsExtent, rhsExtent)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfReliefComponent;
            lhsGenericApplicationPropertyOfReliefComponent = (this.isSetGenericApplicationPropertyOfReliefComponent()?this.getGenericApplicationPropertyOfReliefComponent():null);
            List<Object> rhsGenericApplicationPropertyOfReliefComponent;
            rhsGenericApplicationPropertyOfReliefComponent = (that.isSetGenericApplicationPropertyOfReliefComponent()?that.getGenericApplicationPropertyOfReliefComponent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfReliefComponent", lhsGenericApplicationPropertyOfReliefComponent), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfReliefComponent", rhsGenericApplicationPropertyOfReliefComponent), lhsGenericApplicationPropertyOfReliefComponent, rhsGenericApplicationPropertyOfReliefComponent)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            int theLod;
            theLod = this.getLod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod", theLod), currentHashCode, theLod);
        }
        {
            PolygonPropertyType theExtent;
            theExtent = this.getExtent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extent", theExtent), currentHashCode, theExtent);
        }
        {
            List<Object> theGenericApplicationPropertyOfReliefComponent;
            theGenericApplicationPropertyOfReliefComponent = (this.isSetGenericApplicationPropertyOfReliefComponent()?this.getGenericApplicationPropertyOfReliefComponent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfReliefComponent", theGenericApplicationPropertyOfReliefComponent), currentHashCode, theGenericApplicationPropertyOfReliefComponent);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        if (null == target) {
            throw new IllegalArgumentException("Target argument must not be null for abstract copyable classes.");
        }
        super.copyTo(locator, target, strategy);
        if (target instanceof AbstractReliefComponentType) {
            final AbstractReliefComponentType copy = ((AbstractReliefComponentType) target);
            {
                int sourceLod;
                sourceLod = this.getLod();
                int copyLod = strategy.copy(LocatorUtils.property(locator, "lod", sourceLod), sourceLod);
                copy.setLod(copyLod);
            }
            if (this.isSetExtent()) {
                PolygonPropertyType sourceExtent;
                sourceExtent = this.getExtent();
                PolygonPropertyType copyExtent = ((PolygonPropertyType) strategy.copy(LocatorUtils.property(locator, "extent", sourceExtent), sourceExtent));
                copy.setExtent(copyExtent);
            } else {
                copy.extent = null;
            }
            if (this.isSetGenericApplicationPropertyOfReliefComponent()) {
                List<Object> sourceGenericApplicationPropertyOfReliefComponent;
                sourceGenericApplicationPropertyOfReliefComponent = (this.isSetGenericApplicationPropertyOfReliefComponent()?this.getGenericApplicationPropertyOfReliefComponent():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfReliefComponent = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfReliefComponent", sourceGenericApplicationPropertyOfReliefComponent), sourceGenericApplicationPropertyOfReliefComponent));
                copy.unsetGenericApplicationPropertyOfReliefComponent();
                if (copyGenericApplicationPropertyOfReliefComponent!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfReliefComponentl = copy.getGenericApplicationPropertyOfReliefComponent();
                    uniqueGenericApplicationPropertyOfReliefComponentl.addAll(copyGenericApplicationPropertyOfReliefComponent);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfReliefComponent();
            }
        }
        return target;
    }

}
