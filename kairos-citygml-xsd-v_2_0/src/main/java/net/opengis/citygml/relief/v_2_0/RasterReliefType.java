//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.relief.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the raster component of a relief feature. As subclass of _CityObject, a RasterRelief
 * 				inherits all attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for RasterReliefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RasterReliefType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/relief/2.0}AbstractReliefComponentType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="grid" type="{http://www.opengis.net/citygml/relief/2.0}gridPropertyType"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/relief/2.0}_GenericApplicationPropertyOfRasterRelief" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RasterReliefType", propOrder = {
    "grid",
    "genericApplicationPropertyOfRasterRelief"
})
public class RasterReliefType
    extends AbstractReliefComponentType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected GridPropertyType grid;
    @XmlElement(name = "_GenericApplicationPropertyOfRasterRelief")
    protected List<Object> genericApplicationPropertyOfRasterRelief;

    /**
     * Gets the value of the grid property.
     * 
     * @return
     *     possible object is
     *     {@link GridPropertyType }
     *     
     */
    public GridPropertyType getGrid() {
        return grid;
    }

    /**
     * Sets the value of the grid property.
     * 
     * @param value
     *     allowed object is
     *     {@link GridPropertyType }
     *     
     */
    public void setGrid(GridPropertyType value) {
        this.grid = value;
    }

    public boolean isSetGrid() {
        return (this.grid!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfRasterRelief property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfRasterRelief property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfRasterRelief().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfRasterRelief() {
        if (genericApplicationPropertyOfRasterRelief == null) {
            genericApplicationPropertyOfRasterRelief = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfRasterRelief;
    }

    public boolean isSetGenericApplicationPropertyOfRasterRelief() {
        return ((this.genericApplicationPropertyOfRasterRelief!= null)&&(!this.genericApplicationPropertyOfRasterRelief.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfRasterRelief() {
        this.genericApplicationPropertyOfRasterRelief = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            GridPropertyType theGrid;
            theGrid = this.getGrid();
            strategy.appendField(locator, this, "grid", buffer, theGrid);
        }
        {
            List<Object> theGenericApplicationPropertyOfRasterRelief;
            theGenericApplicationPropertyOfRasterRelief = (this.isSetGenericApplicationPropertyOfRasterRelief()?this.getGenericApplicationPropertyOfRasterRelief():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfRasterRelief", buffer, theGenericApplicationPropertyOfRasterRelief);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof RasterReliefType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final RasterReliefType that = ((RasterReliefType) object);
        {
            GridPropertyType lhsGrid;
            lhsGrid = this.getGrid();
            GridPropertyType rhsGrid;
            rhsGrid = that.getGrid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "grid", lhsGrid), LocatorUtils.property(thatLocator, "grid", rhsGrid), lhsGrid, rhsGrid)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfRasterRelief;
            lhsGenericApplicationPropertyOfRasterRelief = (this.isSetGenericApplicationPropertyOfRasterRelief()?this.getGenericApplicationPropertyOfRasterRelief():null);
            List<Object> rhsGenericApplicationPropertyOfRasterRelief;
            rhsGenericApplicationPropertyOfRasterRelief = (that.isSetGenericApplicationPropertyOfRasterRelief()?that.getGenericApplicationPropertyOfRasterRelief():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfRasterRelief", lhsGenericApplicationPropertyOfRasterRelief), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfRasterRelief", rhsGenericApplicationPropertyOfRasterRelief), lhsGenericApplicationPropertyOfRasterRelief, rhsGenericApplicationPropertyOfRasterRelief)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            GridPropertyType theGrid;
            theGrid = this.getGrid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "grid", theGrid), currentHashCode, theGrid);
        }
        {
            List<Object> theGenericApplicationPropertyOfRasterRelief;
            theGenericApplicationPropertyOfRasterRelief = (this.isSetGenericApplicationPropertyOfRasterRelief()?this.getGenericApplicationPropertyOfRasterRelief():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfRasterRelief", theGenericApplicationPropertyOfRasterRelief), currentHashCode, theGenericApplicationPropertyOfRasterRelief);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof RasterReliefType) {
            final RasterReliefType copy = ((RasterReliefType) draftCopy);
            if (this.isSetGrid()) {
                GridPropertyType sourceGrid;
                sourceGrid = this.getGrid();
                GridPropertyType copyGrid = ((GridPropertyType) strategy.copy(LocatorUtils.property(locator, "grid", sourceGrid), sourceGrid));
                copy.setGrid(copyGrid);
            } else {
                copy.grid = null;
            }
            if (this.isSetGenericApplicationPropertyOfRasterRelief()) {
                List<Object> sourceGenericApplicationPropertyOfRasterRelief;
                sourceGenericApplicationPropertyOfRasterRelief = (this.isSetGenericApplicationPropertyOfRasterRelief()?this.getGenericApplicationPropertyOfRasterRelief():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfRasterRelief = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfRasterRelief", sourceGenericApplicationPropertyOfRasterRelief), sourceGenericApplicationPropertyOfRasterRelief));
                copy.unsetGenericApplicationPropertyOfRasterRelief();
                if (copyGenericApplicationPropertyOfRasterRelief!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfRasterReliefl = copy.getGenericApplicationPropertyOfRasterRelief();
                    uniqueGenericApplicationPropertyOfRasterReliefl.addAll(copyGenericApplicationPropertyOfRasterRelief);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfRasterRelief();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RasterReliefType();
    }

}
