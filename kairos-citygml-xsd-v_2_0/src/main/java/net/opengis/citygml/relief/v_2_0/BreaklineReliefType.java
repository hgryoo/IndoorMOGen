//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.relief.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import net.opengis.gml.v_3_1_1.MultiCurvePropertyType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the break line Component of a relief feature. A break line relief consists of break lines
 * 				or ridgeOrValleyLines. As subclass of _CityObject, a BreaklineRelief inherits all attributes and relations, in particular
 * 				an id, names, external references, and generalization relations. 
 * 
 * <p>Java class for BreaklineReliefType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BreaklineReliefType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/relief/2.0}AbstractReliefComponentType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="ridgeOrValleyLines" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element name="breaklines" type="{http://www.opengis.net/gml}MultiCurvePropertyType" minOccurs="0"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/relief/2.0}_GenericApplicationPropertyOfBreaklineRelief" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BreaklineReliefType", propOrder = {
    "ridgeOrValleyLines",
    "breaklines",
    "genericApplicationPropertyOfBreaklineRelief"
})
public class BreaklineReliefType
    extends AbstractReliefComponentType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected MultiCurvePropertyType ridgeOrValleyLines;
    protected MultiCurvePropertyType breaklines;
    @XmlElement(name = "_GenericApplicationPropertyOfBreaklineRelief")
    protected List<Object> genericApplicationPropertyOfBreaklineRelief;

    /**
     * Gets the value of the ridgeOrValleyLines property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getRidgeOrValleyLines() {
        return ridgeOrValleyLines;
    }

    /**
     * Sets the value of the ridgeOrValleyLines property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setRidgeOrValleyLines(MultiCurvePropertyType value) {
        this.ridgeOrValleyLines = value;
    }

    public boolean isSetRidgeOrValleyLines() {
        return (this.ridgeOrValleyLines!= null);
    }

    /**
     * Gets the value of the breaklines property.
     * 
     * @return
     *     possible object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public MultiCurvePropertyType getBreaklines() {
        return breaklines;
    }

    /**
     * Sets the value of the breaklines property.
     * 
     * @param value
     *     allowed object is
     *     {@link MultiCurvePropertyType }
     *     
     */
    public void setBreaklines(MultiCurvePropertyType value) {
        this.breaklines = value;
    }

    public boolean isSetBreaklines() {
        return (this.breaklines!= null);
    }

    /**
     * Gets the value of the genericApplicationPropertyOfBreaklineRelief property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfBreaklineRelief property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfBreaklineRelief().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfBreaklineRelief() {
        if (genericApplicationPropertyOfBreaklineRelief == null) {
            genericApplicationPropertyOfBreaklineRelief = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfBreaklineRelief;
    }

    public boolean isSetGenericApplicationPropertyOfBreaklineRelief() {
        return ((this.genericApplicationPropertyOfBreaklineRelief!= null)&&(!this.genericApplicationPropertyOfBreaklineRelief.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfBreaklineRelief() {
        this.genericApplicationPropertyOfBreaklineRelief = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MultiCurvePropertyType theRidgeOrValleyLines;
            theRidgeOrValleyLines = this.getRidgeOrValleyLines();
            strategy.appendField(locator, this, "ridgeOrValleyLines", buffer, theRidgeOrValleyLines);
        }
        {
            MultiCurvePropertyType theBreaklines;
            theBreaklines = this.getBreaklines();
            strategy.appendField(locator, this, "breaklines", buffer, theBreaklines);
        }
        {
            List<Object> theGenericApplicationPropertyOfBreaklineRelief;
            theGenericApplicationPropertyOfBreaklineRelief = (this.isSetGenericApplicationPropertyOfBreaklineRelief()?this.getGenericApplicationPropertyOfBreaklineRelief():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfBreaklineRelief", buffer, theGenericApplicationPropertyOfBreaklineRelief);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BreaklineReliefType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final BreaklineReliefType that = ((BreaklineReliefType) object);
        {
            MultiCurvePropertyType lhsRidgeOrValleyLines;
            lhsRidgeOrValleyLines = this.getRidgeOrValleyLines();
            MultiCurvePropertyType rhsRidgeOrValleyLines;
            rhsRidgeOrValleyLines = that.getRidgeOrValleyLines();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ridgeOrValleyLines", lhsRidgeOrValleyLines), LocatorUtils.property(thatLocator, "ridgeOrValleyLines", rhsRidgeOrValleyLines), lhsRidgeOrValleyLines, rhsRidgeOrValleyLines)) {
                return false;
            }
        }
        {
            MultiCurvePropertyType lhsBreaklines;
            lhsBreaklines = this.getBreaklines();
            MultiCurvePropertyType rhsBreaklines;
            rhsBreaklines = that.getBreaklines();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "breaklines", lhsBreaklines), LocatorUtils.property(thatLocator, "breaklines", rhsBreaklines), lhsBreaklines, rhsBreaklines)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfBreaklineRelief;
            lhsGenericApplicationPropertyOfBreaklineRelief = (this.isSetGenericApplicationPropertyOfBreaklineRelief()?this.getGenericApplicationPropertyOfBreaklineRelief():null);
            List<Object> rhsGenericApplicationPropertyOfBreaklineRelief;
            rhsGenericApplicationPropertyOfBreaklineRelief = (that.isSetGenericApplicationPropertyOfBreaklineRelief()?that.getGenericApplicationPropertyOfBreaklineRelief():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfBreaklineRelief", lhsGenericApplicationPropertyOfBreaklineRelief), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfBreaklineRelief", rhsGenericApplicationPropertyOfBreaklineRelief), lhsGenericApplicationPropertyOfBreaklineRelief, rhsGenericApplicationPropertyOfBreaklineRelief)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MultiCurvePropertyType theRidgeOrValleyLines;
            theRidgeOrValleyLines = this.getRidgeOrValleyLines();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ridgeOrValleyLines", theRidgeOrValleyLines), currentHashCode, theRidgeOrValleyLines);
        }
        {
            MultiCurvePropertyType theBreaklines;
            theBreaklines = this.getBreaklines();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "breaklines", theBreaklines), currentHashCode, theBreaklines);
        }
        {
            List<Object> theGenericApplicationPropertyOfBreaklineRelief;
            theGenericApplicationPropertyOfBreaklineRelief = (this.isSetGenericApplicationPropertyOfBreaklineRelief()?this.getGenericApplicationPropertyOfBreaklineRelief():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfBreaklineRelief", theGenericApplicationPropertyOfBreaklineRelief), currentHashCode, theGenericApplicationPropertyOfBreaklineRelief);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof BreaklineReliefType) {
            final BreaklineReliefType copy = ((BreaklineReliefType) draftCopy);
            if (this.isSetRidgeOrValleyLines()) {
                MultiCurvePropertyType sourceRidgeOrValleyLines;
                sourceRidgeOrValleyLines = this.getRidgeOrValleyLines();
                MultiCurvePropertyType copyRidgeOrValleyLines = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "ridgeOrValleyLines", sourceRidgeOrValleyLines), sourceRidgeOrValleyLines));
                copy.setRidgeOrValleyLines(copyRidgeOrValleyLines);
            } else {
                copy.ridgeOrValleyLines = null;
            }
            if (this.isSetBreaklines()) {
                MultiCurvePropertyType sourceBreaklines;
                sourceBreaklines = this.getBreaklines();
                MultiCurvePropertyType copyBreaklines = ((MultiCurvePropertyType) strategy.copy(LocatorUtils.property(locator, "breaklines", sourceBreaklines), sourceBreaklines));
                copy.setBreaklines(copyBreaklines);
            } else {
                copy.breaklines = null;
            }
            if (this.isSetGenericApplicationPropertyOfBreaklineRelief()) {
                List<Object> sourceGenericApplicationPropertyOfBreaklineRelief;
                sourceGenericApplicationPropertyOfBreaklineRelief = (this.isSetGenericApplicationPropertyOfBreaklineRelief()?this.getGenericApplicationPropertyOfBreaklineRelief():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfBreaklineRelief = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfBreaklineRelief", sourceGenericApplicationPropertyOfBreaklineRelief), sourceGenericApplicationPropertyOfBreaklineRelief));
                copy.unsetGenericApplicationPropertyOfBreaklineRelief();
                if (copyGenericApplicationPropertyOfBreaklineRelief!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfBreaklineReliefl = copy.getGenericApplicationPropertyOfBreaklineRelief();
                    uniqueGenericApplicationPropertyOfBreaklineReliefl.addAll(copyGenericApplicationPropertyOfBreaklineRelief);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfBreaklineRelief();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new BreaklineReliefType();
    }

}
