//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.citygml.relief.v_2_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import net.opengis.citygml.v_2_0.AbstractCityObjectType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Type describing the features of the Digital Terrain Model. As subclass of _CityObject, a ReliefFeature
 * 				inherits all attributes and relations, in particular an id, names, external references, and generalization relations.
 * 			
 * 
 * <p>Java class for ReliefFeatureType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ReliefFeatureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/citygml/2.0}AbstractCityObjectType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lod" type="{http://www.opengis.net/citygml/2.0}integerBetween0and4"/&gt;
 *         &lt;element name="reliefComponent" type="{http://www.opengis.net/citygml/relief/2.0}ReliefComponentPropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element ref="{http://www.opengis.net/citygml/relief/2.0}_GenericApplicationPropertyOfReliefFeature" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ReliefFeatureType", propOrder = {
    "lod",
    "reliefComponent",
    "genericApplicationPropertyOfReliefFeature"
})
public class ReliefFeatureType
    extends AbstractCityObjectType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlSchemaType(name = "integer")
    protected int lod;
    @XmlElement(required = true)
    protected List<ReliefComponentPropertyType> reliefComponent;
    @XmlElement(name = "_GenericApplicationPropertyOfReliefFeature")
    protected List<Object> genericApplicationPropertyOfReliefFeature;

    /**
     * Gets the value of the lod property.
     * 
     */
    public int getLod() {
        return lod;
    }

    /**
     * Sets the value of the lod property.
     * 
     */
    public void setLod(int value) {
        this.lod = value;
    }

    public boolean isSetLod() {
        return true;
    }

    /**
     * Gets the value of the reliefComponent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reliefComponent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReliefComponent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ReliefComponentPropertyType }
     * 
     * 
     */
    public List<ReliefComponentPropertyType> getReliefComponent() {
        if (reliefComponent == null) {
            reliefComponent = new ArrayList<ReliefComponentPropertyType>();
        }
        return this.reliefComponent;
    }

    public boolean isSetReliefComponent() {
        return ((this.reliefComponent!= null)&&(!this.reliefComponent.isEmpty()));
    }

    public void unsetReliefComponent() {
        this.reliefComponent = null;
    }

    /**
     * Gets the value of the genericApplicationPropertyOfReliefFeature property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the genericApplicationPropertyOfReliefFeature property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGenericApplicationPropertyOfReliefFeature().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Object }
     * 
     * 
     */
    public List<Object> getGenericApplicationPropertyOfReliefFeature() {
        if (genericApplicationPropertyOfReliefFeature == null) {
            genericApplicationPropertyOfReliefFeature = new ArrayList<Object>();
        }
        return this.genericApplicationPropertyOfReliefFeature;
    }

    public boolean isSetGenericApplicationPropertyOfReliefFeature() {
        return ((this.genericApplicationPropertyOfReliefFeature!= null)&&(!this.genericApplicationPropertyOfReliefFeature.isEmpty()));
    }

    public void unsetGenericApplicationPropertyOfReliefFeature() {
        this.genericApplicationPropertyOfReliefFeature = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            int theLod;
            theLod = this.getLod();
            strategy.appendField(locator, this, "lod", buffer, theLod);
        }
        {
            List<ReliefComponentPropertyType> theReliefComponent;
            theReliefComponent = (this.isSetReliefComponent()?this.getReliefComponent():null);
            strategy.appendField(locator, this, "reliefComponent", buffer, theReliefComponent);
        }
        {
            List<Object> theGenericApplicationPropertyOfReliefFeature;
            theGenericApplicationPropertyOfReliefFeature = (this.isSetGenericApplicationPropertyOfReliefFeature()?this.getGenericApplicationPropertyOfReliefFeature():null);
            strategy.appendField(locator, this, "genericApplicationPropertyOfReliefFeature", buffer, theGenericApplicationPropertyOfReliefFeature);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ReliefFeatureType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ReliefFeatureType that = ((ReliefFeatureType) object);
        {
            int lhsLod;
            lhsLod = this.getLod();
            int rhsLod;
            rhsLod = that.getLod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lod", lhsLod), LocatorUtils.property(thatLocator, "lod", rhsLod), lhsLod, rhsLod)) {
                return false;
            }
        }
        {
            List<ReliefComponentPropertyType> lhsReliefComponent;
            lhsReliefComponent = (this.isSetReliefComponent()?this.getReliefComponent():null);
            List<ReliefComponentPropertyType> rhsReliefComponent;
            rhsReliefComponent = (that.isSetReliefComponent()?that.getReliefComponent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reliefComponent", lhsReliefComponent), LocatorUtils.property(thatLocator, "reliefComponent", rhsReliefComponent), lhsReliefComponent, rhsReliefComponent)) {
                return false;
            }
        }
        {
            List<Object> lhsGenericApplicationPropertyOfReliefFeature;
            lhsGenericApplicationPropertyOfReliefFeature = (this.isSetGenericApplicationPropertyOfReliefFeature()?this.getGenericApplicationPropertyOfReliefFeature():null);
            List<Object> rhsGenericApplicationPropertyOfReliefFeature;
            rhsGenericApplicationPropertyOfReliefFeature = (that.isSetGenericApplicationPropertyOfReliefFeature()?that.getGenericApplicationPropertyOfReliefFeature():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "genericApplicationPropertyOfReliefFeature", lhsGenericApplicationPropertyOfReliefFeature), LocatorUtils.property(thatLocator, "genericApplicationPropertyOfReliefFeature", rhsGenericApplicationPropertyOfReliefFeature), lhsGenericApplicationPropertyOfReliefFeature, rhsGenericApplicationPropertyOfReliefFeature)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            int theLod;
            theLod = this.getLod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lod", theLod), currentHashCode, theLod);
        }
        {
            List<ReliefComponentPropertyType> theReliefComponent;
            theReliefComponent = (this.isSetReliefComponent()?this.getReliefComponent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reliefComponent", theReliefComponent), currentHashCode, theReliefComponent);
        }
        {
            List<Object> theGenericApplicationPropertyOfReliefFeature;
            theGenericApplicationPropertyOfReliefFeature = (this.isSetGenericApplicationPropertyOfReliefFeature()?this.getGenericApplicationPropertyOfReliefFeature():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "genericApplicationPropertyOfReliefFeature", theGenericApplicationPropertyOfReliefFeature), currentHashCode, theGenericApplicationPropertyOfReliefFeature);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof ReliefFeatureType) {
            final ReliefFeatureType copy = ((ReliefFeatureType) draftCopy);
            {
                int sourceLod;
                sourceLod = this.getLod();
                int copyLod = strategy.copy(LocatorUtils.property(locator, "lod", sourceLod), sourceLod);
                copy.setLod(copyLod);
            }
            if (this.isSetReliefComponent()) {
                List<ReliefComponentPropertyType> sourceReliefComponent;
                sourceReliefComponent = (this.isSetReliefComponent()?this.getReliefComponent():null);
                @SuppressWarnings("unchecked")
                List<ReliefComponentPropertyType> copyReliefComponent = ((List<ReliefComponentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "reliefComponent", sourceReliefComponent), sourceReliefComponent));
                copy.unsetReliefComponent();
                if (copyReliefComponent!= null) {
                    List<ReliefComponentPropertyType> uniqueReliefComponentl = copy.getReliefComponent();
                    uniqueReliefComponentl.addAll(copyReliefComponent);
                }
            } else {
                copy.unsetReliefComponent();
            }
            if (this.isSetGenericApplicationPropertyOfReliefFeature()) {
                List<Object> sourceGenericApplicationPropertyOfReliefFeature;
                sourceGenericApplicationPropertyOfReliefFeature = (this.isSetGenericApplicationPropertyOfReliefFeature()?this.getGenericApplicationPropertyOfReliefFeature():null);
                @SuppressWarnings("unchecked")
                List<Object> copyGenericApplicationPropertyOfReliefFeature = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "genericApplicationPropertyOfReliefFeature", sourceGenericApplicationPropertyOfReliefFeature), sourceGenericApplicationPropertyOfReliefFeature));
                copy.unsetGenericApplicationPropertyOfReliefFeature();
                if (copyGenericApplicationPropertyOfReliefFeature!= null) {
                    List<Object> uniqueGenericApplicationPropertyOfReliefFeaturel = copy.getGenericApplicationPropertyOfReliefFeature();
                    uniqueGenericApplicationPropertyOfReliefFeaturel.addAll(copyGenericApplicationPropertyOfReliefFeature);
                }
            } else {
                copy.unsetGenericApplicationPropertyOfReliefFeature();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ReliefFeatureType();
    }

}
