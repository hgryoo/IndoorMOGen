//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.gml.v_3_1_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A tin is a triangulated surface that uses
 *    the Delauny algorithm or a similar algorithm complemented with
 *    consideration of breaklines, stoplines, and maximum length of 
 *    triangle sides. These networks satisfy the Delauny's criterion
 *    away from the modifications: Fore each triangle in the 
 *    network, the circle passing through its vertices does not
 *    contain, in its interior, the vertex of any other triangle.
 * 
 * <p>Java class for TinType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TinType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}TriangulatedSurfaceType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="stopLines" type="{http://www.opengis.net/gml}LineStringSegmentArrayPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="breakLines" type="{http://www.opengis.net/gml}LineStringSegmentArrayPropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="maxLength" type="{http://www.opengis.net/gml}LengthType"/&gt;
 *         &lt;element name="controlPoint"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;choice&gt;
 *                   &lt;element ref="{http://www.opengis.net/gml}posList"/&gt;
 *                   &lt;group ref="{http://www.opengis.net/gml}geometricPositionGroup" maxOccurs="unbounded" minOccurs="3"/&gt;
 *                 &lt;/choice&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TinType", propOrder = {
    "stopLines",
    "breakLines",
    "maxLength",
    "controlPoint"
})
public class TinType
    extends TriangulatedSurfaceType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected List<LineStringSegmentArrayPropertyType> stopLines;
    protected List<LineStringSegmentArrayPropertyType> breakLines;
    @XmlElement(required = true)
    protected LengthType maxLength;
    @XmlElement(required = true)
    protected TinType.ControlPoint controlPoint;

    /**
     * Gets the value of the stopLines property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the stopLines property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getStopLines().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LineStringSegmentArrayPropertyType }
     * 
     * 
     */
    public List<LineStringSegmentArrayPropertyType> getStopLines() {
        if (stopLines == null) {
            stopLines = new ArrayList<LineStringSegmentArrayPropertyType>();
        }
        return this.stopLines;
    }

    public boolean isSetStopLines() {
        return ((this.stopLines!= null)&&(!this.stopLines.isEmpty()));
    }

    public void unsetStopLines() {
        this.stopLines = null;
    }

    /**
     * Gets the value of the breakLines property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the breakLines property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBreakLines().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LineStringSegmentArrayPropertyType }
     * 
     * 
     */
    public List<LineStringSegmentArrayPropertyType> getBreakLines() {
        if (breakLines == null) {
            breakLines = new ArrayList<LineStringSegmentArrayPropertyType>();
        }
        return this.breakLines;
    }

    public boolean isSetBreakLines() {
        return ((this.breakLines!= null)&&(!this.breakLines.isEmpty()));
    }

    public void unsetBreakLines() {
        this.breakLines = null;
    }

    /**
     * Gets the value of the maxLength property.
     * 
     * @return
     *     possible object is
     *     {@link LengthType }
     *     
     */
    public LengthType getMaxLength() {
        return maxLength;
    }

    /**
     * Sets the value of the maxLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link LengthType }
     *     
     */
    public void setMaxLength(LengthType value) {
        this.maxLength = value;
    }

    public boolean isSetMaxLength() {
        return (this.maxLength!= null);
    }

    /**
     * Gets the value of the controlPoint property.
     * 
     * @return
     *     possible object is
     *     {@link TinType.ControlPoint }
     *     
     */
    public TinType.ControlPoint getControlPoint() {
        return controlPoint;
    }

    /**
     * Sets the value of the controlPoint property.
     * 
     * @param value
     *     allowed object is
     *     {@link TinType.ControlPoint }
     *     
     */
    public void setControlPoint(TinType.ControlPoint value) {
        this.controlPoint = value;
    }

    public boolean isSetControlPoint() {
        return (this.controlPoint!= null);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<LineStringSegmentArrayPropertyType> theStopLines;
            theStopLines = (this.isSetStopLines()?this.getStopLines():null);
            strategy.appendField(locator, this, "stopLines", buffer, theStopLines);
        }
        {
            List<LineStringSegmentArrayPropertyType> theBreakLines;
            theBreakLines = (this.isSetBreakLines()?this.getBreakLines():null);
            strategy.appendField(locator, this, "breakLines", buffer, theBreakLines);
        }
        {
            LengthType theMaxLength;
            theMaxLength = this.getMaxLength();
            strategy.appendField(locator, this, "maxLength", buffer, theMaxLength);
        }
        {
            TinType.ControlPoint theControlPoint;
            theControlPoint = this.getControlPoint();
            strategy.appendField(locator, this, "controlPoint", buffer, theControlPoint);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TinType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final TinType that = ((TinType) object);
        {
            List<LineStringSegmentArrayPropertyType> lhsStopLines;
            lhsStopLines = (this.isSetStopLines()?this.getStopLines():null);
            List<LineStringSegmentArrayPropertyType> rhsStopLines;
            rhsStopLines = (that.isSetStopLines()?that.getStopLines():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stopLines", lhsStopLines), LocatorUtils.property(thatLocator, "stopLines", rhsStopLines), lhsStopLines, rhsStopLines)) {
                return false;
            }
        }
        {
            List<LineStringSegmentArrayPropertyType> lhsBreakLines;
            lhsBreakLines = (this.isSetBreakLines()?this.getBreakLines():null);
            List<LineStringSegmentArrayPropertyType> rhsBreakLines;
            rhsBreakLines = (that.isSetBreakLines()?that.getBreakLines():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "breakLines", lhsBreakLines), LocatorUtils.property(thatLocator, "breakLines", rhsBreakLines), lhsBreakLines, rhsBreakLines)) {
                return false;
            }
        }
        {
            LengthType lhsMaxLength;
            lhsMaxLength = this.getMaxLength();
            LengthType rhsMaxLength;
            rhsMaxLength = that.getMaxLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxLength", lhsMaxLength), LocatorUtils.property(thatLocator, "maxLength", rhsMaxLength), lhsMaxLength, rhsMaxLength)) {
                return false;
            }
        }
        {
            TinType.ControlPoint lhsControlPoint;
            lhsControlPoint = this.getControlPoint();
            TinType.ControlPoint rhsControlPoint;
            rhsControlPoint = that.getControlPoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "controlPoint", lhsControlPoint), LocatorUtils.property(thatLocator, "controlPoint", rhsControlPoint), lhsControlPoint, rhsControlPoint)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<LineStringSegmentArrayPropertyType> theStopLines;
            theStopLines = (this.isSetStopLines()?this.getStopLines():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stopLines", theStopLines), currentHashCode, theStopLines);
        }
        {
            List<LineStringSegmentArrayPropertyType> theBreakLines;
            theBreakLines = (this.isSetBreakLines()?this.getBreakLines():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "breakLines", theBreakLines), currentHashCode, theBreakLines);
        }
        {
            LengthType theMaxLength;
            theMaxLength = this.getMaxLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxLength", theMaxLength), currentHashCode, theMaxLength);
        }
        {
            TinType.ControlPoint theControlPoint;
            theControlPoint = this.getControlPoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "controlPoint", theControlPoint), currentHashCode, theControlPoint);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof TinType) {
            final TinType copy = ((TinType) draftCopy);
            if (this.isSetStopLines()) {
                List<LineStringSegmentArrayPropertyType> sourceStopLines;
                sourceStopLines = (this.isSetStopLines()?this.getStopLines():null);
                @SuppressWarnings("unchecked")
                List<LineStringSegmentArrayPropertyType> copyStopLines = ((List<LineStringSegmentArrayPropertyType> ) strategy.copy(LocatorUtils.property(locator, "stopLines", sourceStopLines), sourceStopLines));
                copy.unsetStopLines();
                if (copyStopLines!= null) {
                    List<LineStringSegmentArrayPropertyType> uniqueStopLinesl = copy.getStopLines();
                    uniqueStopLinesl.addAll(copyStopLines);
                }
            } else {
                copy.unsetStopLines();
            }
            if (this.isSetBreakLines()) {
                List<LineStringSegmentArrayPropertyType> sourceBreakLines;
                sourceBreakLines = (this.isSetBreakLines()?this.getBreakLines():null);
                @SuppressWarnings("unchecked")
                List<LineStringSegmentArrayPropertyType> copyBreakLines = ((List<LineStringSegmentArrayPropertyType> ) strategy.copy(LocatorUtils.property(locator, "breakLines", sourceBreakLines), sourceBreakLines));
                copy.unsetBreakLines();
                if (copyBreakLines!= null) {
                    List<LineStringSegmentArrayPropertyType> uniqueBreakLinesl = copy.getBreakLines();
                    uniqueBreakLinesl.addAll(copyBreakLines);
                }
            } else {
                copy.unsetBreakLines();
            }
            if (this.isSetMaxLength()) {
                LengthType sourceMaxLength;
                sourceMaxLength = this.getMaxLength();
                LengthType copyMaxLength = ((LengthType) strategy.copy(LocatorUtils.property(locator, "maxLength", sourceMaxLength), sourceMaxLength));
                copy.setMaxLength(copyMaxLength);
            } else {
                copy.maxLength = null;
            }
            if (this.isSetControlPoint()) {
                TinType.ControlPoint sourceControlPoint;
                sourceControlPoint = this.getControlPoint();
                TinType.ControlPoint copyControlPoint = ((TinType.ControlPoint) strategy.copy(LocatorUtils.property(locator, "controlPoint", sourceControlPoint), sourceControlPoint));
                copy.setControlPoint(copyControlPoint);
            } else {
                copy.controlPoint = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TinType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;choice&gt;
     *         &lt;element ref="{http://www.opengis.net/gml}posList"/&gt;
     *         &lt;group ref="{http://www.opengis.net/gml}geometricPositionGroup" maxOccurs="unbounded" minOccurs="3"/&gt;
     *       &lt;/choice&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "posList",
        "geometricPositionGroup"
    })
    public static class ControlPoint
        implements Cloneable, CopyTo, Equals, HashCode, ToString
    {

        protected DirectPositionListType posList;
        @XmlElements({
            @XmlElement(name = "pos", type = DirectPositionType.class),
            @XmlElement(name = "pointProperty", type = PointPropertyType.class)
        })
        protected List<Object> geometricPositionGroup;

        /**
         * Gets the value of the posList property.
         * 
         * @return
         *     possible object is
         *     {@link DirectPositionListType }
         *     
         */
        public DirectPositionListType getPosList() {
            return posList;
        }

        /**
         * Sets the value of the posList property.
         * 
         * @param value
         *     allowed object is
         *     {@link DirectPositionListType }
         *     
         */
        public void setPosList(DirectPositionListType value) {
            this.posList = value;
        }

        public boolean isSetPosList() {
            return (this.posList!= null);
        }

        /**
         * Gets the value of the geometricPositionGroup property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the geometricPositionGroup property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getGeometricPositionGroup().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link DirectPositionType }
         * {@link PointPropertyType }
         * 
         * 
         */
        public List<Object> getGeometricPositionGroup() {
            if (geometricPositionGroup == null) {
                geometricPositionGroup = new ArrayList<Object>();
            }
            return this.geometricPositionGroup;
        }

        public boolean isSetGeometricPositionGroup() {
            return ((this.geometricPositionGroup!= null)&&(!this.geometricPositionGroup.isEmpty()));
        }

        public void unsetGeometricPositionGroup() {
            this.geometricPositionGroup = null;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                DirectPositionListType thePosList;
                thePosList = this.getPosList();
                strategy.appendField(locator, this, "posList", buffer, thePosList);
            }
            {
                List<Object> theGeometricPositionGroup;
                theGeometricPositionGroup = (this.isSetGeometricPositionGroup()?this.getGeometricPositionGroup():null);
                strategy.appendField(locator, this, "geometricPositionGroup", buffer, theGeometricPositionGroup);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof TinType.ControlPoint)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final TinType.ControlPoint that = ((TinType.ControlPoint) object);
            {
                DirectPositionListType lhsPosList;
                lhsPosList = this.getPosList();
                DirectPositionListType rhsPosList;
                rhsPosList = that.getPosList();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "posList", lhsPosList), LocatorUtils.property(thatLocator, "posList", rhsPosList), lhsPosList, rhsPosList)) {
                    return false;
                }
            }
            {
                List<Object> lhsGeometricPositionGroup;
                lhsGeometricPositionGroup = (this.isSetGeometricPositionGroup()?this.getGeometricPositionGroup():null);
                List<Object> rhsGeometricPositionGroup;
                rhsGeometricPositionGroup = (that.isSetGeometricPositionGroup()?that.getGeometricPositionGroup():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "geometricPositionGroup", lhsGeometricPositionGroup), LocatorUtils.property(thatLocator, "geometricPositionGroup", rhsGeometricPositionGroup), lhsGeometricPositionGroup, rhsGeometricPositionGroup)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                DirectPositionListType thePosList;
                thePosList = this.getPosList();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "posList", thePosList), currentHashCode, thePosList);
            }
            {
                List<Object> theGeometricPositionGroup;
                theGeometricPositionGroup = (this.isSetGeometricPositionGroup()?this.getGeometricPositionGroup():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geometricPositionGroup", theGeometricPositionGroup), currentHashCode, theGeometricPositionGroup);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof TinType.ControlPoint) {
                final TinType.ControlPoint copy = ((TinType.ControlPoint) draftCopy);
                if (this.isSetPosList()) {
                    DirectPositionListType sourcePosList;
                    sourcePosList = this.getPosList();
                    DirectPositionListType copyPosList = ((DirectPositionListType) strategy.copy(LocatorUtils.property(locator, "posList", sourcePosList), sourcePosList));
                    copy.setPosList(copyPosList);
                } else {
                    copy.posList = null;
                }
                if (this.isSetGeometricPositionGroup()) {
                    List<Object> sourceGeometricPositionGroup;
                    sourceGeometricPositionGroup = (this.isSetGeometricPositionGroup()?this.getGeometricPositionGroup():null);
                    @SuppressWarnings("unchecked")
                    List<Object> copyGeometricPositionGroup = ((List<Object> ) strategy.copy(LocatorUtils.property(locator, "geometricPositionGroup", sourceGeometricPositionGroup), sourceGeometricPositionGroup));
                    copy.unsetGeometricPositionGroup();
                    if (copyGeometricPositionGroup!= null) {
                        List<Object> uniqueGeometricPositionGroupl = copy.getGeometricPositionGroup();
                        uniqueGeometricPositionGroupl.addAll(copyGeometricPositionGroup);
                    }
                } else {
                    copy.unsetGeometricPositionGroup();
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new TinType.ControlPoint();
        }

    }

}
