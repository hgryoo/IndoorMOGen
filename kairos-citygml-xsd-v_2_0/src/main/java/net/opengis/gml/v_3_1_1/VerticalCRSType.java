//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.gml.v_3_1_1;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A 1D coordinate reference system used for recording heights or depths. Vertical CRSs make use of the direction of gravity to define the concept of height or depth, but the relationship with gravity may not be straightforward. By implication, ellipsoidal heights (h) cannot be captured in a vertical coordinate reference system. Ellipsoidal heights cannot exist independently, but only as an inseparable part of a 3D coordinate tuple defined in a geographic 3D coordinate reference system. 
 * 
 * <p>Java class for VerticalCRSType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="VerticalCRSType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractReferenceSystemType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{http://www.opengis.net/gml}usesVerticalCS"/&gt;
 *         &lt;element ref="{http://www.opengis.net/gml}usesVerticalDatum"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "VerticalCRSType", propOrder = {
    "usesVerticalCS",
    "usesVerticalDatum"
})
public class VerticalCRSType
    extends AbstractReferenceSystemType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected VerticalCSRefType usesVerticalCS;
    @XmlElement(required = true)
    protected VerticalDatumRefType usesVerticalDatum;

    /**
     * Gets the value of the usesVerticalCS property.
     * 
     * @return
     *     possible object is
     *     {@link VerticalCSRefType }
     *     
     */
    public VerticalCSRefType getUsesVerticalCS() {
        return usesVerticalCS;
    }

    /**
     * Sets the value of the usesVerticalCS property.
     * 
     * @param value
     *     allowed object is
     *     {@link VerticalCSRefType }
     *     
     */
    public void setUsesVerticalCS(VerticalCSRefType value) {
        this.usesVerticalCS = value;
    }

    public boolean isSetUsesVerticalCS() {
        return (this.usesVerticalCS!= null);
    }

    /**
     * Gets the value of the usesVerticalDatum property.
     * 
     * @return
     *     possible object is
     *     {@link VerticalDatumRefType }
     *     
     */
    public VerticalDatumRefType getUsesVerticalDatum() {
        return usesVerticalDatum;
    }

    /**
     * Sets the value of the usesVerticalDatum property.
     * 
     * @param value
     *     allowed object is
     *     {@link VerticalDatumRefType }
     *     
     */
    public void setUsesVerticalDatum(VerticalDatumRefType value) {
        this.usesVerticalDatum = value;
    }

    public boolean isSetUsesVerticalDatum() {
        return (this.usesVerticalDatum!= null);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            VerticalCSRefType theUsesVerticalCS;
            theUsesVerticalCS = this.getUsesVerticalCS();
            strategy.appendField(locator, this, "usesVerticalCS", buffer, theUsesVerticalCS);
        }
        {
            VerticalDatumRefType theUsesVerticalDatum;
            theUsesVerticalDatum = this.getUsesVerticalDatum();
            strategy.appendField(locator, this, "usesVerticalDatum", buffer, theUsesVerticalDatum);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof VerticalCRSType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final VerticalCRSType that = ((VerticalCRSType) object);
        {
            VerticalCSRefType lhsUsesVerticalCS;
            lhsUsesVerticalCS = this.getUsesVerticalCS();
            VerticalCSRefType rhsUsesVerticalCS;
            rhsUsesVerticalCS = that.getUsesVerticalCS();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usesVerticalCS", lhsUsesVerticalCS), LocatorUtils.property(thatLocator, "usesVerticalCS", rhsUsesVerticalCS), lhsUsesVerticalCS, rhsUsesVerticalCS)) {
                return false;
            }
        }
        {
            VerticalDatumRefType lhsUsesVerticalDatum;
            lhsUsesVerticalDatum = this.getUsesVerticalDatum();
            VerticalDatumRefType rhsUsesVerticalDatum;
            rhsUsesVerticalDatum = that.getUsesVerticalDatum();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usesVerticalDatum", lhsUsesVerticalDatum), LocatorUtils.property(thatLocator, "usesVerticalDatum", rhsUsesVerticalDatum), lhsUsesVerticalDatum, rhsUsesVerticalDatum)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            VerticalCSRefType theUsesVerticalCS;
            theUsesVerticalCS = this.getUsesVerticalCS();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usesVerticalCS", theUsesVerticalCS), currentHashCode, theUsesVerticalCS);
        }
        {
            VerticalDatumRefType theUsesVerticalDatum;
            theUsesVerticalDatum = this.getUsesVerticalDatum();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usesVerticalDatum", theUsesVerticalDatum), currentHashCode, theUsesVerticalDatum);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof VerticalCRSType) {
            final VerticalCRSType copy = ((VerticalCRSType) draftCopy);
            if (this.isSetUsesVerticalCS()) {
                VerticalCSRefType sourceUsesVerticalCS;
                sourceUsesVerticalCS = this.getUsesVerticalCS();
                VerticalCSRefType copyUsesVerticalCS = ((VerticalCSRefType) strategy.copy(LocatorUtils.property(locator, "usesVerticalCS", sourceUsesVerticalCS), sourceUsesVerticalCS));
                copy.setUsesVerticalCS(copyUsesVerticalCS);
            } else {
                copy.usesVerticalCS = null;
            }
            if (this.isSetUsesVerticalDatum()) {
                VerticalDatumRefType sourceUsesVerticalDatum;
                sourceUsesVerticalDatum = this.getUsesVerticalDatum();
                VerticalDatumRefType copyUsesVerticalDatum = ((VerticalDatumRefType) strategy.copy(LocatorUtils.property(locator, "usesVerticalDatum", sourceUsesVerticalDatum), sourceUsesVerticalDatum));
                copy.setUsesVerticalDatum(copyUsesVerticalDatum);
            } else {
                copy.usesVerticalDatum = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new VerticalCRSType();
    }

}
