//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.10 at 10:41:43 AM KST 
//


package net.opengis.gml.v_3_1_1;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A non-abstract bag that is specialized for use as a dictionary which contains a set of definitions. These definitions are referenced from other places, in the same and different XML documents. In this restricted type, the inherited optional "description" element can be used for a description of this dictionary. The inherited optional "name" element can be used for the name(s) of this dictionary. The inherited "metaDataProperty" elements can be used to reference or contain more information about this dictionary. The inherited required gml:id attribute allows the dictionary to be referenced using this handle. 
 * 
 * <p>Java class for DictionaryType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DictionaryType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.opengis.net/gml}DefinitionType"&gt;
 *       &lt;sequence maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;choice&gt;
 *           &lt;element ref="{http://www.opengis.net/gml}dictionaryEntry"/&gt;
 *           &lt;element ref="{http://www.opengis.net/gml}indirectEntry"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DictionaryType", propOrder = {
    "dictionaryEntryOrIndirectEntry"
})
public class DictionaryType
    extends DefinitionType
    implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElementRefs({
        @XmlElementRef(name = "dictionaryEntry", namespace = "http://www.opengis.net/gml", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "indirectEntry", namespace = "http://www.opengis.net/gml", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> dictionaryEntryOrIndirectEntry;

    /**
     * Gets the value of the dictionaryEntryOrIndirectEntry property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dictionaryEntryOrIndirectEntry property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDictionaryEntryOrIndirectEntry().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link IndirectEntryType }{@code >}
     * {@link JAXBElement }{@code <}{@link DictionaryEntryType }{@code >}
     * {@link JAXBElement }{@code <}{@link DictionaryEntryType }{@code >}
     * 
     * 
     */
    public List<JAXBElement<?>> getDictionaryEntryOrIndirectEntry() {
        if (dictionaryEntryOrIndirectEntry == null) {
            dictionaryEntryOrIndirectEntry = new ArrayList<JAXBElement<?>>();
        }
        return this.dictionaryEntryOrIndirectEntry;
    }

    public boolean isSetDictionaryEntryOrIndirectEntry() {
        return ((this.dictionaryEntryOrIndirectEntry!= null)&&(!this.dictionaryEntryOrIndirectEntry.isEmpty()));
    }

    public void unsetDictionaryEntryOrIndirectEntry() {
        this.dictionaryEntryOrIndirectEntry = null;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<JAXBElement<?>> theDictionaryEntryOrIndirectEntry;
            theDictionaryEntryOrIndirectEntry = (this.isSetDictionaryEntryOrIndirectEntry()?this.getDictionaryEntryOrIndirectEntry():null);
            strategy.appendField(locator, this, "dictionaryEntryOrIndirectEntry", buffer, theDictionaryEntryOrIndirectEntry);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DictionaryType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DictionaryType that = ((DictionaryType) object);
        {
            List<JAXBElement<?>> lhsDictionaryEntryOrIndirectEntry;
            lhsDictionaryEntryOrIndirectEntry = (this.isSetDictionaryEntryOrIndirectEntry()?this.getDictionaryEntryOrIndirectEntry():null);
            List<JAXBElement<?>> rhsDictionaryEntryOrIndirectEntry;
            rhsDictionaryEntryOrIndirectEntry = (that.isSetDictionaryEntryOrIndirectEntry()?that.getDictionaryEntryOrIndirectEntry():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dictionaryEntryOrIndirectEntry", lhsDictionaryEntryOrIndirectEntry), LocatorUtils.property(thatLocator, "dictionaryEntryOrIndirectEntry", rhsDictionaryEntryOrIndirectEntry), lhsDictionaryEntryOrIndirectEntry, rhsDictionaryEntryOrIndirectEntry)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<JAXBElement<?>> theDictionaryEntryOrIndirectEntry;
            theDictionaryEntryOrIndirectEntry = (this.isSetDictionaryEntryOrIndirectEntry()?this.getDictionaryEntryOrIndirectEntry():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dictionaryEntryOrIndirectEntry", theDictionaryEntryOrIndirectEntry), currentHashCode, theDictionaryEntryOrIndirectEntry);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof DictionaryType) {
            final DictionaryType copy = ((DictionaryType) draftCopy);
            if (this.isSetDictionaryEntryOrIndirectEntry()) {
                List<JAXBElement<?>> sourceDictionaryEntryOrIndirectEntry;
                sourceDictionaryEntryOrIndirectEntry = (this.isSetDictionaryEntryOrIndirectEntry()?this.getDictionaryEntryOrIndirectEntry():null);
                @SuppressWarnings("unchecked")
                List<JAXBElement<?>> copyDictionaryEntryOrIndirectEntry = ((List<JAXBElement<?>> ) strategy.copy(LocatorUtils.property(locator, "dictionaryEntryOrIndirectEntry", sourceDictionaryEntryOrIndirectEntry), sourceDictionaryEntryOrIndirectEntry));
                copy.unsetDictionaryEntryOrIndirectEntry();
                if (copyDictionaryEntryOrIndirectEntry!= null) {
                    List<JAXBElement<?>> uniqueDictionaryEntryOrIndirectEntryl = copy.getDictionaryEntryOrIndirectEntry();
                    uniqueDictionaryEntryOrIndirectEntryl.addAll(copyDictionaryEntryOrIndirectEntry);
                }
            } else {
                copy.unsetDictionaryEntryOrIndirectEntry();
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DictionaryType();
    }

}
